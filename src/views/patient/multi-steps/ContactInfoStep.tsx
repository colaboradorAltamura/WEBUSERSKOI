// ** React Imports
import { useState, useEffect } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
// ** Custom Components Imports
import CustomTextField from 'src/@core/components/mui/text-field';
// ** Styles Import
import 'react-credit-cards/es/styles-compiled.css';
import { Form, Formik } from 'formik';
import * as Yup from 'yup';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { DynamicComponentTypes, IForm } from 'src/types/dynamics';
import { useTranslation } from 'react-i18next';
import { MenuItem, capitalize, Typography } from '@mui/material';
import {
  CMSCollections,
  IWorker,
  WorkerAgePreferences,
  WorkerEducationalLevels,
  PathologiesTypes,
  WorkerStateTypes,
  WorkerYearsExperienceOptions,
  IPatient,
  IRelative,
  RelativeTypes,
} from 'src/types/@autogenerated';
import Loader from 'src/@core/components/loader';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import * as yup from 'yup';
import { nameof } from 'src/@core/coreHelper';

const STEP_VALIDATIONS = Yup.object().shape({
  relativeName: yup.string().required(),
  relativePhoneNumber: yup.string().required(),
  relativePostalCode: yup.string().required(),
  relativeIdentificationNumber: yup.string().required(),
  relativeObservations: yup.string().required(),
  relationshipType: yup.string().required(),
});

const MenuProps = {
  PaperProps: {
    style: {
      width: 250,
      maxHeight: 48 * 4.5 + 8,
    },
  },
};

interface props {
  handlePrev: () => void;
  entityData: IPatient;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}
const JobExperienceStep = ({ handlePrev, entityData, onSubmit }: props) => {
  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IPatient>(entityData);
  const [relationshipTypes, setRelationshipTypes] = useState<any[]>([]);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  const getOptions = async (schema: string) => {
    try {
      //check this
      const optionsData: any = await dynamicGet({ params: '/cms/public/' + DEFAULT_ORGANIZATION_ID + '/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };
  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setRelationshipTypes(await getOptions(CMSCollections.RELATIVE_TYPES));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);
  const handleSubmit = async (values: any, actions: any) => {
    try {
      setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];

        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });

      //actuliza el state del worker en el form
      itemValues[nameof<IWorker>('workerState')] = WorkerStateTypes.PENDING_PREFERENCES;
      onSubmit(itemValues, false);

      actions.setSubmitting(false);
    } catch (e) {
      setSubmitError(e);
      actions.setSubmitting(false);
    }
  };

  return (
    <>
      <Typography variant='h2' sx={{ fontWeight: 'bold', fontSize: 30, width: '100%', textAlign: 'center' }}>
        {capitalize(t('contact info'))}
      </Typography>
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={STEP_VALIDATIONS}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, isSubmitting, setValues }) => (
          <Form id={'stepExperienceWorkerForm'} autoComplete='off'>
            <Grid item sm={6} md={6} xs={6}>
              <Grid container spacing={5} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relativeName',
                      name: 'relativeName',
                      label: t('relativeName') as string,
                      placeholder: t('relativeName') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relativePhoneNumber',
                      name: 'relativePhoneNumber',
                      label: t('relativePhoneNumber') as string,
                      placeholder: t('relativePhoneNumber') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relativePostalCode',
                      name: 'relativePostalCode',
                      label: t('relativePostalCode') as string,
                      placeholder: t('relativePostalCode') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                {/* <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('relationshipType') as string}
                      id='relationshipType'
                      name='relationshipType'
                      value={values.relationshipType}
                      onChange={(e) => setValues({ ...values, relationshipType: e.target.value })}
                      error={errors && errors['relationshipType'] ? true : false}
                      helperText={errors['relationshipType'] ? (t('Field required') as string) : ''}
                    >
                      {relationshipTypes.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid> */}
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relationshipType',
                      name: 'relationshipType',
                      label: t('relationshipType') as string,
                      placeholder: t('relationshipType') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relativeIdentificationNumber',
                      name: 'relativeIdentificationNumber',
                      label: t('relativeIdentificationNumber') as string,
                      placeholder: t('relativeIdentificationNumber') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'relativeObservations',
                      name: 'relativeObservations',
                      label: t('relativeObservations') as string,
                      placeholder: t('relativeObservations') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
              </Grid>
            </Grid>

            <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
              <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                <Button variant='contained' type='submit' disabled={isSubmitting} sx={{ '& svg': { ml: 2 } }}>
                  {capitalize(t('next') as string)}
                  <Icon fontSize='1.125rem' icon='tabler:arrow-right' />
                </Button>
              </Box>
            </Grid>
          </Form>
        )}
      </Formik>
    </>
  );
};

export default JobExperienceStep;
