// ** React Imports
import { useState, ChangeEvent, useEffect } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Avatar from '@mui/material/Avatar';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
// ** Custom Components Imports
import CustomTextField from 'src/@core/components/mui/text-field';
// ** Styles Import
import 'react-credit-cards/es/styles-compiled.css';
import { Form, Formik } from 'formik';
import * as Yup from 'yup';
import { useApplicantsOnboarding } from 'src/hooks/useApplicantsOnboarding';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { DynamicComponentTypes } from 'src/types/dynamics';
import { useTranslation } from 'react-i18next';
import {
  Badge,
  Card,
  CardContent,
  Checkbox,
  Drawer,
  FormControlLabel,
  IconButton,
  MenuItem,
  Typography,
  capitalize,
} from '@mui/material';
import {
  CMSCollections,
  GenderTypes,
  IAttachment,
  IPatient,
  IWorker,
  PatientsClinicStateTypes,
  PersonCivilStatusTypes,
  PersonNationalities,
  SexTypes,
  WorkerProfessionTypes,
  WorkerStateTypes,
} from 'src/types/@autogenerated';
import Loader from 'src/@core/components/loader';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import * as yup from 'yup';
import { handleError, nameof } from 'src/@core/coreHelper';
import { useAuth } from 'src/hooks/useAuth';
import { styled } from '@mui/material/styles';
import DropzoneWrapper from 'src/@core/styles/libs/react-dropzone';
import FileUploaderSingle from 'src/views/forms/form-elements/file-uploader/FileUploaderSingle';
import { BoxProps } from '@mui/material/Box';
import { createAttachment } from 'src/services/attachmentsServices';

import { userUpdateProfile, authRef } from 'src/configs/firebase';

const STEP_VALIDATIONS = Yup.object().shape({
  sex: yup.string().required(),
  identificationNumberCPF: yup.string().min(5).required(),
  identificationType: yup.string().required(),
  identificationNumber: yup.string().min(5).required(),
  phoneNumber: yup.string().min(10).required(),
  birthDate: yup.date().required().max(new Date(), 'Select a valid date'),
  school: yup.string().required(),
  civilStatus: yup.string().required(),
  motherName: yup.string().required(),
  fatherName: yup.string().required(),
  postalCode: yup.string().required(),
});
interface props {
  entityData: IPatient;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}

const SummaryStep = ({ entityData, onSubmit }: props) => {
  const auth = useAuth();

  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [isOpenUploadProfileImage, setIsOpenUploadProfileImage] = useState<boolean>(false);

  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IPatient>(entityData);
  const [professionOptions, setProfessionOptions] = useState<any[]>([]);
  const [genderOptions, setGenderOptions] = useState<any[]>([]);
  const [sexOptions, setSexOptions] = useState<any[]>([]);
  const [identificationTypeOptions, setIdentificationTypeOptions] = useState<any[]>([]);
  const [nationalityOptions, setNationalityOptions] = useState<any[]>([]);
  const [civilStatusOptions, setCivilStatusOptions] = useState<any[]>([]);
  const [isPrevDisabled, setIsPrevDisabled] = useState<boolean>(false);

  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  const getOptions = async (schema: string) => {
    try {
      //check this
      const optionsData: any = await dynamicGet({ params: '/cms/public/' + DEFAULT_ORGANIZATION_ID + '/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };
  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setSexOptions(await getOptions(CMSCollections.SEX_TYPES));
        setIdentificationTypeOptions(await getOptions(CMSCollections.PERSON_IDENTIFICATION_TYPES));
        setCivilStatusOptions(await getOptions(CMSCollections.PERSON_CIVIL_STATUS_TYPES));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);

  const handleSubmit = async (values: any, actions: any) => {
    try {
      setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];

        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });

      if (entityData?.clinicStateType === PatientsClinicStateTypes.PENDING_PARTIAL_INFO) {
        itemValues[nameof<IPatient>('clinicStateType')] = PatientsClinicStateTypes.PENDING_TRIAGE;
      } else {
        itemValues[nameof<IPatient>('clinicStateType')] = PatientsClinicStateTypes.PENDING_PARTIAL_INFO;
      }
      onSubmit(itemValues, false);

      actions.setSubmitting(false);
    } catch (e) {
      setSubmitError(e);
      actions.setSubmitting(false);
    }
  };

  return (
    <>
      <Typography variant='h2' sx={{ fontWeight: 'bold', fontSize: 30, width: '100%', textAlign: 'center' }}>
        {capitalize(t('patient info'))}
      </Typography>
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={STEP_VALIDATIONS}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, isSubmitting, setValues }) => {
          return (
            <Form id={'stepSummaryWorkerForm'} autoComplete='off'>
              <Grid container spacing={5} sx={{ mb: 4, marginTop: 10 }}>
                <Grid item xs={12} sm={12}>
                  <DynamicFormComponent
                    component={{
                      id: 'identificationNumberCPF',
                      name: 'identificationNumberCPF',
                      label: t('identificationNumberCPF') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('identificationType') as string}
                      id='identificationType'
                      value={values.identificationType}
                      onChange={(e) => setValues({ ...values, identificationType: e.target.value })}
                      error={errors && errors['identificationType'] ? true : false}
                      helperText={errors['identificationType'] ? (t('field required msj') as string) : ''}
                    >
                      {identificationTypeOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={4}>
                  <DynamicFormComponent
                    component={{
                      id: 'identificationNumber',
                      name: 'identificationNumber',
                      label: t('identificationNumber') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'phoneNumber',
                      name: 'phoneNumber',
                      label: t('phone number') as string,
                      placeholder: '1122223333',
                      type: DynamicComponentTypes.FORM_PHONE_NUMBER,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'birthDate',
                      name: 'birthDate',
                      label: t('birthdate') as string,
                      type: DynamicComponentTypes.FORM_DATE,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'school',
                      name: 'school',
                      label: t('school') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('civilStatus') as string}
                      id='civilStatus'
                      value={values.civilStatus}
                      onChange={(e) => setValues({ ...values, civilStatus: e.target.value as PersonCivilStatusTypes })}
                      error={errors && errors['civilStatus'] ? true : false}
                      helperText={errors['civilStatus'] ? (t('field required msj') as string) : ''}
                    >
                      {civilStatusOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('sex') as string}
                      id='sex'
                      name='sex'
                      value={values.sex}
                      onChange={(e) => setValues({ ...values, sex: e.target.value as SexTypes })}
                      error={errors && errors['sex'] ? true : false}
                      helperText={errors['sex'] ? (t('Field required') as string) : ''}
                    >
                      {sexOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={12}>
                  <DynamicFormComponent
                    component={{
                      id: 'motherName',
                      name: 'motherName',
                      label: t('motherName') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={12}>
                  <DynamicFormComponent
                    component={{
                      id: 'fatherName',
                      name: 'fatherName',
                      label: t('fatherName') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={12}>
                  <DynamicFormComponent
                    component={{
                      id: 'postalCode',
                      name: 'postalCode',
                      label: t('postalCode') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
              </Grid>

              <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                  <Button variant='contained' type='submit' disabled={isSubmitting} sx={{ '& svg': { ml: 2 } }}>
                    {capitalize(t('submit') as string)}
                    <Icon fontSize='1.125rem' icon='tabler:check' />
                  </Button>
                </Box>
              </Grid>
            </Form>
          );
        }}
      </Formik>
    </>
  );
};

export default SummaryStep;
