// ** React Imports
import { useEffect, useState } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
// ** Styles Import
import 'react-credit-cards/es/styles-compiled.css';
import { Form, Formik } from 'formik';
import * as Yup from 'yup';
import { useTranslation } from 'react-i18next';
import { capitalize } from '@mui/material';
import { CMSCollections, IAddress, IUsersAddress, IWorker, WorkerStateTypes } from 'src/types/@autogenerated';
import { dynamicCreate, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import * as yup from 'yup';
import { handleError, nameof } from 'src/@core/coreHelper';
import AddressRadioDistance from 'src/views/address/radioDistance';
import { AnyARecord } from 'dns';
import Loader from 'src/@core/components/loader';

const STEP_VALIDATIONS = Yup.object().shape({});

interface props {
  handlePrev: () => void;
  entityData: IWorker;
  addressData: IUsersAddress | null;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}
const JobPreferencesStep = ({ handlePrev, entityData, addressData, onSubmit }: props) => {
  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IWorker>(entityData);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isNextDisabled, setIsNextDisabled] = useState<boolean>(entityData.maxDistance ? false : true);
  const [address, setAddress] = useState<IUsersAddress | null>(addressData ?? null);

  const handleSubmit = async () => {
    try {
      if (!initialValues) return;
      if (!initialValues.maxDistance) throw new Error('you must save your radio and address first');

      // clono para no modificar el original del form
      const itemValues = { ...initialValues };

      itemValues.workerState = WorkerStateTypes.PENDING_AVAILABILITY;
      onSubmit(itemValues, false);
    } catch (e) {
      setSubmitError(e);
    }
  };

  const saveLocation = async (addressForm: IAddress, maxDistanceForm: number) => {
    try {
      if (!address) throw new Error('address missing');

      setIsLoading(true);
      const itemValues = { ...initialValues };

      //primero actualizamos la direccion
      address.address = addressForm;
      await updateEntity(address, CMSCollections.USERS_ADDRESSES);

      //luego el worker
      itemValues.maxDistance = maxDistanceForm;
      onSubmit(itemValues, true); //true: para que guarde la data pero no haga el next() y se quede en el mismo step

      setIsNextDisabled(false);
      setIsLoading(false);
    } catch (e) {
      handleError(e);
    }
  };

  const updateEntity = async (formData: any, entity: string) => {
    let response = null;
    response = await dynamicUpdate({
      params: '/cms/' + entity + '/mine/' + formData.id,
      data: formData,
    });
  };

  if (isLoading) return <Loader />;

  return (
    <>
      <Grid item sm={6} md={6} xs={6}>
        <Grid container spacing={5} sx={{ mb: 4 }}>
          <Grid item xs={12}>
            <AddressRadioDistance
              title={capitalize(t('address and work area'))}
              primaryAddress={address?.address ?? null}
              defaultDistance={initialValues.maxDistance ?? 5}
              onSaveLocation={saveLocation}
            />
          </Grid>
        </Grid>
      </Grid>

      <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
        <Box sx={{ display: 'flex', justifyContent: 'right' }}>
          <Button
            variant='contained'
            type='button'
            onClick={() => handleSubmit()}
            disabled={isNextDisabled}
            sx={{ '& svg': { ml: 2 } }}
          >
            {capitalize(t('next') as string)}
            <Icon fontSize='1.125rem' icon='tabler:arrow-right' />
          </Button>
        </Box>
      </Grid>
    </>
  );
};

export default JobPreferencesStep;
