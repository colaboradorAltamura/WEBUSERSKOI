// ** React Imports
import { useState } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
// ** Custom Components Imports
// ** Styles Import
import { Card, CardContent, CardHeader, capitalize } from '@mui/material';
import 'react-credit-cards/es/styles-compiled.css';
import { useTranslation } from 'react-i18next';
import { IWorker, WorkerStateTypes } from 'src/types/@autogenerated';

import TimeRangePickers from 'src/pages/components/timeRangePickers';
import { IAvailabilityWeek } from 'src/types/workers';

interface props {
  handlePrev: () => void;
  entityData: IWorker;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}

// It will only be called when returning to this step
// Adds an empty time slot from Monday to Friday only if they have been removed
const addEmptyTimeRanges = (availabilityWeek: any) => {
  if (availabilityWeek) {
    const response: IAvailabilityWeek[] = [];
    // Creates [0, 1, 2, 3, 4, 5, 6, 7] array
    const indexes = [...Array(7)].map((_, i) => i);

    indexes.forEach((index: number) => {
      const weekToModify = availabilityWeek.find((day: IAvailabilityWeek) => day.dayOfWeek === index);
      if (weekToModify) response.push(weekToModify);
      else if (index > 0 && index < 6)
        response.push({
          dayOfWeek: index,
          timeRanges: [],
        });
    });

    return response;
  }

  return availabilityWeek;
};

const AvailabilityStep = ({ handlePrev, entityData, onSubmit }: props) => {
  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IWorker>(entityData);
  const [isNextDisabled, setIsNextDisabled] = useState<boolean>(false);

  const [availabilityWeek, setAvailabilityWeek] = useState<IAvailabilityWeek[]>(
    addEmptyTimeRanges(initialValues?.availabilityWeek)
  );

  const handleSubmit = async () => {
    try {
      if (!initialValues) return;
      setIsNextDisabled(true);

      // clono para no modificar el original del form
      const itemValues = { ...initialValues };

      // removes empty days, only stores days with time ranges
      const weekToStore = availabilityWeek.filter((week) => week.timeRanges.length > 0);
      itemValues.availabilityWeek = weekToStore;

      itemValues.workerState = WorkerStateTypes.PENDING_DOCS;
      onSubmit(itemValues, false);
    } catch (e) {
      setSubmitError(e);
    }
  };

  return (
    <>
      <Card>
        <CardHeader title={capitalize(t('availability'))} />
        <CardContent>
          <TimeRangePickers
            workerAvailabilityWeek={availabilityWeek}
            onAvailabilityWeekChange={setAvailabilityWeek}
            loadDefaultWeek={true}
          />
        </CardContent>
      </Card>

      <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
        <Box sx={{ display: 'flex', justifyContent: 'right' }}>
          <Button
            variant='contained'
            type='submit'
            onClick={() => handleSubmit()}
            disabled={isNextDisabled}
            sx={{ '& svg': { ml: 2 } }}
          >
            {capitalize(t('next') as string)}
            <Icon fontSize='1.125rem' icon='tabler:arrow-right' />
          </Button>
        </Box>
      </Grid>
    </>
  );
};

export default AvailabilityStep;
