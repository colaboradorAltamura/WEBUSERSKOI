// ** React Imports
import { useState, ChangeEvent, useEffect } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import InputAdornment from '@mui/material/InputAdornment';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
import { Form, Formik } from 'formik';
import * as Yup from 'yup';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { DynamicComponentTypes, IForm } from 'src/types/dynamics';
import { useTranslation } from 'react-i18next';
import { capitalize } from '@mui/material';
import { IWorker, WorkerStateTypes } from 'src/types/@autogenerated';
import Loader from 'src/@core/components/loader';
import * as yup from 'yup';
import { handleError, nameof } from 'src/@core/coreHelper';
import { connectStorageEmulator } from 'firebase/storage';
import DialogAction from 'src/@core/components/custom-dialog-action';

const STEP_VALIDATIONS = Yup.object().shape({});

interface props {
  handlePrev: () => void;
  entityData: IWorker;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}
const DocumentsStep = ({ handlePrev, entityData, onSubmit }: props) => {
  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IWorker>(entityData);
  const [docsCompletedDialogShow, setDocsCompletedDialogShow] = useState<boolean>(false);

  // fetch entity data
  useEffect(() => {
    if (entityData.workerState == WorkerStateTypes.INFORMATION_COMPLETED) setDocsCompletedDialogShow(true);
  }, []);

  const handleSubmit = async (values: any, actions: any) => {
    try {
      if (
        !values[nameof<IWorker>('curriculum')] ||
        !values[nameof<IWorker>('identification')] ||
        !values[nameof<IWorker>('taxInscription')] ||
        !values[nameof<IWorker>('civilLiabilityInsurancePolicy')] ||
        !values[nameof<IWorker>('criminalRecord')]
      )
        throw new Error(t('files missing') as string);

      setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];

        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });

      //actuliza el state del worker en el form
      itemValues[nameof<IWorker>('workerState')] = WorkerStateTypes.INFORMATION_COMPLETED;

      setInitialValues(itemValues);
      onSubmit(itemValues, true);

      setDocsCompletedDialogShow(true);

      actions.setSubmitting(false);
    } catch (e) {
      handleError(e);
      setSubmitError(e);
      actions.setSubmitting(false);
    }
  };
  const docsCompletedDialogClose = () => {
    return setDocsCompletedDialogShow(false);
  };

  return (
    <>
      <DialogAction
        show={docsCompletedDialogShow}
        title='info completed worker'
        text='info completed worker details'
        textButtonSubmit='ok'
        colorButtonSubmit='primary'
        onClickSubmit={() => docsCompletedDialogClose()}
        onClickClose={() => docsCompletedDialogClose()}
        showOnClickClose={false}
      />
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={STEP_VALIDATIONS}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, isSubmitting, setValues }) => (
          <Form id={'stepDocsWorkerForm'} autoComplete='off'>
            <Grid item sm={6} md={6} xs={6}>
              <Grid container spacing={5} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'curriculum',
                      name: 'curriculum',
                      label: t('curriculum worker') as string,
                      type: DynamicComponentTypes.FILE_UPLOADER,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'identification',
                      name: 'identification',
                      label: t('identificationType worker') as string,
                      type: DynamicComponentTypes.FILE_UPLOADER,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'taxInscription',
                      name: 'taxInscription',
                      label: t('taxInscription worker') as string,
                      type: DynamicComponentTypes.FILE_UPLOADER,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'civilLiabilityInsurancePolicy',
                      name: 'civilLiabilityInsurancePolicy',
                      label: t('civilLiabilityInsurancePolicy worker') as string,
                      type: DynamicComponentTypes.FILE_UPLOADER,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'criminalRecord',
                      name: 'criminalRecord',
                      label: t('criminalRecord worker') as string,
                      type: DynamicComponentTypes.FILE_UPLOADER,
                      dimensions: { xs: 12, sm: 12 },
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
              </Grid>
            </Grid>

            <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
              <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                <Button variant='contained' type='submit' disabled={isSubmitting} sx={{ '& svg': { ml: 2 } }}>
                  {capitalize(t('finishing form') as string)}
                  <Icon fontSize='1.125rem' icon='tabler:check' />
                </Button>
              </Box>
            </Grid>
          </Form>
        )}
      </Formik>
    </>
  );
};

export default DocumentsStep;
