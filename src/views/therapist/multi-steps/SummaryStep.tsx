// ** React Imports
import { useState, ChangeEvent, useEffect } from 'react';

// ** MUI Components
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Avatar from '@mui/material/Avatar';

// ** Icon Imports
import Icon from 'src/@core/components/icon';
// ** Custom Components Imports
import CustomTextField from 'src/@core/components/mui/text-field';
// ** Styles Import
import 'react-credit-cards/es/styles-compiled.css';
import { Form, Formik } from 'formik';
import * as Yup from 'yup';
import { useApplicantsOnboarding } from 'src/hooks/useApplicantsOnboarding';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { DynamicComponentTypes } from 'src/types/dynamics';
import { useTranslation } from 'react-i18next';
import {
  Badge,
  Card,
  CardContent,
  Checkbox,
  Drawer,
  FormControlLabel,
  IconButton,
  MenuItem,
  Typography,
  capitalize,
} from '@mui/material';
import {
  CMSCollections,
  GenderTypes,
  IAttachment,
  IWorker,
  PersonCivilStatusTypes,
  PersonNationalities,
  SexTypes,
  WorkerProfessionTypes,
  WorkerStateTypes,
} from 'src/types/@autogenerated';
import Loader from 'src/@core/components/loader';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import * as yup from 'yup';
import { handleError, nameof } from 'src/@core/coreHelper';
import { useAuth } from 'src/hooks/useAuth';
import { styled } from '@mui/material/styles';
import DropzoneWrapper from 'src/@core/styles/libs/react-dropzone';
import FileUploaderSingle from 'src/views/forms/form-elements/file-uploader/FileUploaderSingle';
import { BoxProps } from '@mui/material/Box';
import { createAttachment } from 'src/services/attachmentsServices';

import { userUpdateProfile, authRef } from 'src/configs/firebase';

const STEP_VALIDATIONS = Yup.object().shape({
  firstName: yup.string().required(),
  lastName: yup.string().required(),
  email: yup.string().email().required(),
  profession: yup.string().required(),
  gender: yup.string().required(),
  identificationType: yup.string().required(),
  identificationNumber: yup.string().min(5).required(),
  phoneNumber: yup.string().min(10).required(),
  birthDate: yup.date().required().max(new Date(), 'Select a valid date'),
  nationality: yup.string().required(),
  civilStatus: yup.string().required(),
});
interface props {
  entityData: IWorker;
  onSubmit: (formData: any, isReload: boolean) => Promise<any>;
}

const UploadDrawerComponent = ({
  // attachment,
  title,
  onClose,
  isOpen,
  onSave,
  allowIsPublicSwitch,
  isPublic,
  onChangeIsPublic,
}: {
  // attachment: IAttachment | null;
  title: string;
  onClose: () => void;
  isOpen: boolean;
  onSave: (files: File[]) => void;
  allowIsPublicSwitch?: boolean;
  isPublic: boolean;
  onChangeIsPublic?: (checked: boolean) => void;
}) => {
  const { t } = useTranslation();

  const [isPublicState, setIsPublicState] = useState<boolean>(isPublic);
  const [isOpenState, setIsOpenState] = useState<boolean>(isOpen);

  useEffect(() => {
    setIsPublicState(isPublic);
    setIsOpenState(isOpen);
  }, [isPublic, isOpen]);

  const Header = styled(Box)<BoxProps>(({ theme }) => ({
    display: 'flex',
    alignItems: 'center',
    padding: theme.spacing(6),
    justifyContent: 'space-between',
  }));

  return (
    <Drawer
      open={isOpenState}
      anchor='right'
      variant='temporary'
      onClose={onClose}
      ModalProps={{ keepMounted: true }}
      sx={{ '& .MuiDrawer-paper': { width: { xs: 300, sm: 400 } } }}
    >
      <Header>
        <Typography variant='h5'>{title}</Typography>
        <IconButton
          size='small'
          onClick={onClose}
          sx={{
            p: '0.438rem',
            borderRadius: 1,
            color: 'text.primary',
            backgroundColor: 'action.selected',
            '&:hover': {
              backgroundColor: (theme) =>
                `rgba(${theme.palette.customColors ? theme.palette.customColors.main : ''}, 0.16)`,
            },
          }}
        >
          <Icon icon='tabler:x' fontSize='1.125rem' />
        </IconButton>
      </Header>
      <Box sx={{ p: (theme) => theme.spacing(0, 6, 6) }}>
        <Card>
          <CardContent>
            <DropzoneWrapper>
              <Grid container spacing={6} className='match-height'>
                <Grid item xs={12}>
                  <FileUploaderSingle
                    onSave={(files: File[]) => {
                      onSave(files);
                    }}
                  />
                </Grid>
              </Grid>
            </DropzoneWrapper>

            {allowIsPublicSwitch && (
              <FormControlLabel
                label={t('public access')}
                control={
                  <Checkbox
                    checked={isPublicState}
                    onChange={(event: any) => {
                      if (onChangeIsPublic) onChangeIsPublic(event.target.checked);
                    }}
                  />
                }
              />
            )}
          </CardContent>
        </Card>
      </Box>
    </Drawer>
  );
};

const SummaryStep = ({ entityData, onSubmit }: props) => {
  const auth = useAuth();

  //**  hooks
  const { t } = useTranslation();

  // ** State
  const [isOpenUploadProfileImage, setIsOpenUploadProfileImage] = useState<boolean>(false);
  const [isLoadingUploadingFiles, setIsLoadingUploadingFiles] = useState<boolean>(false);

  const [avatarAttachment, setAvatarAttachment] = useState<IAttachment | null>(null);
  const [avatarUrlPreview, setAvatarUrlPreview] = useState<string | null>(null);

  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [submitError, setSubmitError] = useState<any>(null);
  const [initialValues, setInitialValues] = useState<IWorker>(entityData);
  const [professionOptions, setProfessionOptions] = useState<any[]>([]);
  const [genderOptions, setGenderOptions] = useState<any[]>([]);
  const [sexOptions, setSexOptions] = useState<any[]>([]);
  const [identificationTypeOptions, setIdentificationTypeOptions] = useState<any[]>([]);
  const [nationalityOptions, setNationalityOptions] = useState<any[]>([]);
  const [civilStatusOptions, setCivilStatusOptions] = useState<any[]>([]);
  const [isPrevDisabled, setIsPrevDisabled] = useState<boolean>(false);

  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  const getOptions = async (schema: string) => {
    try {
      //check this
      const optionsData: any = await dynamicGet({ params: '/cms/public/' + DEFAULT_ORGANIZATION_ID + '/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };

  const toggleIsOpenUploadProfileImage = () => setIsOpenUploadProfileImage(!isOpenUploadProfileImage);

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setProfessionOptions(await getOptions(CMSCollections.WORKER_PROFESSION_TYPES));
        setGenderOptions(await getOptions(CMSCollections.GENDER_TYPES));
        setSexOptions(await getOptions(CMSCollections.SEX_TYPES));
        setIdentificationTypeOptions(await getOptions(CMSCollections.PERSON_IDENTIFICATION_TYPES));
        setCivilStatusOptions(await getOptions(CMSCollections.PERSON_CIVIL_STATUS_TYPES));
        setNationalityOptions(await getOptions(CMSCollections.PERSON_NATIONALITIES));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);

  useEffect(() => {
    if (avatarAttachment && avatarAttachment.downloadURL) {
      setAvatarUrlPreview(avatarAttachment.downloadURL);
    } else if (auth.user?.avatar) setAvatarUrlPreview(auth.user?.avatar);
  }, [auth.user, avatarAttachment]);

  const handleSubmit = async (values: any, actions: any) => {
    try {
      setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];

        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });
      //actuliza el state del worker en el form
      itemValues[nameof<IWorker>('workerState')] = WorkerStateTypes.PENDING_EXPERIENCE;

      if (avatarAttachment && avatarAttachment.downloadURL) {
        itemValues[nameof<IWorker>('avatarUrl')] = avatarAttachment.downloadURL;
      }

      onSubmit(itemValues, false);

      actions.setSubmitting(false);
    } catch (e) {
      setSubmitError(e);
      actions.setSubmitting(false);
    }
  };

  const handleOnSaveUploadedFiles = async (files: File[]) => {
    try {
      setIsLoadingUploadingFiles(true);

      toggleIsOpenUploadProfileImage();

      if (!authRef.currentUser) throw new Error('Missing authRef.currentUser');

      const attachment = await createAttachment({
        attachment: files[0],
        isPublic: true,
      });

      if (!attachment.downloadURL) throw new Error('Missing download url from attachment');

      await userUpdateProfile(authRef.currentUser, {
        photoURL: attachment.downloadURL,
      });

      setAvatarAttachment(attachment);

      setIsLoadingUploadingFiles(false);
    } catch (e) {
      setIsLoadingUploadingFiles(false);
      handleError(e);
    }
  };

  return (
    <>
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={STEP_VALIDATIONS}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, isSubmitting, setValues }) => {
          return (
            <Form id={'stepSummaryWorkerForm'} autoComplete='off'>
              <Grid container spacing={5} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={12}>
                  <div
                    style={{ display: 'flex', justifyContent: 'center', color: 'green', marginBottom: 10 }}
                    onClick={() => {
                      toggleIsOpenUploadProfileImage();
                    }}
                  >
                    {isLoadingUploadingFiles && <Loader />}
                    {!isLoadingUploadingFiles && (
                      <Badge
                        overlap='circular'
                        sx={{ ml: 2, cursor: 'pointer' }}
                        anchorOrigin={{
                          vertical: 'bottom',
                          horizontal: 'right',
                        }}
                      >
                        <Avatar
                          alt={auth.user?.displayName}
                          src={avatarUrlPreview ? avatarUrlPreview : '/images/avatars/default-avatar.png'}
                          sx={{ width: 65, height: 65 }}
                        />
                      </Badge>
                    )}
                  </div>

                  <div style={{ display: 'flex', justifyContent: 'center', color: 'green', marginLeft: 10 }}>
                    <Button
                      onClick={() => {
                        toggleIsOpenUploadProfileImage();
                      }}
                      variant='contained'
                      color='secondary'
                      size='small'
                    >
                      {t('upload new profile photo')}
                    </Button>
                  </div>
                </Grid>
                <Grid item xs={12} sm={12}>
                  <DynamicFormComponent
                    component={{
                      id: 'email',
                      name: 'email',
                      label: t('email') as string,
                      type: DynamicComponentTypes.FORM_EMAIL,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'firstName',
                      name: 'firstName',
                      label: t('first name') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'lastName',
                      name: 'lastName',
                      label: t('last name') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('gender') as string}
                      id='gender'
                      name='gender'
                      value={values.gender}
                      onChange={(e) => setValues({ ...values, gender: e.target.value as GenderTypes })}
                      error={errors && errors['gender'] ? true : false}
                      helperText={errors['gender'] ? (t('Field required') as string) : ''}
                    >
                      {genderOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('sex') as string}
                      id='sex'
                      name='sex'
                      value={values.sex}
                      onChange={(e) => setValues({ ...values, sex: e.target.value as SexTypes })}
                      error={errors && errors['sex'] ? true : false}
                      helperText={errors['sex'] ? (t('Field required') as string) : ''}
                    >
                      {sexOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={2}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('identificationType') as string}
                      id='identificationType'
                      value={values.identificationType}
                      onChange={(e) => setValues({ ...values, identificationType: e.target.value })}
                      error={errors && errors['identificationType'] ? true : false}
                      helperText={errors['identificationType'] ? (t('field required msj') as string) : ''}
                    >
                      {identificationTypeOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={4}>
                  <DynamicFormComponent
                    component={{
                      id: 'identificationNumber',
                      name: 'identificationNumber',
                      label: t('identificationNumber') as string,
                      type: DynamicComponentTypes.FORM_TEXT,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'birthDate',
                      name: 'birthDate',
                      label: t('birthdate') as string,
                      type: DynamicComponentTypes.FORM_DATE,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={isCreating}
                  />
                </Grid>

                <Grid item xs={12} sm={6}>
                  <DynamicFormComponent
                    component={{
                      id: 'phoneNumber',
                      name: 'phoneNumber',
                      label: t('phone number') as string,
                      placeholder: '1122223333',
                      type: DynamicComponentTypes.FORM_PHONE_NUMBER,
                      dimensions: { xs: 12, sm: 12 },
                      errorMsg: t('field required msj') as string,
                    }}
                    isCreating={true}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('profession') as string}
                      id='profession'
                      value={values.profession}
                      onChange={(e) => setValues({ ...values, profession: e.target.value as WorkerProfessionTypes })}
                      error={errors && errors['profession'] ? true : false}
                      helperText={errors['profession'] ? (t('field required msj') as string) : ''}
                    >
                      {professionOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>

                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('civilStatus') as string}
                      id='civilStatus'
                      value={values.civilStatus}
                      onChange={(e) => setValues({ ...values, civilStatus: e.target.value as PersonCivilStatusTypes })}
                      error={errors && errors['civilStatus'] ? true : false}
                      helperText={errors['civilStatus'] ? (t('field required msj') as string) : ''}
                    >
                      {civilStatusOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
                <Grid item xs={12} sm={6}>
                  {loadingOptions ? (
                    <Loader />
                  ) : (
                    <CustomTextField
                      select
                      fullWidth
                      label={t('nationality') as string}
                      id='nationality'
                      value={values.nationality}
                      onChange={(e) => setValues({ ...values, nationality: e.target.value as PersonNationalities })}
                      error={errors && errors['nationality'] ? true : false}
                      helperText={errors['nationality'] ? (t('field required msj') as string) : ''}
                    >
                      {nationalityOptions.map((item: any, index: any) => {
                        return (
                          <MenuItem key={index} value={item.code}>
                            {capitalize(t(item.name))}
                          </MenuItem>
                        );
                      })}
                    </CustomTextField>
                  )}
                </Grid>
              </Grid>

              <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                  <Button variant='contained' type='submit' disabled={isSubmitting} sx={{ '& svg': { ml: 2 } }}>
                    {capitalize(t('next') as string)}
                    <Icon fontSize='1.125rem' icon='tabler:arrow-right' />
                  </Button>
                </Box>
              </Grid>
            </Form>
          );
        }}
      </Formik>

      <UploadDrawerComponent
        title={t('upload new profile photo')}
        onClose={() => {
          toggleIsOpenUploadProfileImage();
        }}
        onSave={handleOnSaveUploadedFiles}
        allowIsPublicSwitch={false}
        isPublic={true}
        isOpen={isOpenUploadProfileImage}
      />
    </>
  );
};

export default SummaryStep;
