// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

// ** Custom Components Imports
import { Alert, AlertTitle, Button, LinearProgress, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { handleError, hasRole } from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { IApplicant } from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import TextInfo from 'src/@core/components/custom-text-info';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { IForm } from 'src/types/dynamics';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';

interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantDataArg: IApplicant;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  onUpdateApplicant: () => Promise<any>;
}

const RequiredServiceTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantData, setApplicantData] = useState<IApplicant>(applicantDataArg);
  const [applicantSchemaFields, setApplicantSchemaFields] = useState<IEntitySchemaField[]>(applicantSchemaFieldsArg);
  const [address, setAddress] = useState<string>('');
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);

  // ** Service
  const [editServiceSidebarOpen, setEditServiceSidebarOpen] = useState<boolean>(false);
  const [editApplicantInfoOpen, setEditApplicantInfoOpen] = useState<boolean>(false);
  const toggleEditServiceDrawer = () => setEditServiceSidebarOpen(!editServiceSidebarOpen);

  // ** Therapist
  const [editTherapistSidebarOpen, setEditTherapistSidebarOpen] = useState<boolean>(false);
  const [editRelativeInfoOpen, setEditRelativeInfoOpen] = useState<boolean>(false);
  const toggleEditTherapistDrawer = () => setEditTherapistSidebarOpen(!editTherapistSidebarOpen);

  const handleOnEntityEdit_Service = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = ['schoolName', 'schoolContact', 'serviceDispositive'];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditServiceSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEntityEdit_Therapist = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        'therapistType',
        'therapistAmount',
        'therapistGender',
        'therapistSex',
        'therapistProfile',
        'therapistDays',
        'therapistWeeklyHours',
        'therapistMonthlyHours',
        'therapistSchedule',
      ];
      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditTherapistSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEditSubmit_Service = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditServiceSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const handleOnEditSubmit_Therapist = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditTherapistSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  useEffect(() => {
    setAddress(applicantData.applicantAddress.addressString ?? '');
  }, [address]);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('required service'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Service();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={0}>
              <Grid item xs={12} md={12}>
                <TextInfo title={'address'} value={address}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'dispositive'} value={applicantData.serviceDispositive}></TextInfo>
                <TextInfo title={'schoolName'} value={applicantData.schoolName}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'schoolContact'} value={applicantData.schoolContact}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        {!!editServiceSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Service}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editServiceSidebarOpen}
            toggle={toggleEditServiceDrawer}
            onSubmitDone={() => {
              toggleEditServiceDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('therapist profile'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Therapist();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={0}>
              <Grid item xs={12} md={6}>
                <TextInfo title={'therapist'} value={applicantData.therapistType}></TextInfo>
                <TextInfo title={'gender'} value={applicantData.therapistGender}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'therapist amoung'} value={applicantData.therapistAmount}></TextInfo>
                <TextInfo title={'sex'} value={applicantData.therapistSex}></TextInfo>
              </Grid>
              <Grid item xs={12} md={12}>
                <TextInfo title={'profile'} value={applicantData.therapistProfile}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'days'} value={applicantData.therapistDays}></TextInfo>
                <TextInfo title={'weekly hours'} value={applicantData.therapistWeeklyHours}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'schedule'} value={applicantData.therapistSchedule}></TextInfo>
                <TextInfo title={'monthly hours'} value={applicantData.therapistMonthlyHours}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        {!!editTherapistSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Therapist}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editTherapistSidebarOpen}
            toggle={toggleEditTherapistDrawer}
            onSubmitDone={() => {
              toggleEditTherapistDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default RequiredServiceTab;
