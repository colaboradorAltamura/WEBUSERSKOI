import { useEffect, useState } from 'react';
// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';

// ** Custom Components Imports
import { Alert, AlertTitle, Button, LinearProgress, capitalize } from '@mui/material';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { ApplicantUrgencyLeves, IApplicant } from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import TextInfo from 'src/@core/components/custom-text-info';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { IForm } from 'src/types/dynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { handleError, hasRole, nameof } from 'src/@core/coreHelper';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';

interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantDataArg: IApplicant;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  onUpdateApplicant: () => Promise<any>;
}

const getColorLabelUrgerncy = (state?: string) => {
  if (!state) return 'info';
  if (state === ApplicantUrgencyLeves.EXTREMELY_URGENT) return 'error';
  if (state === ApplicantUrgencyLeves.URGENT) return 'warning';

  //return 'info';
};

const DiagnosticTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantData, setApplicantData] = useState<IApplicant>(applicantDataArg);
  const [applicantSchemaFields, setApplicantSchemaFields] = useState<IEntitySchemaField[]>(applicantSchemaFieldsArg);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);

  // ** diagnostic
  const [editDiagnosticSidebarOpen, setEditDiagnosticSidebarOpen] = useState<boolean>(false);
  const [editDiagnosticOpen, setEditDiagnosticOpen] = useState<boolean>(false);
  const toggleEditDiagnosticDrawer = () => setEditDiagnosticSidebarOpen(!editDiagnosticSidebarOpen);

  // ** professional team
  const [editProfessionalTeamSidebarOpen, setEditProfessionalTeamSidebarOpen] = useState<boolean>(false);
  const [editProfessionalTeamOpen, setEditProfessionalTeamOpen] = useState<boolean>(false);
  const toggleEditProfessionalTeamDrawer = () => setEditProfessionalTeamSidebarOpen(!editProfessionalTeamSidebarOpen);

  const handleOnEntityEdit_Diagnostic = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IApplicant>('diagnostic'),
        nameof<IApplicant>('specialNeeds'),
        nameof<IApplicant>('urgencyLevel'),
        nameof<IApplicant>('wasAssistedBefore'),
        nameof<IApplicant>('suicidalThoughts'),
        nameof<IApplicant>('aggressiveBehavior'),
        nameof<IApplicant>('cashManagement'),
        nameof<IApplicant>('comments'),
        nameof<IApplicant>('patientStory'),
        nameof<IApplicant>('pathologiesTypes'),
      ];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditDiagnosticSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEntityEdit_ProfessionalTeam = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = ['professionalStaffFullname', 'professionalStaffPhoneNumber'];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditProfessionalTeamSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEditSubmit_Diagnostic = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditDiagnosticSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const handleOnEditSubmit_ProfessionalTeam = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditProfessionalTeamSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('diagnostic'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Diagnostic();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={0}>
              <Grid item xs={12} md={12}>
                <TextInfo title={'diagnostic'} value={applicantData.diagnostic}></TextInfo>
                <TextInfo title={'details'} value={applicantData.specialNeeds}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo
                  title={'urgency'}
                  value={applicantData.urgencyLevel}
                  color={getColorLabelUrgerncy(applicantData.urgencyLevel)}
                ></TextInfo>
                <TextInfo title={'was assisted before'} value={applicantData.wasAssistedBefore}></TextInfo>
                <TextInfo title={'suicidal thoughts'} value={applicantData.suicidalThoughts}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'comments'} value={applicantData.comments}></TextInfo>
                <TextInfo title={'aggressive behavior'} value={applicantData.aggressiveBehavior}></TextInfo>
                <TextInfo title={'cash management'} value={applicantData.cashManagement}></TextInfo>
              </Grid>

              <Grid item xs={12} md={12}>
                <TextInfo title={'patient story'} value={applicantData.patientStory}></TextInfo>
                <TextInfo title={'pathologies types'} value={applicantData.pathologiesTypes}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        {!!editDiagnosticSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Diagnostic}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editDiagnosticSidebarOpen}
            toggle={toggleEditDiagnosticDrawer}
            onSubmitDone={() => {
              toggleEditDiagnosticDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('professional team'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_ProfessionalTeam();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={0}>
              <Grid item xs={12} md={6}>
                <TextInfo title={'fullname'} value={applicantData.professionalStaffFullname}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'phone number'} value={applicantData.professionalStaffPhoneNumber}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        {!!editProfessionalTeamSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_ProfessionalTeam}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editProfessionalTeamSidebarOpen}
            toggle={toggleEditProfessionalTeamDrawer}
            onSubmitDone={() => {
              toggleEditProfessionalTeamDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default DiagnosticTab;
