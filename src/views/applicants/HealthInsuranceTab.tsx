// ** MUI Imports
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';
import { Button, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { useDynamics } from 'src/hooks/useDynamics';
import { IApplicant } from 'src/types/@autogenerated';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { handleError, hasRole } from 'src/@core/coreHelper';
import Loader from 'src/@core/components/loader';
import { IForm } from 'src/types/dynamics';
import TextInfo from 'src/@core/components/custom-text-info';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
// import EditPatientDiagnosticDrawer from './EditPatientDiagnosticDrawer';

interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  applicantDataArg: IApplicant;
  onUpdateApplicant: () => Promise<any>;
}

const HealthInsuranceTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantSchemaFields, setApplicantSchemaFields] = useState<IEntitySchemaField[]>(applicantSchemaFieldsArg);
  const [applicantData, setApplicantData] = useState<IApplicant | null>(null);
  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [displayHealthInsurance, setDisplayHealthInsurance] = useState<string>();

  const toggleEditDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  const handleOnEntityEdit = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        'amparoIndicator',
        'cudCertificate',
        'insuranceNumber',
        'insurance',
        'paymentMode',
        'paymentMethod',
      ];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  const handleOnEditSubmit = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  useEffect(() => {
    setApplicantData(applicantDataArg);

    setDisplayHealthInsurance('');
    if (applicantDataArg.paymentMethod === 'private-insurance')
      //maybe create a enunm for these values
      setDisplayHealthInsurance('none');
  }, [applicantDataArg]);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  if (loadingData || !applicantData) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={
              applicantData.paymentMethod === 'insurance'
                ? capitalize(t('insurance'))
                : capitalize(t(applicantData.paymentMethod))
            }
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <TextInfo
                  visible={displayHealthInsurance}
                  title={'health insurance'}
                  value={applicantData.insurance}
                ></TextInfo>
                <TextInfo
                  visible={displayHealthInsurance}
                  title={'insuranceNumber'}
                  value={applicantData.insuranceNumber}
                ></TextInfo>
                <TextInfo title={'amparo'} value={applicantData.amparoIndicator}></TextInfo>
                <TextInfo title={'cudCertificate'} value={applicantData.cudCertificate}></TextInfo>
                <TextInfo title={'paymentMode'} value={applicantData.paymentMode}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      </Grid>

      {!!editSidebarOpen && (
        <DynamicFormSidebar
          isCreating={false}
          onSubmit={handleOnEditSubmit}
          title={'Edit ' + applicantSchema?.name}
          formId={'Edit_' + applicantSchema?.name}
          initialValues={applicantData}
          preloadForm={editEntityForm}
          open={editSidebarOpen}
          toggle={toggleEditDrawer}
          onSubmitDone={() => {
            toggleEditDrawer();

            return Promise.resolve();
          }}
        />
      )}
    </Grid>
  );
};

export default HealthInsuranceTab;
