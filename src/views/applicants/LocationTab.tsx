// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

// ** Custom Components Imports
import { Alert, AlertTitle, Button, Divider, LinearProgress, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { handleError, hasRole } from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { IApplicant } from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import Loader from 'src/@core/components/loader';
import { dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { Collections } from 'src/types/collectionsTypes';

const SCHEMA_NAME = Collections.APPLICANTS;

interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantDataArg: IApplicant;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  onUpdateApplicant: () => Promise<any>;
}

const LocationTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const win: any = window;

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantData, setApplicantData] = useState<IApplicant>(applicantDataArg);
  const [applicantSchemaFields, setApplicantSchemaFields] = useState<IEntitySchemaField[]>(applicantSchemaFieldsArg);
  const [map, setMap] = useState<any>(null);
  const [addressPlace, setAddressPlace] = useState<any>(applicantDataArg.applicantAddress);
  const [loading, setLoading] = useState<boolean>(false);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  const onPlaceSelected = (place: any) => {
    setAddressPlace(place);
  };

  const saveLocation = async () => {
    try {
      setLoading(true);

      const itemValues = { ...applicantData };

      itemValues.applicantAddress = addressPlace;

      await updateApplicant(itemValues);
      onUpdateApplicant();

      setLoading(false);
    } catch (e) {
      setLoading(false);
      handleError(e);
    }
  };

  const updateApplicant = async (formData: any) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${SCHEMA_NAME}/` + docId,
      data: formData,
    });
  };

  useEffect(() => {
    if (!map || !addressPlace) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    const marker = new win.google.maps.Marker({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      id: 1, //to do check on this
      map: map,
      icon: image,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);
    map.setZoom(Math.min(map.getZoom(), 12));
  }, [addressPlace, map]);

  useEffect(() => {
    if (!win.google) return;

    const mapAux = new win.google.maps.Map(document.getElementById('map-canvas'), {
      center: {
        lat: 12.9715987,
        lng: 77.59456269999998,
      },
      zoom: 12,
    });

    setMap(mapAux);
  }, [win.google]);

  if (loading) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('address'))}
            action={
              isPermittedByRol() && (
                <Button
                  variant='contained'
                  onClick={() => {
                    saveLocation();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('save'))}
                </Button>
              )
            }
          />
          <CardContent>
            <Grid container spacing={0}>
              <Grid item xs={12} md={12}>
                <form onSubmit={(e) => e.preventDefault()}>
                  <Grid container spacing={4}>
                    <Grid item xs={12} sm={12}>
                      <FormLocationField
                        label={''}
                        value={addressPlace ? addressPlace.addressString : ''}
                        placeholder={'Av libertador 1dddd23'}
                        onPlaceSelected={(place: any) => {
                          onPlaceSelected(place);
                        }}
                      />
                    </Grid>
                  </Grid>
                </form>
              </Grid>
              <Grid item xs={12} sx={{ marginTop: 10 }}>
                <Card>
                  <Divider sx={{ m: '0 !important' }} />
                  <div id='map-canvas' style={{ height: 300 }} />
                </Card>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default LocationTab;
