// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';
// ** Icon Imports

// ** Types

// ** Demo Component Imports

// ** Custom Components Imports
import { Button, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import TextInfo from 'src/@core/components/custom-text-info';
import { calculateAge, handleError, hasRole, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IApplicant } from 'src/types/@autogenerated';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';

interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantDataArg: IApplicant;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  onUpdateApplicant: () => Promise<any>;
}

const SummaryTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantSchemaFields, setApplicantSchemaFields] = useState<IEntitySchemaField[]>(applicantSchemaFieldsArg);
  const [applicantData, setApplicantData] = useState<IApplicant>(applicantDataArg);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [address, setAddress] = useState<string>('');

  // ** applicants
  const [editApplicantSidebarOpen, setEditApplicantSidebarOpen] = useState<boolean>(false);
  const [editApplicantInfoOpen, setEditApplicantInfoOpen] = useState<boolean>(false);
  const toggleEditApplicantDrawer = () => setEditApplicantSidebarOpen(!editApplicantSidebarOpen);

  // ** relatives
  const [editRelativeSidebarOpen, setEditRelativeSidebarOpen] = useState<boolean>(false);
  const [editRelativeInfoOpen, setEditRelativeInfoOpen] = useState<boolean>(false);
  const toggleEditRelativeDrawer = () => setEditRelativeSidebarOpen(!editRelativeSidebarOpen);

  // **

  const handleOnEntityEdit_Applicant = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IApplicant>('applicantFullname'),
        nameof<IApplicant>('applicantIdentificationNumber'),
        nameof<IApplicant>('applicantIdentificationType'),
        nameof<IApplicant>('applicantPhoneNumber'),
        nameof<IApplicant>('applicantEmail'),
        nameof<IApplicant>('applicantBirthdate'),
        nameof<IApplicant>('applicantGender'),
        nameof<IApplicant>('applicantsAgeRange'),
      ];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditApplicantSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEntityEdit_Relative = () => {
    try {
      if (!applicantSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IApplicant>('relativeFullname'),
        nameof<IApplicant>('relativeIdentificationNumber'),
        nameof<IApplicant>('relativeIdentificationType'),
        nameof<IApplicant>('relativePhoneNumber'),
        nameof<IApplicant>('relativeEmail'),
        nameof<IApplicant>('relationWithApplicant'),
      ];

      const toShowFields = applicantSchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(applicantSchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditRelativeSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const handleOnEditSubmit_Applicant = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditApplicantSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const handleOnEditSubmit_Relative = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        applicantSchema,
        applicantSchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditRelativeSidebarOpen(false);

      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  useEffect(() => {
    console.log('datos del aplicante', applicantData);
    setAddress(applicantData.applicantAddress.addressString ?? '');
  }, [address]);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('general information'))}
            action={
              isPermittedByRol() && (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Applicant();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              )
            }
          />
          <CardContent>
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <TextInfo title={'gender'} value={applicantData.applicantGender}></TextInfo>
                <TextInfo title={'identificationType'} value={applicantData.applicantIdentificationType}></TextInfo>
                <TextInfo title={'identificationNumber'} value={applicantData.applicantIdentificationNumber}></TextInfo>
                <TextInfo
                  title={'birthdate'}
                  value={parseDateToShortString(applicantData.applicantBirthdate)}
                ></TextInfo>
                <TextInfo title={'age'} value={calculateAge(applicantData.applicantBirthdate)}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'address'} value={address}></TextInfo>
                <TextInfo title={'applicants age range'} value={applicantData.applicantsAgeRange}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {!!editApplicantSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Applicant}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editApplicantSidebarOpen}
            toggle={toggleEditApplicantDrawer}
            onSubmitDone={() => {
              toggleEditApplicantDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>

      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('relative information'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Relative();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <TextInfo title={'fullname'} value={applicantData.relativeFullname}></TextInfo>
                <TextInfo title={'identificationType'} value={applicantData.relativeIdentificationType}></TextInfo>
                <TextInfo title={'identificationNumber'} value={applicantData.relativeIdentificationNumber}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'relation'} value={applicantData.relationWithApplicant}></TextInfo>
                <TextInfo title={'phone number'} value={applicantData.relativePhoneNumber}></TextInfo>
                <TextInfo title={'email'} value={applicantData.relativeEmail}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
        {!!editRelativeSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Relative}
            title={'Edit ' + applicantSchema?.name}
            formId={'Edit_' + applicantSchema?.name}
            initialValues={applicantData}
            preloadForm={editEntityForm}
            open={editRelativeSidebarOpen}
            toggle={toggleEditRelativeDrawer}
            onSubmitDone={() => {
              toggleEditRelativeDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default SummaryTab;
