// ** MUI Imports
import { Button, capitalize } from '@mui/material';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import TextInfo from 'src/@core/components/custom-text-info';
import Loader from 'src/@core/components/loader';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { BusinessTypes, IApplicantQuotation, PaymentModes } from 'src/types/@autogenerated';
import { AppRols } from 'src/types/appRols';
import { Collections } from 'src/types/collectionsTypes';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { createEntityDataBySchema, updateEntityDataBySchema } from '../components/dynamics/helpers';
// ** Icon Imports
import { useRouter } from 'next/router';
import OptionsMenu from 'src/@core/components/option-menu';
import {
  getSourceEntityData,
  handleError,
  hasRole,
  nameof,
  parseDateToShortString,
  roundTwoDecimals,
} from 'src/@core/coreHelper';
import {
  ApplicantsStateTypes,
  IApplicant,
  ICompany,
  IHealthInsuranceAgreement,
  QuotationStatusTypes,
} from 'src/types/@autogenerated';
import QuotationForm from '../Quotations';

const SCHEMA_NAME_APPLICANTS = Collections.APPLICANTS;
const APPLICANT_QUOTATIONS_SCHEMA_NAME = 'applicantQuotations';
interface PropsType {
  docId: string;
  applicantSchemaArg: IEntitySchema;
  applicantDataArg: IApplicant;
  applicantSchemaFieldsArg: IEntitySchemaField[];
  onUpdateApplicant: () => Promise<any>;
}

const calculateMonthlyHoursRate = (hours: number, hourRate: number) => {
  return hours * hourRate;
};

const calculateMonthlyHoursRateTax = (monthlyHoursRate: number, tax: string) => {
  if (!tax) return 0;
  if (tax === 'iva_21') return monthlyHoursRate * 1.21;
  else if (tax === 'iva_10_5') return monthlyHoursRate * 1.105;
  else if (tax === 'tax_free') return monthlyHoursRate;

  return 0;
};

const calculateMargin = (hourRateWorker: number, enliteRate: number) => {
  if (!enliteRate) return 0;

  return 100 - (hourRateWorker / enliteRate) * 100;
};

const QuotationTab = ({
  docId,
  applicantSchemaArg,
  applicantDataArg,
  applicantSchemaFieldsArg,
  onUpdateApplicant,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const router = useRouter();

  // ** State
  const [applicantSchema, setApplicantSchema] = useState<IEntitySchema>(applicantSchemaArg);
  const [applicantData, setApplicantData] = useState<IApplicant>(applicantDataArg);
  const [applicantQuotationData, setApplicantQuotationData] = useState<IApplicantQuotation | null>(null);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);

  const [applicantQuotationsEntitySchema, setApplicantQuotationsEntitySchema] = useState<IEntitySchema | null>(null);
  const [applicantQuotationsEntitySchemaFields, setApplicantQuotationsEntitySchemaFields] = useState<
    IEntitySchemaField[]
  >([]);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);

  // ** applicants
  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);
  const toggleEditApplicantDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  const [monthlyHoursRate, setMonthlyHoursRate] = useState<number>(0);
  const [monthlyHoursRateTax, setMonthlyHoursRateTax] = useState<number>(0);
  const [margin, setMargin] = useState<number>(0);
  const [isCreating, setIsCreating] = useState<boolean>(true);

  const APPLICANT_QUOTATIONS_SCHEMA_NAME = 'applicantQuotations';

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        setLoadingSchema(true);
        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === APPLICANT_QUOTATIONS_SCHEMA_NAME;
        });
        if (!schema) throw new Error('Missing schemaName: ' + APPLICANT_QUOTATIONS_SCHEMA_NAME);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setApplicantQuotationsEntitySchema(entitySchemaResponse);
        setApplicantQuotationsEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, []);

  // Obtenemos todos los quotations relacionados a este applicant
  useEffect(() => {
    const doAsync = async () => {
      setLoadingData(true);
      try {
        const response = await dynamicGet({
          params:
            '/cms/' +
            APPLICANT_QUOTATIONS_SCHEMA_NAME +
            '/by-prop/' +
            nameof<IApplicantQuotation>('applicantId') +
            '/' +
            applicantData.id,
        });

        if (!response || !response.items) throw new Error('Invalid response');

        if (response.items[0]) {
          // debugger;

          setApplicantQuotationData(response.items[0]);

          // debugger;
          setCalculatesValues(response.items[0]);
          setByDefaultValues(response.items[0], applicantData);
          setIsCreating(false);
        } else {
          setIsCreating(true);
        }

        setLoadingData(false);
      } catch (e) {
        handleError(e);
        setLoadingData(false);
      }
    };

    doAsync();
  }, [toggleData]);

  const setCalculatesValues = (quotation: IApplicantQuotation) => {
    const monthly = calculateMonthlyHoursRate(quotation.monthlyHours, quotation.hourRateEnlite);
    const monthlyTax = calculateMonthlyHoursRateTax(monthly, quotation.taxConditionType);
    const marginVal = calculateMargin(quotation.hourRateWorker, quotation.hourRateEnlite);

    setMonthlyHoursRate(monthly);
    setMonthlyHoursRateTax(monthlyTax);
    setMargin(marginVal);
  };

  const setByDefaultValues = (quotation: IApplicantQuotation, applicant: IApplicant) => {
    if (!quotation.businessType) quotation.businessType = applicant.paymentMethod;
    if (!quotation.paymentModeType)
      quotation.paymentModeType = applicant.paymentMode ? applicant.paymentMode : PaymentModes.DIRECTLY_PAY;
  };

  const isFieldsCompleted: () => string[] = () => {
    const requeridFieldsNames = [
      nameof<IApplicantQuotation>('businessType'),
      nameof<IApplicantQuotation>('paymentModeType'),
      nameof<IApplicantQuotation>('taxConditionType'),

      nameof<IApplicantQuotation>('hourRateWorker'),
      nameof<IApplicantQuotation>('collectionPeriod'),
      nameof<IApplicantQuotation>('paymentDate'),
      nameof<IApplicantQuotation>('hourRateEnlite'),
      nameof<IApplicantQuotation>('monthlyHours'),
      nameof<IApplicantQuotation>('validFrom'),
      nameof<IApplicantQuotation>('validUntil'),
    ];
    if (!applicantQuotationData) throw new Error('Missing entityData');

    if (applicantQuotationData.businessType !== BusinessTypes.PRIVATE_INSURANCE) {
      requeridFieldsNames.push(nameof<IApplicantQuotation>('healthInsuranceId'));
      requeridFieldsNames.push(nameof<IApplicantQuotation>('healthInsuranceAgreementId'));
    }

    const missingFields = requeridFieldsNames.filter((field) => {
      const val = applicantQuotationData[field as keyof IApplicantQuotation];

      return typeof val === 'undefined' || val === null || val === '';
    });

    return missingFields;
  };

  const applicantQuotationStateUpdate = async (applicantQuotationTargetState: QuotationStatusTypes) => {
    try {
      setLoadingData(true);

      if (!applicantQuotationData || !currentUser.currentUser)
        throw new Error('Missing entityData/currentUser.currentUser');

      if (applicantQuotationTargetState === QuotationStatusTypes.APPROVED) {
        const missingFields = isFieldsCompleted();

        // el map me devuelve una lista separada por ,
        // solo agrego el espacio
        if (missingFields.length)
          throw new Error(
            `${t('required fields')}

            [${missingFields.map((missingField, index) => {
              if (index === missingFields.length - 1) return `"${t(missingField)}"`;

              return `"${t(missingField)}" `;
            })}
          ]`
          );
      }
      const itemValues = { ...applicantQuotationData };

      itemValues.applicantQuotationStatusType = applicantQuotationTargetState;

      //update quotation entitiy
      if (itemValues.id) await updateEntitybyId(itemValues, APPLICANT_QUOTATIONS_SCHEMA_NAME, itemValues.id);

      //only if quotation was rejected or approved
      if (
        applicantQuotationTargetState === QuotationStatusTypes.APPROVED ||
        applicantQuotationTargetState === QuotationStatusTypes.REJECTED
      )
        await updateApplicantState(applicantQuotationTargetState);

      await onUpdateApplicant();

      // refresco la info
      setToggleData(!toggleData);
      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const updateApplicantState = async (newStateQuotation: string) => {
    const itemValues = { ...applicantData };

    if (newStateQuotation === QuotationStatusTypes.APPROVED)
      itemValues.applicantStateType = ApplicantsStateTypes.QUOTATION_APPROVED;
    else if (newStateQuotation === QuotationStatusTypes.REJECTED)
      itemValues.applicantStateType = ApplicantsStateTypes.QUOTATION_REJECTED;

    if (applicantData.id) await updateEntitybyId(itemValues, SCHEMA_NAME_APPLICANTS, applicantData.id);
  };

  const handleOnEditSubmit_ApplicantQuotation = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!applicantQuotationsEntitySchema || !currentUser.currentUser)
        throw new Error('Missing entitySchema/currentUser.currentUser');

      if (applicantQuotationData?.id)
        await updateEntityDataBySchema(
          currentUser.currentUser,
          applicantQuotationsEntitySchema,
          applicantQuotationsEntitySchemaFields,
          applicantQuotationData?.id,
          formData,
          null,
          null
        );
      else {
        formData['applicantId'] = applicantData.id;

        const creationResult = await createEntityDataBySchema(
          currentUser.currentUser,
          applicantQuotationsEntitySchema,
          applicantQuotationsEntitySchemaFields,
          formData,
          applicantSchema
        );
      }

      //only if quotation was rejected or approved
      const newStateQuotation = formData['applicantQuotationStatusType'];
      if (newStateQuotation === QuotationStatusTypes.APPROVED || newStateQuotation === QuotationStatusTypes.REJECTED)
        await updateApplicantState(newStateQuotation);

      // cierro sidebar
      setEditSidebarOpen(false);

      // refresco la info
      setToggleData(!toggleData);
      await onUpdateApplicant();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const isPermittedByRol = (role: string) => {
    //UserDefinedRols.UDR_STAFF_COMMERCIAL
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, role))
    );
  };

  const getHeatlhInsuranceFriendlyName = (applicantQuotationData?: IApplicantQuotation | null) => {
    if (!applicantQuotationData) return '';

    const sourceData = getSourceEntityData({
      obj: applicantQuotationData,
      key: nameof<IApplicantQuotation>('healthInsuranceId'),
    });
    if (!sourceData) return '';

    return (sourceData as ICompany).name;
  };

  const getHealthInsuranceAgreementFriendlyName = (applicantQuotationData?: IApplicantQuotation | null) => {
    if (!applicantQuotationData) return '';

    const sourceData = getSourceEntityData({
      obj: applicantQuotationData,
      key: nameof<IApplicantQuotation>('healthInsuranceAgreementId'),
    });
    if (!sourceData) return '';

    return (sourceData as IHealthInsuranceAgreement).name;
  };

  const printOnClick = () => {
    window.print();
  };

  const updateEntitybyId = async (formData: any, schema: string, id: string) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${schema}/` + id,
      data: formData,
    });
  };

  if (loadingData) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('budget'))}
            action={
              isPermittedByRol(UserDefinedRols.UDR_STAFF_COMMERCIAL) && (
                <>
                  <Button
                    variant='contained'
                    onClick={() => {
                      setEditSidebarOpen(true);
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('edit'))}
                  </Button>
                  <Button
                    variant='contained'
                    onClick={() => {
                      applicantQuotationStateUpdate(QuotationStatusTypes.APPROVED);
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('approve'))}
                  </Button>
                  <OptionsMenu
                    options={[
                      {
                        text: capitalize(t('print')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => printOnClick(),
                        },
                      },
                      // {
                      //   text: capitalize(t('send')),
                      //   menuItemProps: {
                      //     sx: { py: 2 },
                      //     onClick: () => alert('email enviado!'),
                      //   },
                      // },

                      {
                        text: capitalize(t('reject')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => applicantQuotationStateUpdate(QuotationStatusTypes.REJECTED),
                        },
                      },
                    ]}
                    iconButtonProps={{ size: 'small', sx: { color: 'text.disabled' } }}
                  />
                </>
              )
            }
          />
          <CardContent>
            {isPermittedByRol(UserDefinedRols.UDR_STAFF_ADMISSION) && (
              <Grid container spacing={4}>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'hourRateWorker'} value={applicantQuotationData?.hourRateWorker}></TextInfo>
                  <TextInfo title={'paymentDate'} value={applicantQuotationData?.paymentDate}></TextInfo>{' '}
                  <TextInfo
                    title={'quotation state'}
                    value={applicantQuotationData?.applicantQuotationStatusType}
                  ></TextInfo>
                </Grid>
              </Grid>
            )}

            {isPermittedByRol(UserDefinedRols.UDR_STAFF_COMMERCIAL) && (
              <Grid container spacing={4}>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'payment method'} value={applicantQuotationData?.businessType}></TextInfo>
                  <TextInfo
                    title={'health insurance'}
                    value={getHeatlhInsuranceFriendlyName(applicantQuotationData)}
                  ></TextInfo>
                  <TextInfo title={'currency'} value={applicantQuotationData?.currency}></TextInfo>
                  <TextInfo title={'hourRateEnlite'} value={`$${applicantQuotationData?.hourRateEnlite}`}></TextInfo>
                  <TextInfo title={'collectionPeriod'} value={applicantQuotationData?.collectionPeriod}></TextInfo>
                  <TextInfo title={'monthlyHours'} value={applicantQuotationData?.monthlyHours}></TextInfo>
                  <TextInfo title={'taxCondition'} value={applicantQuotationData?.taxConditionType}></TextInfo>{' '}
                  <TextInfo
                    title={'validFrom'}
                    value={parseDateToShortString(applicantQuotationData?.validFrom)}
                  ></TextInfo>
                </Grid>

                <Grid item xs={12} md={6}>
                  <TextInfo title={'paymentMode'} value={applicantQuotationData?.paymentModeType}></TextInfo>
                  <TextInfo
                    title={'agreement'}
                    value={getHealthInsuranceAgreementFriendlyName(applicantQuotationData)}
                  ></TextInfo>
                  <TextInfo title={'margen'} value={`${roundTwoDecimals(margin)}%`}></TextInfo>
                  <TextInfo title={'hourRateWorker'} value={`$${applicantQuotationData?.hourRateWorker}`}></TextInfo>
                  <TextInfo title={'paymentDate'} value={applicantQuotationData?.paymentDate}></TextInfo>
                  <TextInfo title={'monto neto mensual'} value={`$${monthlyHoursRate}`}></TextInfo>
                  <TextInfo title={'monto bruto mensual'} value={`$${monthlyHoursRateTax}`}></TextInfo>
                  <TextInfo
                    title={'validUntil'}
                    value={parseDateToShortString(applicantQuotationData?.validUntil)}
                  ></TextInfo>
                </Grid>
              </Grid>
            )}
          </CardContent>
        </Card>

        {!!editSidebarOpen && (
          <QuotationForm
            docId={docId}
            isCreating={isCreating}
            onSubmit={handleOnEditSubmit_ApplicantQuotation}
            title={'Edit'}
            formId={'Edit_quotation'}
            initialValues={applicantQuotationData}
            open={editSidebarOpen}
            toggle={toggleEditApplicantDrawer}
            onSubmitDone={() => {
              toggleEditApplicantDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default QuotationTab;
