// ** React Imports
import { useEffect, useState } from 'react';

// ** MUI Imports
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import Checkbox from '@mui/material/Checkbox';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import Divider from '@mui/material/Divider';
import Grid from '@mui/material/Grid';
import ListItemText from '@mui/material/ListItemText';
import MenuItem from '@mui/material/MenuItem';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/material/styles';

// ** Icon Imports

// ** Custom Components
import CustomAvatar from 'src/@core/components/mui/avatar';
import CustomChip from 'src/@core/components/mui/chip';
import CustomTextField from 'src/@core/components/mui/text-field';
import UserSuspendDialog from 'src/views/apps/user/view/UserSuspendDialog';

// ** Types
import { ThemeColor } from 'src/@core/layouts/types';

// ** Utils Import
import { getInitials } from 'src/@core/utils/get-initials';

import { SelectChangeEvent } from '@mui/material';
import { getUDRoleLabel, handleError, hasRole } from 'src/@core/coreHelper';
import { updateUser } from 'src/services/usersServices';
import { AppRols } from 'src/types/appRols';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { IUser } from 'src/types/users';
import Loader from 'src/@core/components/loader';
import { IUserRol } from 'src/types/entities';
import { listUserDefinedRols } from 'src/services/entitiesSchemasServices';
import { UserStatusTypes } from 'src/types/@autogenerated';

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;

const MenuProps = {
  PaperProps: {
    style: {
      width: 250,
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
    },
  },
};

interface ColorsType {
  [key: string]: ThemeColor;
}

interface UserStatusType {
  [key: string]: ThemeColor;
}

const userStatusObj: UserStatusType = {
  [UserStatusTypes.USER_STATUS_TYPE_ACTIVE]: 'success',
  [UserStatusTypes.USER_STATUS_TYPE_DEFAULTER]: 'warning',
  [UserStatusTypes.USER_STATUS_TYPE_INACTIVE]: 'secondary',
};

// ** Styled <sup> component
const Sup = styled('sup')(({ theme }) => ({
  top: 0,
  left: -10,
  position: 'absolute',
  color: theme.palette.primary.main,
}));

// ** Styled <sub> component
const Sub = styled('sub')(({ theme }) => ({
  alignSelf: 'flex-end',
  color: theme.palette.text.disabled,
  fontSize: theme.typography.body1.fontSize,
}));

type Props = {
  user: IUser;
  onUserUpdate?: (newUserData: IUser) => void;
};

const UserViewLeft = ({ user, onUserUpdate }: Props) => {
  // ** States
  const [loadingUDRols, setLoadingUDRols] = useState<boolean>(true);
  const [udRols, setUDRols] = useState<IUserRol[]>([]);

  const [openEdit, setOpenEdit] = useState<boolean>(false);
  const [suspendDialogOpen, setSuspendDialogOpen] = useState<boolean>(false);

  const [userState, setUserState] = useState<IUser>(user);
  const [loadingSubmit, setLoadingSubmit] = useState<boolean>(false);

  // edit values
  const [firstName, setFirstName] = useState<string>('');
  const [lastName, setLastName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [phoneNumber, setPhoneNumber] = useState<string>('');

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingUDRols(true);

        const response = await listUserDefinedRols();

        setUDRols(
          response.items.filter((item) => {
            return !item.isSchemaRelated;
          })
        );
        setLoadingUDRols(false);
      } catch (e) {
        setLoadingUDRols(false);
        handleError(e);
      }
    };

    doAsync();
  }, []);

  const mapUserToStateEditValues = (user: IUser) => {
    setFirstName(user.firstName);
    setLastName(user.lastName);
    setEmail(user.email);
    setPhoneNumber(user.phoneNumber ? user.phoneNumber : '');
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        mapUserToStateEditValues(user);
        setUserState(user);
      } catch (e) {
        handleError(e);
      }
    };
    doAsync();
  }, [user]);

  // Handle Edit dialog
  const handleEditClickOpen = () => setOpenEdit(true);
  const handleEditClose = () => setOpenEdit(false);

  const handleEditSubmit = async () => {
    try {
      setLoadingSubmit(true);

      const newUserData = (await updateUser(user.id, { firstName, lastName, phoneNumber })) as IUser;

      if (onUserUpdate) onUserUpdate(newUserData);

      setUserState(newUserData);

      handleEditClose();
      setLoadingSubmit(false);
    } catch (e) {
      handleError(e);
      setLoadingSubmit(false);
    }
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardContent sx={{ pt: 13.5, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>
            {userState.avatarUrl ? (
              <CustomAvatar
                src={userState.avatarUrl}
                variant='rounded'
                alt={userState.firstName + ' ' + userState.lastName}
                sx={{ width: 100, height: 100, mb: 4 }}
              />
            ) : (
              <CustomAvatar
                skin='light'
                variant='rounded'
                color={'primary'}
                sx={{ width: 100, height: 100, mb: 4, fontSize: '3rem' }}
              >
                {getInitials(userState.firstName + ' ' + userState.lastName)}
              </CustomAvatar>
            )}
            <Typography variant='h4' sx={{ mb: 3 }}>
              {userState.firstName + ' ' + userState.lastName}
            </Typography>

            {loadingUDRols && <Loader />}

            {!loadingUDRols &&
              !!userState.userDefinedRols &&
              !!userState.userDefinedRols.length &&
              userState.appRols.map((appRol, index) => {
                return (
                  <CustomChip
                    key={index}
                    rounded
                    skin='light'
                    size='small'
                    label={getUDRoleLabel(udRols, appRol)}
                    color={'primary'}
                    // sx={{ textTransform: 'capitalize' }}
                  />
                );
              })}
          </CardContent>

          {/* <CardContent sx={{ pt: (theme) => `${theme.spacing(2)} !important` }}>
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <Box sx={{ mr: 8, display: 'flex', alignItems: 'center' }}>
                <CustomAvatar skin='light' variant='rounded' sx={{ mr: 2.5, width: 38, height: 38 }}>
                  <Icon fontSize='1.75rem' icon='tabler:checkbox' />
                </CustomAvatar>
                <div>
                  <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>1.23k</Typography>
                  <Typography variant='body2'>Task Done</Typography>
                </div>
              </Box>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <CustomAvatar skin='light' variant='rounded' sx={{ mr: 2.5, width: 38, height: 38 }}>
                  <Icon fontSize='1.75rem' icon='tabler:briefcase' />
                </CustomAvatar>
                <div>
                  <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>568</Typography>
                  <Typography variant='body2'>Project Done</Typography>
                </div>
              </Box>
            </Box>
          </CardContent> */}

          <Divider sx={{ my: '0 !important', mx: 6 }} />

          <CardContent sx={{ pb: 4 }}>
            <Typography variant='body2' sx={{ color: 'text.disabled', textTransform: 'uppercase' }}>
              Details
            </Typography>
            <Box sx={{ pt: 4 }}>
              <Box sx={{ display: 'flex', mb: 3 }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Email:</Typography>
                <Typography sx={{ color: 'text.secondary' }}>{userState.email}</Typography>
              </Box>
              <Box sx={{ display: 'flex', mb: 3, alignItems: 'center' }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Status:</Typography>
                <CustomChip
                  rounded
                  skin='light'
                  size='small'
                  label={userState.appUserStatus}
                  color={userStatusObj[userState.appUserStatus]}
                  sx={{
                    textTransform: 'capitalize',
                  }}
                />
              </Box>
              {/* <Box sx={{ display: 'flex', mb: 3 }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Role:</Typography>
                <Typography sx={{ color: 'text.secondary', textTransform: 'capitalize' }}>{data.role}</Typography>
              </Box> */}
              {/* <Box sx={{ display: 'flex', mb: 3 }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Tax ID:</Typography>
                <Typography sx={{ color: 'text.secondary' }}>Tax-8894</Typography>
              </Box> */}
              <Box sx={{ display: 'flex', mb: 3 }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Contact:</Typography>
                <Typography sx={{ color: 'text.secondary' }}>{userState.phoneNumber}</Typography>
              </Box>
              {/* <Box sx={{ display: 'flex', mb: 3 }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Language:</Typography>
                <Typography sx={{ color: 'text.secondary' }}>English</Typography>
              </Box> */}
              {/* <Box sx={{ display: 'flex' }}>
                <Typography sx={{ mr: 2, fontWeight: 500, color: 'text.secondary' }}>Country:</Typography>
                <Typography sx={{ color: 'text.secondary' }}>{data.country}</Typography>
              </Box> */}
            </Box>
          </CardContent>

          <CardActions sx={{ display: 'flex', justifyContent: 'center' }}>
            <Button variant='contained' sx={{ mr: 2 }} onClick={handleEditClickOpen}>
              Edit
            </Button>
            <Button color='error' variant='tonal' onClick={() => setSuspendDialogOpen(true)}>
              Suspend
            </Button>
          </CardActions>

          <Dialog
            open={openEdit}
            onClose={handleEditClose}
            aria-labelledby='user-view-edit'
            aria-describedby='user-view-edit-description'
            sx={{ '& .MuiPaper-root': { width: '100%', maxWidth: 650 } }}
          >
            <DialogTitle
              id='user-view-edit'
              sx={{
                textAlign: 'center',
                fontSize: '1.5rem !important',
                px: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
                pt: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
              }}
            >
              Edit User Information
            </DialogTitle>
            <DialogContent
              sx={{
                pb: (theme) => `${theme.spacing(8)} !important`,
                px: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
              }}
            >
              <DialogContentText variant='body2' id='user-view-edit-description' sx={{ textAlign: 'center', mb: 7 }}>
                Updating user details
              </DialogContentText>
              <form>
                <Grid container spacing={6}>
                  <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      label='First Name'
                      placeholder='John'
                      value={firstName}
                      onChange={(e) => {
                        setFirstName(e.target.value);
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      label='Last Name'
                      placeholder='Doe'
                      value={lastName}
                      onChange={(e) => {
                        setLastName(e.target.value);
                      }}
                    />
                  </Grid>

                  <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      type='email'
                      label='Email'
                      value={email}
                      disabled={true}
                      onChange={(e) => {
                        setEmail(e.target.value);
                      }}
                      placeholder='john.doe@gmail.com'
                    />
                  </Grid>

                  <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      label='Phone Number'
                      value={phoneNumber}
                      placeholder='+5491111223311'
                      onChange={(e) => {
                        setPhoneNumber(e.target.value);
                      }}
                    />
                  </Grid>
                  {/* <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      label='Contact'
                      placeholder='723-348-2344'
                      defaultValue={`+1 ${data.contact}`}
                    />
                  </Grid> */}
                  {/* <Grid item xs={12} sm={6}>
                    <CustomTextField select fullWidth label='Language' defaultValue='English'>
                      <MenuItem value='English'>English</MenuItem>
                      <MenuItem value='Spanish'>Spanish</MenuItem>
                      <MenuItem value='Portuguese'>Portuguese</MenuItem>
                      <MenuItem value='Russian'>Russian</MenuItem>
                      <MenuItem value='French'>French</MenuItem>
                      <MenuItem value='German'>German</MenuItem>
                    </CustomTextField>
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <CustomTextField select fullWidth label='Country' defaultValue='USA'>
                      <MenuItem value='USA'>USA</MenuItem>
                      <MenuItem value='UK'>UK</MenuItem>
                      <MenuItem value='Spain'>Spain</MenuItem>
                      <MenuItem value='Russia'>Russia</MenuItem>
                      <MenuItem value='France'>France</MenuItem>
                      <MenuItem value='Germany'>Germany</MenuItem>
                    </CustomTextField>
                  </Grid> */}
                  {/* <Grid item xs={12}>
                    <FormControlLabel
                      label='Use as a billing address?'
                      control={<Switch defaultChecked />}
                      sx={{ '& .MuiTypography-root': { fontWeight: 500 } }}
                    />
                  </Grid> */}
                </Grid>
              </form>
            </DialogContent>
            <DialogActions
              sx={{
                justifyContent: 'center',
                px: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
                pb: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
              }}
            >
              <Button variant='contained' sx={{ mr: 2 }} onClick={handleEditSubmit} disabled={loadingSubmit}>
                Submit
              </Button>
              <Button variant='tonal' color='secondary' onClick={handleEditClose} disabled={loadingSubmit}>
                Cancel
              </Button>
            </DialogActions>
          </Dialog>

          <UserSuspendDialog open={suspendDialogOpen} setOpen={setSuspendDialogOpen} user={userState} />
        </Card>
      </Grid>
    </Grid>
  );
};

export default UserViewLeft;
