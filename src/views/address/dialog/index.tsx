import { Icon } from '@iconify/react';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  Checkbox,
  Divider,
  FormControlLabel,
  Grid,
  IconButton,
  Tooltip,
  Typography,
  capitalize,
} from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import Fuse from 'fuse.js';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import DialogAction from 'src/@core/components/custom-dialog-action';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import Loader from 'src/@core/components/loader';
import CustomTextField from 'src/@core/components/mui/text-field';
import { handleError, hasRole, nameof } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { dynamicRemove } from 'src/services/entitiesDynamicServices';
import { IAddress, IUsersAddress } from 'src/types/@autogenerated';
import { AppRols } from 'src/types/appRols';
import { IEntitySchemaField } from 'src/types/entities';
import { UserDefinedRols } from 'src/types/userDefinedRols';

interface PropsType {
  docId: string;
  schema?: string;
  primaryAddress?: IAddress | null;
  addresses: IUsersAddress[] | null;
  onSubmit: (formData: IUsersAddress, isCreating: boolean) => Promise<any>;
  onRemove: (formData: IUsersAddress) => Promise<any>;
}

interface IUsersAddressRow extends IUsersAddress {
  showRow?: boolean;
}

interface CellType {
  row: IUsersAddressRow;
}

const AddressView = ({ docId, schema, primaryAddress, addresses, onSubmit, onRemove }: PropsType) => {
  // ** Hooks
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const win: any = window;

  // **  states

  const [entitiesData, setEntitiesData] = useState<IUsersAddressRow[]>([]);

  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [isFirstLoad, setIsFirstLoad] = useState<boolean>(true);

  //-- map
  const [addressPlace, setAddressPlace] = useState<any>();
  const [map, setMap] = useState<any>(null);
  const [showAddressDialog, setShowAddressDialog] = useState<boolean>(false);
  const [showMap, setShowMap] = useState<boolean>(false);
  const [dialogTitle, setDialogTitle] = useState<string>(t('address') as string);
  const [dialogSubmitText, setDialogSubmitText] = useState<string>(t('add') as string);
  const [userAddresId, setUserAddresId] = useState<string>('');
  const [isPrimaryAddress, setIsPrimaryAddress] = useState<boolean>(true);

  //- grid
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading && !!currentUser.currentUser
      // &&
      // (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
      //   hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  const updateColumnsData = () => {
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='View Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                openAddressDialog(row);
                setDialogTitle(capitalize(t('edit address')));
                setDialogSubmitText(capitalize(t('edit')));
              }}
            >
              <Icon icon='tabler:eye' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    columnsData.push({
      flex: 0.1,

      field: 'isPrimary',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>{row.isPrimary && <>Primary</>}</Box>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'city',
      headerName: t('city') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.address.city}
              </Typography>
              <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                {row.address.city}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.8,
      minWidth: 210,
      field: 'street',
      headerName: capitalize(t('street')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.address.addressString}
              </Typography>
              <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                {row.address.addressString}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'remove',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='Remove'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                onRemove(row);
              }}
            >
              <Icon icon='tabler:trash' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    setColumns(columnsData);
  };

  const onPlaceSelected = (place: any) => {
    setAddressPlace(place);
  };

  // ** effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingData(true);
        if (!addresses || !addresses) return;

        setEntitiesData(
          addresses.map((item: IUsersAddress) => {
            return { ...item, showRow: true };
          }) as IUsersAddress[]
        );

        // Define table columns
        updateColumnsData();

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
  }, [addresses]);

  useEffect(() => {
    if (!map || !addressPlace) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    new win.google.maps.Marker({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      id: 1, //to do check on this
      map: map,
      icon: image,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);
    map.setZoom(Math.min(map.getZoom(), 12));
  }, [addressPlace, map]);

  useEffect(() => {
    if (!win.google || !document.getElementById('map-canvas')) return;

    const mapAux = new win.google.maps.Map(document.getElementById('map-canvas'), {
      center: {
        lat: -34.603008, //lat and long Buenos Aires
        lng: -58.3794688,
      },
      zoom: 12,
    });

    setMap(mapAux);
  }, [win.google, showMap]);

  const openAddressDialog = (row?: IUsersAddress) => {
    if (row && row.id) {
      onPlaceSelected(row.address);
      setUserAddresId(row.id);
      setIsPrimaryAddress(row.isPrimary ?? false);
    } else {
      onPlaceSelected(null);
      setUserAddresId('');
      setShowMap(false);
      setIsPrimaryAddress(true);
    }

    setShowMap(true);
    setShowAddressDialog(true);
  };

  const closeAddressDialog = () => {
    setShowMap(false);
    setShowAddressDialog(false);
  };

  //to prepare form data
  const onHandleSubmit = () => {
    try {
      if (!addressPlace) throw new Error('address missing');

      const newAddress = {
        address: addressPlace,
        userId: docId,
        isPrimary: isPrimaryAddress,
        id: userAddresId,
      } as IUsersAddress;

      const isCreating = userAddresId ? false : true;
      onSubmit(newAddress, isCreating);
    } catch (e) {
      closeAddressDialog();
      handleError(e);
    }
  };

  if (loadingData) return <Loader />;

  return (
    <>
      <Card>
        <CardHeader sx={{ textTransform: 'capitalize' }} title={capitalize(t('addresses'))} />
        <CardContent>
          <Grid container spacing={6}></Grid> <Divider sx={{ m: '0 !important' }} />
          <Box
            sx={{
              py: 4,
              px: 6,
              rowGap: 2,
              columnGap: 4,
              display: 'flex',
              flexWrap: 'wrap',
              alignItems: 'center',

              justifyContent: 'right',
            }}
          >
            <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
              {isPermittedByRol() && (
                <Button
                  onClick={() => {
                    openAddressDialog();
                    setDialogTitle(capitalize(t('new address')));
                    setDialogSubmitText('add');
                  }}
                  variant='contained'
                  sx={{ '& svg': { mr: 2 } }}
                >
                  <Icon fontSize='1.125rem' icon='tabler:plus' />
                  {capitalize(t('new'))}
                </Button>
              )}
            </Box>
          </Box>
          <DataGrid
            autoHeight
            rows={entitiesData.filter((item) => {
              return item.showRow;
            })}
            rowHeight={60}
            loading={loadingData}
            columns={columns}
            initialState={{
              columns: {
                columnVisibilityModel: {
                  id: false,
                },
              },
            }}
            disableRowSelectionOnClick
            pageSizeOptions={[7, 10, 25, 50]}
            paginationModel={paginationModel}
            onPaginationModelChange={setPaginationModel}
          />
        </CardContent>
      </Card>

      <DialogAction
        show={showAddressDialog}
        title={dialogTitle}
        keepMounted
        maxWidth='md'
        textButtonSubmit={dialogSubmitText}
        colorButtonSubmit='primary'
        onClickClose={() => closeAddressDialog()}
        showOnClickSubmit={true}
        onClickSubmit={() => onHandleSubmit()}
        showOnClickClose={false}
      >
        <Grid container spacing={0}>
          <Grid item xs={12} md={12}>
            <form onSubmit={(e) => e.preventDefault()}>
              <Grid container spacing={4}>
                <Grid item xs={12} sm={12}>
                  {showMap && (
                    <FormLocationField
                      label={''}
                      value={addressPlace ? addressPlace.addressString : ''}
                      placeholder={'Av libertador 123'}
                      onPlaceSelected={(place: any) => {
                        onPlaceSelected(place);
                      }}
                    />
                  )}
                </Grid>
              </Grid>
            </form>
          </Grid>
          <Grid item xs={12} sx={{ marginTop: 10 }}>
            <Card>
              <Divider sx={{ m: '0 !important' }} />
              {showMap && <div id='map-canvas' style={{ height: 300 }}></div>}
            </Card>
          </Grid>
        </Grid>

        <Grid item xs={12} sx={{ marginTop: 10 }}>
          <Divider sx={{ m: '0 !important' }} />{' '}
          <Box className='actions-right' sx={{ display: 'flex', alignItems: 'center' }}>
            <FormControlLabel
              label={capitalize(t('mark as primary'))}
              control={
                <Checkbox
                  checked={isPrimaryAddress}
                  onChange={() => setIsPrimaryAddress(!isPrimaryAddress)}
                  name='primaryAddress'
                />
              }
            />
          </Box>
        </Grid>
      </DialogAction>
    </>
  );
};

export default AddressView;
