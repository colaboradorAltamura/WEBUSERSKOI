// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
// ** Custom Components Imports
import { Button, Divider, Slider, Typography, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { handleError, hasRole } from 'src/@core/coreHelper';
import { IAddress, IUsersAddress } from 'src/types/@autogenerated';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import Loader from 'src/@core/components/loader';

const DEFAULT_KILOMETERS = [
  {
    value: 5,
    label: '5K',
  },
  {
    value: 10,
    label: '10K',
  },
  {
    value: 20,
    label: '20K',
  },
  {
    value: 50,
    label: '50K',
  },
];

interface PropsType {
  primaryAddress: IAddress | null;
  defaultDistance: number;
  onSaveLocation: (data: IAddress, maxDistance: number) => Promise<any>;
  kilometers?: any;
  title?: string;
}

const AddressRadioDistance = ({ primaryAddress, onSaveLocation, defaultDistance, kilometers, title }: PropsType) => {
  // ** Hooks
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const win: any = window;

  // ** State
  const [map, setMap] = useState<any>(null);
  const [marker, setMarker] = useState<any>();
  const [circle, setCircle] = useState<any>();
  const [addressPlace, setAddressPlace] = useState<any>(primaryAddress ?? null);
  //const [addressData, setAddressData] = useState<IUsersAddress | null>(primaryAddress);
  const [loading, setLoading] = useState<boolean>(false);
  const [radioDistance, setRadioDistance] = useState<number>(defaultDistance ?? 5000);
  const [marks, setMarks] = useState<any>(kilometers ?? DEFAULT_KILOMETERS);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS))
    );
  };

  const onPlaceSelected = (place: any) => {
    setAddressPlace(place);
  };

  const saveLocation = async () => {
    try {
      if (!addressPlace) throw new Error('Missing address');

      onSaveLocation(addressPlace, radioDistance);
    } catch (e: any) {
      handleError(e);
    }
  };

  useEffect(() => {
    console.log(primaryAddress);
    if (!map || !addressPlace || !marker || !circle) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    marker.setOptions({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      map: map,
    });

    circle.setOptions({
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#FF0000',
      fillOpacity: 0.35,
      map,
      center: addressPlace.addressObject.geometry.location,
      radius: radioDistance * 1000,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);

    // map.setOptions({ maxZoom: 17 });

    const listener = win.google.maps.event.addListener(map, 'idle', function () {
      map.setZoom(setZoomMaps());
      win.google.maps.event.removeListener(listener);
    });
  }, [addressPlace, map, radioDistance]);

  useEffect(() => {
    if (!win.google) return;

    const mapAux = new win.google.maps.Map(document.getElementById('map-canvas'), {
      center: {
        lat: 12.9715987,
        lng: 77.59456269999998,
      },
      zoom: 4,
    });

    if (!marker) setMarker(new win.google.maps.Marker());

    if (!circle) setCircle(new win.google.maps.Circle());

    setMap(mapAux);
  }, [win.google]);

  const setZoomMaps = () => {
    if (radioDistance == 50) return 9;
    else if (radioDistance == 20) return 10;
    else if (radioDistance == 10) return 11;
    else if (radioDistance == 5) return 12;

    map.setZoom(9);
  };

  const valuetext = (value: number) => {
    return `${value}K`;
  };

  const valueLabelFormat = (value: number) => {
    return value;
  };
  const handleSliderChange = (event: Event, newValue: number | number[]) => {
    setRadioDistance(newValue as number);
  };
  if (loading) return <Loader />;

  return (
    <Card>
      <CardHeader
        title={title ?? ''}
        action={
          isPermittedByRol() && (
            <Button
              variant='contained'
              onClick={() => {
                saveLocation();
              }}
              sx={{ mr: 4, mb: [2, 0] }}
            >
              {capitalize(t('save'))}
            </Button>
          )
        }
      />
      <CardContent>
        <Grid container spacing={0}>
          <Grid item xs={12} md={12}>
            <form onSubmit={(e) => e.preventDefault()}>
              <Grid container spacing={4}>
                <Grid item xs={12} sm={12}>
                  <FormLocationField
                    label={t('address')}
                    value={addressPlace ? addressPlace.addressString : ''}
                    placeholder={'Av libertador 123'}
                    onPlaceSelected={(place: any) => {
                      onPlaceSelected(place);
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={12}>
                  <Typography>{capitalize(t('max work distance'))}</Typography>
                  <Slider
                    aria-label='max work distance'
                    defaultValue={radioDistance}
                    valueLabelFormat={valueLabelFormat}
                    getAriaValueText={valuetext}
                    step={null}
                    valueLabelDisplay='auto'
                    marks={marks}
                    max={50}
                    size='small'
                    onChange={handleSliderChange}
                  />
                </Grid>
              </Grid>
            </form>
          </Grid>
          <Grid item xs={12} sx={{ marginTop: 10 }}>
            <Card>
              <Divider sx={{ m: '0 !important' }} />
              <div id='map-canvas' style={{ height: 300 }} />
            </Card>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default AddressRadioDistance;
