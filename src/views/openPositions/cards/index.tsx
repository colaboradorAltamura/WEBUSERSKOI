import { Icon } from '@iconify/react';
import { Box, Button, capitalize, Card, CardActions, CardContent, Divider, Grid, Typography } from '@mui/material';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDynamics } from 'src/hooks/useDynamics';
import {
  CMSCollections,
  IOpenPosition,
  IOpenPositionWorker,
  OpenPositionAsignmentStatusTypes,
  UserDefinedRols,
} from 'src/types/@autogenerated';
import CustomAvatar from 'src/@core/components/mui/avatar';
import { useRouter } from 'next/router';
import { dynamicCreate, dynamicGet } from 'src/services/entitiesDynamicServices';
import { handleError, hasRole, nameof } from 'src/@core/coreHelper';
import Loader from 'src/@core/components/loader';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { AppRols } from 'src/types/appRols';
import DialogAction from 'src/@core/components/custom-dialog-action';

interface PropsType {
  openPositions: any;
  showItems?: number;
  workerId: string | undefined;
  toggle: () => Promise<any>;
}

interface IOpenPositionResponse extends IOpenPosition {
  applied: boolean;
}
const OpenPositionCards = ({ openPositions, showItems, workerId, toggle }: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const router = useRouter();
  const currentUser = useCurrentUser();

  // ** State
  const [entitiesData, setEntitiesData] = useState<IOpenPosition[]>(openPositions);
  const [entitiesDataResponse, setEntitiesDataResponse] = useState<IOpenPositionResponse[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [toggleData, setToggleData] = useState<boolean>(false);

  //apply actions
  const [applyDialogShow, setApplyDialogShow] = useState<boolean>(false);
  const [openPositionAppliedId, setOpenPositionAppliedId] = useState<string | undefined>();
  const [textConfirmOpenpositionApplied, setTextConfirmOpenpositionApplied] = useState<string>('');

  useEffect(() => {
    setEntitiesData(openPositions);

    const doAsync = async () => {
      try {
        setIsLoading(true);

        //si se necesita mostrar una cantidad especifica de cards
        if (!showItems) setEntitiesDataResponse(openPositions);
        else setEntitiesDataResponse(openPositions.slice(0, showItems));

        setIsLoading(false);
      } catch (error) {
        handleError(error);
        setIsLoading(false);
      }
    };
    doAsync();
  }, [openPositions]);

  const handleOpenPositionApply = async () => {
    try {
      if (!openPositionAppliedId || !workerId) throw new Error('missing worker/openposition');
      setIsLoading(true);

      const formData = {
        order: 1,
        assignmentStatus: OpenPositionAsignmentStatusTypes.INTERESTED,
        userId: workerId,
        openPositionId: openPositionAppliedId,
      } as IOpenPositionWorker;

      const response = await dynamicCreate({
        params: `/cms/${CMSCollections.OPEN_POSITION_WORKERS}/`,
        data: formData,
      });

      toggle(); //toggle
      setIsLoading(false);
    } catch (error) {
      setIsLoading(false);
      handleError(error);
    }
  };

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS))
    );
  };

  const applyDialogClose = () => {
    return setApplyDialogShow(false);
  };

  const applyDialogOpen = (openPositionName: string, id: string | undefined) => {
    setOpenPositionAppliedId(id);
    setTextConfirmOpenpositionApplied(openPositionName);
    setApplyDialogShow(true);
  };

  //corta el texto de la description de cada card
  const setTextLength = (textToShow: string) => {
    const length = 150;

    return textToShow.length > length ? textToShow.substring(0, length - 3) + '...' : textToShow;
  };
  const OpenCards = () => {
    if (isLoading)
      return (
        <>
          <Grid container direction='row' justifyContent='center' alignItems='center'>
            <Grid
              sx={{
                display: 'flex',
                textAlign: 'center',
                alignItems: 'center',
                flexDirection: 'column',
                p: (theme) => `${theme.spacing(9.75, 5, 9.25)} !important`,
              }}
            >
              <Loader />
            </Grid>
          </Grid>
        </>
      );

    if (!entitiesData || entitiesData.length == 0) {
      return (
        <>
          <Grid container direction='row' justifyContent='center' alignItems='center'>
            <Grid
              sx={{
                display: 'flex',
                textAlign: 'center',
                alignItems: 'center',
                flexDirection: 'column',
                p: (theme) => `${theme.spacing(9.75, 5, 9.25)} !important`,
              }}
            >
              <CustomAvatar skin='light' variant='rounded' color='info' sx={{ mb: 3.5, width: 35, height: 35 }}>
                <Icon icon={'tabler:alert-small'} fontSize={'3.75rem'} />
              </CustomAvatar>
              <Typography>{t('no vacants to show')}</Typography>
            </Grid>
          </Grid>
        </>
      );
    }

    return (
      <>
        {entitiesDataResponse.map((data: IOpenPositionResponse, index: number) => {
          return (
            <Grid item sm={4} key={index}>
              <Card>
                <CardContent
                  sx={{
                    p: (theme) => `${theme.spacing(3, 5.25, 4)} !important`,
                    maxHeight: '250px',
                    minHeight: '250px',
                  }}
                >
                  <Typography variant='h5' sx={{ mb: 2 }}>
                    {capitalize(data.name)}
                  </Typography>
                  <Box
                    sx={{
                      mb: 1.75,
                      display: 'flex',
                      alignItems: 'center',
                      '& svg': { color: 'info.main', mr: 1.75 },
                    }}
                  >
                    <Icon icon='tabler:map-pin-filled' fontSize={12} />
                    <Typography fontSize={12} sx={{ color: 'text.secondary' }}>
                      {capitalize(data.jobZone)}
                    </Typography>
                  </Box>
                  <Divider sx={{ my: '0 !important' }} />
                  <Typography sx={{ color: 'text.secondary', marginTop: '15px' }}>
                    {setTextLength(data.jobDescription)}
                  </Typography>
                </CardContent>
                <CardActions className='card-action-dense'>
                  <Button
                    onClick={() => {
                      router.push(`/vacants/${data.id}`);
                    }}
                  >
                    {capitalize(t('see more'))}
                  </Button>
                  {isPermittedByRol() ? (
                    <>
                      {data.applied ? (
                        <Button color='secondary' variant='tonal' size='small'>
                          {capitalize(t('applied'))}
                        </Button>
                      ) : (
                        <Button
                          color='error'
                          variant='contained'
                          size='small'
                          onClick={() => {
                            applyDialogOpen(data.name, data.id);
                          }}
                        >
                          {capitalize(t('apply'))}
                        </Button>
                      )}
                    </>
                  ) : (
                    ''
                  )}
                </CardActions>
              </Card>
            </Grid>
          );
        })}
      </>
    );
  };

  return (
    <>
      <DialogAction
        show={applyDialogShow}
        title='open position applying'
        text={textConfirmOpenpositionApplied}
        textButtonSubmit='apply'
        colorButtonSubmit='primary'
        onClickSubmit={() => handleOpenPositionApply()}
        onClickClose={() => applyDialogClose()}
      />

      <Grid container spacing={6} sx={{ minHeight: '295px' }}>
        <OpenCards />
      </Grid>
    </>
  );
};

export default OpenPositionCards;
