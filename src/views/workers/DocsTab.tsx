// ** MUI Imports
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
// ** Custom Components Imports
import { useEffect, useState } from 'react';
import { handleError, hasRole, nameof } from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { CMSCollections, IAddress, IUsersAddress, IWorker } from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import Loader from 'src/@core/components/loader';
import { dynamicUpdate } from 'src/services/entitiesDynamicServices';
import DynamicFormComponent from '../components/dynamics/DynamicFormComponent';
import { Form, Formik } from 'formik';
import { DynamicComponentTypes } from 'src/types/dynamics';
import { Box } from '@mui/system';
import { Button, capitalize, Card, CardContent } from '@mui/material';
import { Icon } from '@iconify/react';
import * as yup from 'yup';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  workerDataArg: IWorker;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdateWorker: () => Promise<any>;
}

const STEP_VALIDATIONS = yup.object().shape({});
const DocsTab = ({ docId, schemaArg, workerDataArg, schemaFieldsArg, onUpdateWorker }: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const win: any = window;

  // ** State
  const [loading, setLoading] = useState<boolean>(false);
  const [initialValues, setInitialValues] = useState<IWorker>(workerDataArg);
  const [submitError, setSubmitError] = useState<any>(null);

  const handleSubmit = async (values: any, actions: any) => {
    try {
      if (
        !values[nameof<IWorker>('curriculum')] ||
        !values[nameof<IWorker>('identification')] ||
        !values[nameof<IWorker>('taxInscription')] ||
        !values[nameof<IWorker>('civilLiabilityInsurancePolicy')] ||
        !values[nameof<IWorker>('criminalRecord')]
      )
        throw new Error(t('files missing') as string);

      setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];

        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });

      setInitialValues(itemValues);
      updateWorker(itemValues);
      await onUpdateWorker();

      actions.setSubmitting(false);
    } catch (e) {
      handleError(e);
      setSubmitError(e);
      actions.setSubmitting(false);
    }
  };

  const updateWorker = async (formData: IWorker) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${CMSCollections.WORKERS}/mine/` + docId,
      data: formData,
    });
  };

  if (loading) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardContent>
            <Formik
              enableReinitialize={true}
              initialValues={initialValues}
              validationSchema={STEP_VALIDATIONS}
              onSubmit={handleSubmit}
            >
              {({ values, errors, touched, isSubmitting, setValues }) => {
                return (
                  <Form id={'stepDocsWorkerForm'} autoComplete='off'>
                    <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important`, marginBottom: '10px' }}>
                      <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                        <Button variant='contained' type='submit' disabled={isSubmitting} sx={{ '& svg': { ml: 2 } }}>
                          {capitalize(t('save') as string)}
                          <Icon fontSize='1.125rem' icon='tabler:check' />
                        </Button>
                      </Box>
                    </Grid>
                    <Grid item sm={12} md={12} xs={12}>
                      <Grid container spacing={5} sx={{ mb: 4 }}>
                        <Grid item xs={12} sm={6}>
                          <DynamicFormComponent
                            component={{
                              id: 'curriculum',
                              name: 'curriculum',
                              label: t('curriculum worker') as string,
                              type: DynamicComponentTypes.FILE_UPLOADER,
                              dimensions: { xs: 12, sm: 12 },
                            }}
                            isCreating={false}
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <DynamicFormComponent
                            component={{
                              id: 'identification',
                              name: 'identification',
                              label: t('identificationType worker') as string,
                              type: DynamicComponentTypes.FILE_UPLOADER,
                              dimensions: { xs: 12, sm: 12 },
                            }}
                            isCreating={false}
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <DynamicFormComponent
                            component={{
                              id: 'taxInscription',
                              name: 'taxInscription',
                              label: t('taxInscription worker') as string,
                              type: DynamicComponentTypes.FILE_UPLOADER,
                              dimensions: { xs: 12, sm: 12 },
                            }}
                            isCreating={false}
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <DynamicFormComponent
                            component={{
                              id: 'civilLiabilityInsurancePolicy',
                              name: 'civilLiabilityInsurancePolicy',
                              label: t('civilLiabilityInsurancePolicy worker') as string,
                              type: DynamicComponentTypes.FILE_UPLOADER,
                              dimensions: { xs: 12, sm: 12 },
                            }}
                            isCreating={false}
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <DynamicFormComponent
                            component={{
                              id: 'criminalRecord',
                              name: 'criminalRecord',
                              label: t('criminalRecord worker') as string,
                              type: DynamicComponentTypes.FILE_UPLOADER,
                              dimensions: { xs: 12, sm: 12 },
                            }}
                            isCreating={false}
                          />
                        </Grid>
                      </Grid>
                    </Grid>
                  </Form>
                );
              }}
            </Formik>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default DocsTab;
