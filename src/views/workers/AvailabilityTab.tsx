// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

import { Button, capitalize } from '@mui/material';
import { useState } from 'react';
import { handleError } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { updateEntityDataBySchema } from '../components/dynamics/helpers';
import { IWorker } from 'src/types/@autogenerated';

import { IAvailabilityWeek } from 'src/types/workers';
import TimeRangePickers from 'src/pages/components/timeRangePickers';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  workerDataArg: IWorker;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdatWorker: () => Promise<any>;
}

const AvailabilityTab = ({
  docId,
  schemaArg,
  workerDataArg,
  schemaFieldsArg,
  onUpdatWorker: onUpdateWorker,
}: PropsType) => {
  // ** Hooks
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [edit, setEdit] = useState<boolean>(false);
  const [availabilityWeek, setAvailabilityWeek] = useState<IAvailabilityWeek[]>(workerDataArg?.availabilityWeek);
  const [key, setKey] = useState(0);

  const handleOnEntityEdit = () => {
    setEdit(true);
  };

  const handleOnCancelEdit = () => {
    setAvailabilityWeek(workerDataArg?.availabilityWeek || []);
    setKey(key + 1);
    setEdit(false);
  };

  const handleOnEditSubmit = async () => {
    try {
      setLoadingData(true);

      if (!schemaArg || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      // removes empty days, only stores days with time ranges
      const weekToStore = availabilityWeek.filter((week) => week.timeRanges.length > 0);

      const formData = { availabilityWeek: weekToStore };
      await updateEntityDataBySchema(currentUser.currentUser, schemaArg, schemaFieldsArg, docId, formData, null, null);

      await onUpdateWorker();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('availability'))}
            action={
              edit ? (
                <>
                  <Button
                    variant='contained'
                    onClick={() => {
                      handleOnEditSubmit();
                    }}
                    sx={{ mr: 4 }}
                  >
                    {capitalize(t('save'))}
                  </Button>
                  <Button
                    variant='contained'
                    onClick={() => {
                      handleOnCancelEdit();
                    }}
                    sx={{ mr: 4 }}
                  >
                    {capitalize(t('cancel'))}
                  </Button>
                </>
              ) : (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit();
                  }}
                  sx={{ mr: 4 }}
                >
                  {capitalize(t('edit'))}
                </Button>
              )
            }
          />
          <CardContent>
            <TimeRangePickers
              key={key}
              edit={edit}
              onEdit={(edit: boolean) => setEdit(edit)}
              workerAvailabilityWeek={availabilityWeek}
              onAvailabilityWeekChange={setAvailabilityWeek}
            />
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default AvailabilityTab;
