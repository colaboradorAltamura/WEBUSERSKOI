// ** MUI Imports
import Grid from '@mui/material/Grid';
// ** Custom Components Imports
import { useState } from 'react';
import Loader from 'src/@core/components/loader';
import { handleError } from 'src/@core/coreHelper';
import { dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { CMSCollections, IAddress, IUsersAddress, IWorker } from 'src/types/@autogenerated';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import AddressRadioDistance from '../address/radioDistance';
import { useCurrentUser } from 'src/hooks/useCurrentUser';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  workerDataArg: IWorker;
  schemaFieldsArg: IEntitySchemaField[];
  primaryAddressArg: IUsersAddress | null;
  onUpdateWorker: () => Promise<any>;
}

const AddressTab = ({
  docId,
  schemaArg,
  workerDataArg,
  schemaFieldsArg,
  primaryAddressArg,
  onUpdateWorker,
}: PropsType) => {
  // ** Hooks
  const currentUser = useCurrentUser();

  // ** State
  const [workerData, setWorkerData] = useState<IWorker>(workerDataArg);
  const [addressData, setAddressData] = useState<IUsersAddress | null>(primaryAddressArg);
  const [loading, setLoading] = useState<boolean>(false);

  const saveLocation = async (addressForm: IAddress, maxDistanceForm: number) => {
    try {
      setLoading(true);
      if (!addressData) return;

      const addressValues = { ...addressData };

      addressValues.address = addressForm;

      await updateWorker({ maxDistance: maxDistanceForm });
      await updateAddressEntity(addressValues);
      onUpdateWorker();

      setLoading(false);
    } catch (e) {
      setLoading(false);
      handleError(e);
    }
  };

  const updateWorker = async (formData: any) => {
    let response = null;

    if (currentUser.currentUser && currentUser.currentUser.id === docId) {
      response = await dynamicUpdate({
        params: `/cms/${CMSCollections.WORKERS}/mine/` + docId,
        data: formData,
      });
    } else {
      response = await dynamicUpdate({
        params: `/cms/${CMSCollections.WORKERS}/` + docId,
        data: formData,
      });
    }
  };

  const updateAddressEntity = async (formData: IUsersAddress) => {
    let response = null;

    console.log(formData);

    if (currentUser.currentUser && currentUser.currentUser.id === docId) {
      response = await dynamicUpdate({
        params: '/cms/' + CMSCollections.USERS_ADDRESSES + '/mine/' + formData.id,
        data: formData,
      });
    } else {
      response = await dynamicUpdate({
        params: '/cms/' + CMSCollections.USERS_ADDRESSES + '/' + formData.id,
        data: formData,
      });
    }
  };

  if (loading) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <AddressRadioDistance
          primaryAddress={addressData?.address ?? null}
          defaultDistance={workerData.maxDistance ?? 0}
          onSaveLocation={saveLocation}
        />
      </Grid>
    </Grid>
  );
};

export default AddressTab;
