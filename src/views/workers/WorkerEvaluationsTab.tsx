// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import { Box, Button, Divider, IconButton, Tooltip, Typography, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import {
  getSourceEntityData,
  handleError,
  hasRole,
  nameof,
  parseDateToDateTimeString,
  parseDateToShortString,
} from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import {
  CMSCollections,
  IWorkerEvaluation,
  IWorker,
  IWorkerEvaluationScore,
  WorkerEvaluationStates,
} from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { IForm } from 'src/types/dynamics';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import CustomTextField from 'src/@core/components/mui/text-field';
import { dynamicCreate, dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import WorkerEvaluationForm from 'src/pages/workerEvaluations/form';
import { Icon } from '@iconify/react';
import WorkerEvaluationDetails from 'src/pages/workerEvaluations/details';
import { IUser } from 'src/types/users';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  workerDataArg: IWorker;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdateWorker: () => Promise<any>;
}

interface IWorkerEvaluationsRow extends IWorkerEvaluation {
  showRow: boolean;
  evaluatorFirstName: string;
  evaluatorLastName: string;
}
interface CellType {
  row: IWorkerEvaluationsRow;
}

const WorkerEvaluationsTab = ({ docId, schemaArg, workerDataArg, schemaFieldsArg }: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema>(schemaArg);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>(schemaFieldsArg);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);
  const [workerEvaluationData, setWorkerEvaluationData] = useState<IWorkerEvaluation>();

  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [relativeData, setRelativeData] = useState<IWorkerEvaluationsRow>();
  const [entitiesData, setEntitiesData] = useState<IWorkerEvaluationsRow[]>([]);

  //- details
  const [workerEvaluationDetailsShow, setWorkerEvaluationDetailsShow] = useState<boolean>(false);
  const [workerEvaluationDataDetails, setWorkerEvaluationDataDetails] = useState<IWorkerEvaluation>();

  //- form
  const [workerEvaluationFormShow, setWorkerEvaluationFormShow] = useState<boolean>(false);
  const toggleSideDrawer = () => setWorkerEvaluationFormShow(!workerEvaluationFormShow);

  //- grid
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_CLINIC))
    );
  };

  const updateColumnsData = () => {
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='View Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                handleViewContent(row);
              }}
            >
              <Icon icon='tabler:eye' />
            </IconButton>
          </Tooltip>
          <Tooltip title='edit Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                handleEdit(row);
              }}
            >
              <Icon icon='tabler:edit' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'Name',
      headerName: capitalize(t('evaluator')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.evaluatorFirstName}
              </Typography>
              <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                {row.evaluatorLastName}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'evaluatorRole',
      headerName: capitalize(t('role')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.evaluatorRole}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'state',
      headerName: t('state') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {t(row.evaluationState)}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'date',
      headerName: capitalize(t('date')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {parseDateToShortString(row.createdAt)}
              </Typography>
            </Box>
          </>
        );
      },
    });
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'updateAt',
      headerName: capitalize(t('updateAt')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {parseDateToDateTimeString(row.updatedAt as any)}
              </Typography>
            </Box>
          </>
        );
      },
    });
    setColumns(columnsData);
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.WORKER_EVALUATIONS;
        });
        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.WORKER_EVALUATIONS);

        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);
        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, [dynamics.isLoadingSchemas]);

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields]);

  // Fetch schema.collectionName
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        setLoadingData(true);

        const data: any = await dynamicGet({
          params:
            '/cms/' +
            CMSCollections.WORKER_EVALUATIONS +
            '/by-prop/' +
            nameof<IWorkerEvaluation>('userId') +
            '/' +
            workerDataArg.id,
        });

        const posts = await Promise.all(
          data.items.map(async (evaluations: IWorkerEvaluation) => {
            const evaluatorBasicData = getEvaluatorInfo(evaluations);

            return {
              showRow: true,
              evaluatorFirstName: evaluatorBasicData?.firstName,
              evaluatorLastName: evaluatorBasicData?.lastName,
              ...evaluations,
            };
          }) as IWorkerEvaluationsRow[]
        );
        setEntitiesData(posts);

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, toggleData]);

  const getEvaluatorInfo = (evaluation: IWorkerEvaluation) => {
    if (!evaluation) return;

    const sourceData = getSourceEntityData({
      obj: evaluation,
      key: nameof<IWorkerEvaluation>('evaluatorId'),
    });

    if (!sourceData) return;

    return sourceData as IUser;
  };

  const handleOnSubmit = async (
    workerEvaluationForm: any,
    goalScoreForm: IWorkerEvaluationScore[],
    isCreating: boolean
  ) => {
    try {
      setLoadingData(true);

      const workerEvaluationValues = { ...workerEvaluationForm };
      const questionsScoreValues = goalScoreForm;

      if (questionsScoreValues.length == 0) throw new Error('Missing questions type');
      if (isCreating) {
        //insertarmos primero la worker evaluation
        const workerEvaluationResponse = await createEntity(workerEvaluationValues, CMSCollections.WORKER_EVALUATIONS);

        //si esta todo ok, insertarmos cada goal con su score
        if (workerEvaluationResponse && workerEvaluationResponse.id) {
          questionsScoreValues.map((question: IWorkerEvaluationScore) => {
            //por cada goal, le asignamos el id de la evaluacion
            question.workerEvaluationId = workerEvaluationResponse.id;
            //inserta cada goal
            const questionsWorker = createEntity(question, CMSCollections.WORKER_EVALUATION_SCORES);
          });
        }
      } else {
        //update primero la evaluacion
        const workerEvaluationResponse = await updateEntity(
          workerEvaluationValues,
          CMSCollections.WORKER_EVALUATIONS,
          workerEvaluationValues.id
        );

        questionsScoreValues.map(async (question: IWorkerEvaluationScore) => {
          if (question.id) {
            await updateEntity(question, CMSCollections.WORKER_EVALUATION_SCORES, question.id);
          }
        });
      }

      // refresco la tabla
      setToggleData(!toggleData);

      // cierro modal
      setWorkerEvaluationFormShow(false);
      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const handleEdit = (row: IWorkerEvaluationsRow) => {
    setWorkerEvaluationData(row);
    setWorkerEvaluationFormShow(true);
    setIsCreating(false);
  };

  const createEntity = async (formData: any, schema: string) => {
    let response = null;

    response = await dynamicCreate({
      params: `/cms/${schema}/`,
      data: formData,
    });

    return response;
  };
  const updateEntity = async (formData: any, schema: string, id: string) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${schema}/` + id,
      data: formData,
    });

    return response;
  };

  const handleViewContent = (row: IWorkerEvaluationsRow) => {
    const workerEvaluationDetails = { ...row } as IWorkerEvaluationsRow;
    setWorkerEvaluationDataDetails(workerEvaluationDetails);
    setWorkerEvaluationDetailsShow(true);
  };

  const setNewWorkerEvaluation = () => {
    const newWorkerEvaluation = {
      evaluationDate: new Date(),
      evaluationState: WorkerEvaluationStates.PENDING,
      evaluatorId: '',
      evaluatorRole: '',
      userId: docId, //id del worker
    } as IWorkerEvaluation;

    return newWorkerEvaluation;
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader sx={{}} title={capitalize(t('evaluations'))} />
          <CardContent>
            <Grid container spacing={6}></Grid> <Divider sx={{ m: '0 !important' }} />
            <Box
              sx={{
                py: 4,
                px: 6,
                rowGap: 2,
                columnGap: 4,
                display: 'flex',
                flexWrap: 'wrap',
                alignItems: 'center',

                justifyContent: 'right',
              }}
            >
              <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
                <CustomTextField
                  sx={{ mr: 5 }}
                  placeholder={capitalize(t('search placeholder'))}
                  onChange={(e) => setSearchText(e.target.value)}
                />
                {isPermittedByRol() && (
                  <Button
                    onClick={() => {
                      setIsCreating(true);
                      setWorkerEvaluationFormShow(true);
                      setWorkerEvaluationData(setNewWorkerEvaluation());
                    }}
                    variant='contained'
                    sx={{ '& svg': { mr: 2 } }}
                  >
                    <Icon fontSize='1.125rem' icon='tabler:plus' />
                    {capitalize(t('new evaluation'))}
                  </Button>
                )}
              </Box>
            </Box>
            <DataGrid
              autoHeight
              rows={entitiesData.filter((item) => {
                if (item) return item.showRow;
              })}
              rowHeight={60}
              loading={loadingData}
              columns={columns}
              initialState={{
                columns: {
                  columnVisibilityModel: {
                    id: false,
                  },
                },
              }}
              disableRowSelectionOnClick
              pageSizeOptions={[7, 10, 25, 50]}
              paginationModel={paginationModel}
              onPaginationModelChange={setPaginationModel}
            />
          </CardContent>
        </Card>
        {!!workerEvaluationFormShow && !!workerEvaluationData && !!entitySchema && (
          <WorkerEvaluationForm
            docId={docId}
            formId={'new_workerEvaluation'}
            preloadForm={null}
            open={workerEvaluationFormShow}
            onSubmit={handleOnSubmit}
            onSubmitDone={handleOnSubmit}
            onClose={() => setWorkerEvaluationFormShow(false)}
            title={t(isCreating ? 'new worker evaluation' : 'edit worker evaluation') as string}
            initialValues={workerEvaluationData}
            isCreating={isCreating}
          ></WorkerEvaluationForm>
        )}

        {!!workerEvaluationDetailsShow && !!workerEvaluationDataDetails && (
          <WorkerEvaluationDetails
            docId={docId}
            open={workerEvaluationDetailsShow}
            onClose={() => setWorkerEvaluationDetailsShow(false)}
            title={t('details worker evaluation') as string}
            initialValues={workerEvaluationDataDetails}
          ></WorkerEvaluationDetails>
        )}
      </Grid>
    </Grid>
  );
};

export default WorkerEvaluationsTab;
