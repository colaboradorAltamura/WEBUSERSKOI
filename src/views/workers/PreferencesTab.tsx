// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

import { Button, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import TextInfo from 'src/@core/components/custom-text-info';
import { handleError, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { getEditEntityForm, schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { IWorker } from 'src/types/@autogenerated';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  workerDataArg: IWorker;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdateWorker: () => Promise<any>;
}

const PreferencesTab = ({
  docId,
  schemaArg,
  workerDataArg,
  schemaFieldsArg,
  onUpdateWorker: onUpdateWorker,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema>(schemaArg);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>(schemaFieldsArg);
  const [entityData, setEntityData] = useState<IWorker>(workerDataArg);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [address, setAddress] = useState<string>('');

  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);

  const toggleEditDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  // **

  const handleOnEntityEdit = () => {
    try {
      if (!entitySchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IWorker>('educationalLevel'),
        nameof<IWorker>('certificates'),
        nameof<IWorker>('pathologiesExperience'),
        nameof<IWorker>('yearsExperience'),
        nameof<IWorker>('pathologiesPreference'),
        nameof<IWorker>('agePreference'),
      ];

      const toShowFields = entitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(schemaArg, toShowFields, null, dynamics);
      setEditEntityForm(theForm);

      setEditSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  const handleOnEditSubmit = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!entitySchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditSidebarOpen(false);

      await onUpdateWorker();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('experience and job preferences'))}
            action={
              <Button
                variant='contained'
                onClick={() => {
                  handleOnEntityEdit();
                }}
                sx={{ mr: 4, mb: [2, 0] }}
              >
                {capitalize(t('edit'))}
              </Button>
            }
          />
          <CardContent>
            <Grid container spacing={4}>
              <Grid item xs={12} md={12}>
                <TextInfo title={'educationalLevel'} value={entityData.educationalLevel}></TextInfo>
                <TextInfo title={'degree certificates'} value={entityData.certificates}></TextInfo>
                <TextInfo title={'pathologiesExperience'} value={entityData.pathologiesExperience}></TextInfo>
                <TextInfo title={'yearsExperience'} value={entityData.yearsExperience}></TextInfo>
                <TextInfo title={'pathologiesPreference'} value={entityData.pathologiesPreference}></TextInfo>
                <TextInfo title={'agePreference'} value={entityData.agePreference}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {!!editSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit}
            title={'Edit ' + entitySchema?.name}
            formId={'Edit_' + entitySchema?.name}
            initialValues={entityData}
            preloadForm={editEntityForm}
            open={editSidebarOpen}
            toggle={toggleEditDrawer}
            onSubmitDone={() => {
              toggleEditDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default PreferencesTab;
