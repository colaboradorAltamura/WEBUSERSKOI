// ** MUI Imports
import * as Yup from 'yup';
import { Icon } from '@iconify/react';
import { Accordion, AccordionDetails, AccordionSummary, Box, Button, Grid, Typography } from '@mui/material';
import { Form, Formik } from 'formik';
import DatePicker, { ReactDatePickerProps } from 'react-datepicker';
import { capitalize } from 'src/@core/coreHelper';
import { DynamicComponentTypes } from 'src/types/dynamics';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import moment from 'moment';

// ** Custom Components Imports
import { IPatientsSchedule } from 'src/types/@autogenerated';
import { useTranslation } from 'react-i18next';
import CustomTextField from 'src/@core/components/mui/text-field';
import { forwardRef } from 'react';

type PickerProps = {
  label?: string;
};

interface PropsType {
  onPatientScheduleCreate: (patientSchedule: IPatientsSchedule) => void;
}

const AddNewPatientScheduleModal = ({ onPatientScheduleCreate }: PropsType) => {
  const STEP_VALIDATIONS = Yup.object().shape({
    generalNotes: Yup.string().required('Field is required'),
    globalScore: Yup.number().required('Field is required'),

    checkIn: Yup.string().required('start time cannot be empty'),
    checkOut: Yup.string()
      .required('end time cannot be empty')
      .test('is-greater', 'end time should be greater', function (value) {
        const { checkIn } = this.parent;

        return moment(value).isAfter(moment(checkIn));
      }),
  });

  const PickersComponent = forwardRef(({ ...props }: PickerProps, ref) => {
    // ** Props
    const { label } = props;
    const { t } = useTranslation();

    return <CustomTextField fullWidth {...props} inputRef={ref} label={t(label as string) || ''} />;
  });
  // ** Hooks
  const { t } = useTranslation();

  // ** State

  const handleOnSubmit = () => {
    alert('asd');
  };

  const popperPlacement: ReactDatePickerProps['popperPlacement'] = 'bottom-start';
  const isCreating = false;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Formik
          enableReinitialize={true}
          initialValues={{} as IPatientsSchedule}
          validationSchema={STEP_VALIDATIONS}
          onSubmit={handleOnSubmit}
        >
          {({ values, errors, touched, isSubmitting, setValues }) => (
            <Form id={'dailyReportBasicDataForm'} autoComplete='off'>
              <Grid item xs={12} md={12} lg={12} sx={{ marginTop: '15px' }}>
                <Grid item sm={12} md={12} xs={12}>
                  <Grid container spacing={5} sx={{ mb: 4 }}>
                    <Grid item xs={12} md={12} sm={12}>
                      <DynamicFormComponent
                        component={{
                          readOnly: { create: true, edit: true },
                          id: 'eventDate',
                          name: 'eventDate',
                          label: t('event date') as string,
                          type: DynamicComponentTypes.FORM_DATE,
                          dimensions: { xs: 12, sm: 12 },
                          errorMsg: t('field required msj') as string,
                        }}
                        isCreating={isCreating}
                      />
                    </Grid>

                    {/* <Grid item xs={12} md={6} sm={6}>
                      <DatePicker
                        showTimeSelect
                        // selected={values. ? new Date(values.checkIn) : new Date()}
                        timeIntervals={60}
                        showTimeSelectOnly
                        dateFormat='h:mm aa'
                        id='checkIn'
                        popperPlacement={popperPlacement}
                        // onChange={(date: Date) =>
                        // setValues({
                        //   ...values,
                        //   checkIn: date,
                        // })
                        // }
                        customInput={<PickersComponent label={'checkIn'} />}
                      />
                    </Grid>

                    <Grid item xs={12} md={6} sm={6}>
                      <DatePicker
                        showTimeSelect
                        // selected={values.checkOut ? new Date(values.checkOut) : new Date()}
                        timeIntervals={60}
                        showTimeSelectOnly
                        dateFormat='h:mm aa'
                        id='checkOut'
                        popperPlacement={popperPlacement}
                        // onChange={(date: Date) =>
                        // setValues({
                        //   ...values,
                        //   checkOut: date,
                        // })
                        // }
                        customInput={<PickersComponent label={'checkOut'} />}
                      />
                    </Grid> */}

                    <Grid item xs={12} md={12} sm={12}>
                      <DynamicFormComponent
                        component={{
                          id: 'generalNotes',
                          name: 'generalNotes',
                          label: t('generalNotes') as string,
                          type: DynamicComponentTypes.FORM_TEXT,
                          dimensions: { xs: 12, sm: 12 },
                          errorMsg: t('field required msj') as string,
                        }}
                        isCreating={isCreating}
                      />
                    </Grid>
                    <Grid item xs={12} md={6} sm={6}>
                      <DynamicFormComponent
                        component={{
                          id: 'globalScore',
                          name: 'globalScore',
                          label: t('global score') as string,
                          type: DynamicComponentTypes.FORM_NUMBER,
                          dimensions: { xs: 12, sm: 12 },
                          errorMsg: t('field required msj') as string,
                        }}
                        isCreating={isCreating}
                      />
                    </Grid>
                  </Grid>
                </Grid>

                <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                  <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                    <Button variant='contained' type={'submit'} sx={{ '& svg': { ml: 2 } }}>
                      {capitalize(t('save'))}
                      <Icon fontSize='1.125rem' icon='tabler:check' />
                    </Button>
                  </Box>
                </Grid>
              </Grid>
            </Form>
          )}
        </Formik>
      </Grid>
    </Grid>
  );
};

export default AddNewPatientScheduleModal;
