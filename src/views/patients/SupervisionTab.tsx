// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import { Box, Button, Divider, IconButton, Tooltip, Typography, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { getSourceEntityData, handleError, hasRole, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import {
  CMSCollections,
  IPatient,
  IPatientSupervision,
  IPatientsSchedule,
  PatientSupervisionStates,
} from 'src/types/@autogenerated';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import { Icon } from '@iconify/react';
import CustomTextField from 'src/@core/components/mui/text-field';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { dynamicCreate, dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { is } from 'date-fns/locale';
import { IUser } from 'src/types/users';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  dataArg: IPatient;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
}

interface ISupervisionRow extends IPatientSupervision {
  showRow: boolean;
  supervisor: string;
}
interface CellType {
  row: ISupervisionRow;
}

const SupervisionTab = ({ docId }: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** form
  const [entitySchema, setEntitySchema] = useState<IEntitySchema>();
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>();
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);

  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [supervisionData, setSupervisionData] = useState<ISupervisionRow>();
  const [entitiesData, setEntitiesData] = useState<ISupervisionRow[]>([]);

  //- grid
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');

  // ** supervision
  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);
  const toggleEditDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  const updateColumnsData = () => {
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='edit Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                setIsCreating(false);
                handleEdit(row);
              }}
            >
              <Icon icon='tabler:edit' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'supervisor',
      headerName: t('supervisor') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.supervisor}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'status',
      headerName: capitalize(t('status')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.supervisionState}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'date',
      headerName: capitalize(t('date')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {parseDateToShortString(row.supervisionDate)}
              </Typography>
            </Box>
          </>
        );
      },
    });

    setColumns(columnsData);
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.PATIENT_SUPERVISION;
        });
        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.PATIENT_SUPERVISION);

        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);
        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, [dynamics.isLoadingSchemas]);

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields]);

  // Fetch schema.collectionName
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        setLoadingData(true);

        // getting data by patient Id
        const data: any = await dynamicGet({
          params:
            '/cms/' +
            CMSCollections.PATIENT_SUPERVISION +
            '/by-prop/' +
            nameof<IPatientSupervision>('userId') +
            '/' +
            docId, // by PatientId
        });

        if (data && data.items) {
          const supervisions = data.items;

          //obtenemos el nombre y el apellido de clinica
          const posts = await Promise.all(
            supervisions.map(async (supervisionData: IPatientSupervision) => {
              const supervisorData = await getSupervisorData(supervisionData);

              return {
                showRow: true,
                supervisor: supervisorData ? `${supervisorData.firstName} ${supervisorData.lastName}` : '',
                ...supervisionData,
              } as ISupervisionRow;
            }) as ISupervisionRow[]
          );

          console.log(posts);
          setEntitiesData(posts);
        }

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, toggleData]);

  //obtiene la data del usuario de clinica
  const getSupervisorData = async (supervision: IPatientSupervision) => {
    if (!supervision) return '';
    const sourceData = getSourceEntityData({
      obj: supervision,
      key: nameof<IPatientSupervision>('clinicId'),
    });
    if (sourceData) return sourceData as IUser;
  };

  const setNewSupervision = () => {
    return {
      supervision: '',
      supervisionState: PatientSupervisionStates.COMPLETED,
      userId: docId,
    } as ISupervisionRow;
  };

  const handleEdit = (row: ISupervisionRow) => {
    handleOnEntityEdit();
    setSupervisionData(row);
    setEditSidebarOpen(true);
  };

  const handleOnEntityEdit = () => {
    try {
      if (!entitySchema || !entitySchemaFields) throw new Error('missing entitySchema/entitySchemaFields');

      const fieldsNames = [
        nameof<IPatientSupervision>('supervision'),
        nameof<IPatientSupervision>('supervisionDate'),
        nameof<IPatientSupervision>('supervisionState'),
        //  nameof<IPatientSupervision>('clinicId'),
      ];

      const toShowFields = entitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(entitySchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  const handleOnEditSubmit = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!entitySchema || !currentUser.currentUser || !entitySchemaFields)
        throw new Error('Missing entitySchema/currentUser.currentUser/entitySchemaFields');

      const itemValues = { ...formData };
      itemValues['clinicId'] = currentUser.currentUser.id;

      if (isCreating || !itemValues.id) {
        //creates doc
        const response = await dynamicCreate({
          params: `/cms/${CMSCollections.PATIENT_SUPERVISION}/`,
          data: itemValues,
        });
      } else {
        const response = await dynamicUpdate({
          params: `/cms/${CMSCollections.PATIENT_SUPERVISION}/` + itemValues.id,
          data: itemValues,
        });
      }
      // cierro sidebar
      setEditSidebarOpen(false);

      //toggle
      setToggleData(true);

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_CLINIC))
    );
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader sx={{}} title={capitalize(t('supervision'))} />
          <CardContent>
            <Grid container spacing={6}></Grid> <Divider sx={{ m: '0 !important' }} />
            <Box
              sx={{
                py: 4,
                px: 6,
                rowGap: 2,
                columnGap: 4,
                display: 'flex',
                flexWrap: 'wrap',
                alignItems: 'center',

                justifyContent: 'right',
              }}
            >
              <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
                <CustomTextField
                  sx={{ mr: 5 }}
                  placeholder={capitalize(t('search placeholder'))}
                  onChange={(e) => setSearchText(e.target.value)}
                />
                {isPermittedByRol() && (
                  <Button
                    onClick={() => {
                      setIsCreating(true);
                      handleEdit(setNewSupervision());
                    }}
                    variant='contained'
                    sx={{ '& svg': { mr: 2 } }}
                  >
                    <Icon fontSize='1.125rem' icon='tabler:plus' />
                    {capitalize(t('new supervision'))}
                  </Button>
                )}
              </Box>
            </Box>
            <DataGrid
              autoHeight
              rows={entitiesData.filter((item) => {
                if (item) return item.showRow;
              })}
              rowHeight={60}
              loading={loadingData}
              columns={columns}
              initialState={{
                columns: {
                  columnVisibilityModel: {
                    id: false,
                  },
                },
              }}
              disableRowSelectionOnClick
              pageSizeOptions={[7, 10, 25, 50]}
              paginationModel={paginationModel}
              onPaginationModelChange={setPaginationModel}
            />
          </CardContent>
        </Card>
        {!!editSidebarOpen && (
          <DynamicFormSidebar
            isCreating={isCreating}
            onSubmit={handleOnEditSubmit}
            title={'Edit ' + entitySchema?.name}
            formId={'Edit_' + entitySchema?.name}
            initialValues={supervisionData}
            preloadForm={editEntityForm}
            open={editSidebarOpen}
            toggle={toggleEditDrawer}
            onSubmitDone={() => {
              toggleEditDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default SupervisionTab;
