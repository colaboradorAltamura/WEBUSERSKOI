// ** MUI Imports
import { useState, useEffect, SyntheticEvent } from 'react';
import Card, { CardProps } from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Box,
  Button,
  capitalize,
  Divider,
  IconButton,
  styled,
  Tooltip,
  Typography,
} from '@mui/material';
import TextInfo from 'src/@core/components/custom-text-info';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import Loader from 'src/@core/components/loader';
import { AppRols } from 'src/types/appRols';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { getSourceEntityData, handleError, hasRole, nameof } from 'src/@core/coreHelper';
import {
  IPatientTherapeuticProject,
  IPatient,
  CMSCollections,
  TherapeuticProjectStates,
  IPatientTPGoal,
  IGoalType,
} from 'src/types/@autogenerated';
import { useRouter } from 'next/router';
import { createEntityDataBySchema, schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { Icon } from '@iconify/react';
import CustomTextField from 'src/@core/components/mui/text-field';
import DialogAction from 'src/@core/components/custom-dialog-action';

interface IGoalRow extends IPatientTPGoal {
  showRow: boolean;
  typeFriendlyName: string;
}
interface CellType {
  row: IGoalRow;
}

interface PropsType {
  docId: string;
  patientSchemaArg: IEntitySchema;
  patientDataArg: IPatient;
  patientSchemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
}

//quita el borde a las CARDS
const CustomCard = styled(Card)<CardProps>(({ theme }) => ({
  boxShadow: 'none !important',
}));

const TherapeuticProjectTab = ({
  docId,
  patientSchemaArg,
  patientDataArg,
  patientSchemaFieldsArg,
  onUpdatePatient,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const router = useRouter();

  // ** State
  useState<IEntitySchemaField[]>(patientSchemaFieldsArg);
  const [expanded, setExpanded] = useState<string | false>('therapeuticProjectPanel');
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingSchemaGoals, setLoadingSchemaGoals] = useState<boolean>(true);

  //therapeutic project
  const [therapeuticProjectsEntitySchemaFields, setTherapeuticProjectsEntitySchemaFields] =
    useState<IEntitySchemaField[]>();
  const [therapeuticProjectsEntitySchema, setTherapeuticProjectsEntitySchema] = useState<IEntitySchema>();
  const [therapeuticProjectData, setTherapeuticProjectData] = useState<IPatientTherapeuticProject | null>();
  const [editTherapeuticProjectSideOpen, setEditTherapeuticProjectSideOpen] = useState<boolean>(false);
  const toggleEditTherapeuticProjectDrawer = () => setEditTherapeuticProjectSideOpen(!editTherapeuticProjectSideOpen);
  const [editTherapeuticProjectForm, setEditTherapeuticProjectForm] = useState<IForm | null>(null);
  const [isCreatingTherapeuticProject, setIsCreatingTherapeuticProject] = useState<boolean>(true);

  //Patien Goals
  const [patientGoalsEntitySchemaFields, setPatientGoalsEntitySchemaFields] = useState<IEntitySchemaField[]>();
  const [patientGoalsEntitySchema, setPatientGoalsEntitySchema] = useState<IEntitySchema>();
  const [patientGoalsData, setPatientGoalsData] = useState<IPatientTPGoal | null>();
  const [editPatientGoalsSideOpen, setEditPatientGoalsSideOpen] = useState<boolean>(false);
  const toggleEditPatientGoalsDrawer = () => setEditPatientGoalsSideOpen(!editPatientGoalsSideOpen);
  const [editPatientGoalsForm, setEditPatientGoalsForm] = useState<IForm | null>(null);
  const [isCreatingPatientGoals, setIsCreatingPatientGoals] = useState<boolean>(true);
  const [deleteGoalConfirmShow, setDeleteGoalConfirmShow] = useState<boolean>(false);
  const [patientGoals, setPatientGoals] = useState<IGoalRow[]>([]);

  //- grid
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');

  // ** Effects

  //obtiene el schema y fields de PATIENT_THERAPEUTIC_PROJECT
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        setLoadingSchema(true);
        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.PATIENT_THERAPEUTIC_PROJECT;
        });
        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.PATIENT_THERAPEUTIC_PROJECT);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setTherapeuticProjectsEntitySchema(entitySchemaResponse);
        setTherapeuticProjectsEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, []);

  //obtiene el schema y fields de PATIENT_T_P_GOALS
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        setLoadingSchemaGoals(true);

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.PATIENT_T_P_GOALS;
        });
        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.PATIENT_T_P_GOALS);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setPatientGoalsEntitySchema(entitySchemaResponse);
        setPatientGoalsEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchemaGoals(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, []);

  // Obtenemos todos el proyecto terapeutico relacionados a este patient
  useEffect(() => {
    const doAsync = async () => {
      if (loadingSchemaGoals) return; //si no ha terminado de cargar los schemas
      // Define table columns
      updatePatientGoalsColumnsData();
      setLoadingData(true);
      try {
        const response = await dynamicGet({
          params:
            '/cms/' +
            CMSCollections.PATIENT_THERAPEUTIC_PROJECT +
            '/by-prop/' +
            nameof<IPatientTherapeuticProject>('userId') +
            '/' +
            docId,
        });

        if (!response || !response.items) throw new Error('Invalid response');

        if (response.items[0]) {
          const therapeuticProyectItem = response.items[0];
          //setea la data del proyecto
          setTherapeuticProjectData(therapeuticProyectItem);
          setIsCreatingTherapeuticProject(false);

          //obtnemos los objetivos del paciente segun el proyecto terapeutico
          getPatientGoals(therapeuticProyectItem);
        } else {
          setIsCreatingTherapeuticProject(true);
        }

        setLoadingData(false);
      } catch (e) {
        handleError(e);
        setLoadingData(false);
      }
    };

    doAsync();
  }, [toggleData, loadingSchemaGoals]);

  //obtiene todos los objetivos del proyecto terapeutico
  const getPatientGoals = async (patientTherapeuticProject: IPatientTherapeuticProject) => {
    const goalsResponse = await dynamicGet({
      params:
        '/cms/' +
        CMSCollections.PATIENT_T_P_GOALS +
        '/by-prop/' +
        nameof<IPatientTPGoal>('patientTherapeuticProjectId') +
        '/' +
        patientTherapeuticProject.id,
    });

    //cargamos los objetivos en el state para mostrarlos en la grid
    if (goalsResponse.items) {
      const goalsRow = goalsResponse.items.map((item: IPatientTPGoal) => {
        const friendlyName = getGoalTypeFriendlyName(item);

        return { showRow: true, typeFriendlyName: friendlyName, ...item };
      }) as IGoalRow[];
      setPatientGoals(goalsRow);
    } //
  };

  //obtiene el nombre del tipo de objetivo
  const getGoalTypeFriendlyName = (patientGoalType: IPatientTPGoal) => {
    if (!patientGoalType) return '';
    const sourceData = getSourceEntityData({
      obj: patientGoalType,
      key: nameof<IPatientTPGoal>('goalTypeId'),
    });

    if (!sourceData) return;

    return (sourceData as IGoalType).name;
  };

  // form de proyecto terapeutico
  const onEdit_TherapeuticProject = () => {
    try {
      if (!therapeuticProjectsEntitySchema || !therapeuticProjectsEntitySchemaFields)
        throw new Error('missing entitySchema or entitySchemaFields');
      const fieldsNames = [
        nameof<IPatientTherapeuticProject>('therapeuticProjectState'),
        nameof<IPatientTherapeuticProject>('problem'),
        nameof<IPatientTherapeuticProject>('hypothesis'),
        nameof<IPatientTherapeuticProject>('clinicalContext'),
        nameof<IPatientTherapeuticProject>('actualProject'),
        nameof<IPatientTherapeuticProject>('mainGoal'),
        nameof<IPatientTherapeuticProject>('activityPlan'),
        nameof<IPatientTherapeuticProject>('observations'),
        nameof<IPatientTherapeuticProject>('symptoms'),
      ];

      const toShowFields = therapeuticProjectsEntitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(therapeuticProjectsEntitySchema, toShowFields, null, dynamics);

      setEditTherapeuticProjectForm(theForm);

      setEditTherapeuticProjectSideOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  // submit dell proyecto terapeutico
  const onSubmitTherapeuticProject = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!therapeuticProjectsEntitySchema || !therapeuticProjectsEntitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/currentUser.currentUser');

      if (therapeuticProjectData?.id)
        await updateEntityDataBySchema(
          currentUser.currentUser,
          therapeuticProjectsEntitySchema,
          therapeuticProjectsEntitySchemaFields,
          therapeuticProjectData?.id,
          formData,
          null,
          null
        );
      else {
        formData['userId'] = docId;

        const creationResult = await createEntityDataBySchema(
          currentUser.currentUser,
          therapeuticProjectsEntitySchema,
          therapeuticProjectsEntitySchemaFields,
          formData,
          null,
          null
        );
      }
      // cierro sidebar
      closeSideBar();

      await onUpdatePatient();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  // form de los objetivos
  const onEdit_PatientGoal = () => {
    try {
      if (!patientGoalsEntitySchema || !patientGoalsEntitySchemaFields)
        throw new Error('missing entitySchema or entitySchemaFields');
      const fieldsNames = [nameof<IPatientTPGoal>('goalTypeId')];

      const toShowFields = patientGoalsEntitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(patientGoalsEntitySchema, toShowFields, null, dynamics);

      setEditPatientGoalsForm(theForm);

      setEditPatientGoalsSideOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  // submit de los objetivos
  const onSubmitPatientGoals = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!patientGoalsEntitySchema || !patientGoalsEntitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/currentUser.currentUser');

      if (patientGoalsData?.id)
        await updateEntityDataBySchema(
          currentUser.currentUser,
          patientGoalsEntitySchema,
          patientGoalsEntitySchemaFields,
          patientGoalsData?.id,
          formData,
          null,
          null
        );
      else {
        if (!therapeuticProjectData) throw new Error('therapeutic project needed');

        formData['patientId'] = docId;
        formData['patientTherapeuticProjectId'] = therapeuticProjectData.id;

        const creationResult = await createEntityDataBySchema(
          currentUser.currentUser,
          patientGoalsEntitySchema,
          patientGoalsEntitySchemaFields,
          formData,
          null,
          null
        );
      }
      // cierro sidebar
      closeSideBar();

      await onUpdatePatient();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  // obtiene y carga el form con los datos del objetivo seleccionado desde la grid (edit)
  const handleEditPatientGoals = (row: IGoalRow) => {
    setPatientGoalsData(row); //carga la data
    onEdit_PatientGoal(); //carga el from
    setEditPatientGoalsSideOpen(true); // abre el side draweer
  };
  //cierra los sideBars
  const closeSideBar = () => {
    setEditTherapeuticProjectSideOpen(false);
    setEditPatientGoalsSideOpen(false);
  };

  //renderiza las columnas en la grid de objetivos
  const updatePatientGoalsColumnsData = () => {
    const columnsData: GridColDef[] = [];

    // icons col

    if (isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC))
      columnsData.push({
        flex: 0.1,
        minWidth: 110,
        field: 'icons',
        headerName: '',

        renderCell: ({ row }: CellType) => (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Tooltip title='edit Content'>
              <IconButton
                size='small'
                sx={{ color: 'text.secondary' }}
                onClick={() => {
                  handleEditPatientGoals(row);
                }}
              >
                <Icon icon='tabler:eye' />
              </IconButton>
            </Tooltip>
          </Box>
        ),
      });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'type',
      headerName: capitalize(t('type')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.typeFriendlyName}
              </Typography>
            </Box>
          </>
        );
      },
    });

    if (isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC))
      // icons col
      columnsData.push({
        flex: 0.1,
        minWidth: 110,
        field: 'iconsDelete',
        headerName: '',

        renderCell: ({ row }: CellType) => (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Tooltip title='edit Content'>
              <IconButton
                size='small'
                sx={{ color: 'text.secondary' }}
                onClick={() => {
                  setDeleteGoalConfirmShow(true);
                }}
              >
                <Icon icon='tabler:trash' />
              </IconButton>
            </Tooltip>
          </Box>
        ),
      });

    setColumns(columnsData);
  };

  //elimina un objetivo
  const handleDeleteGoal = () => {
    alert('to do: a real delete');
  };
  const isPermittedByRol = (role: string) => {
    //UserDefinedRols.UDR_STAFF_COMMERCIAL
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, role))
    );
  };

  //setea un color al label del estado del proyecto terapeutico
  const getColorLabelState = (state?: string) => {
    if (!state) return 'info';
    if (state === TherapeuticProjectStates.DONE) return 'success';
    if (state === TherapeuticProjectStates.PENDING) return 'warning';
  };

  //abre o cierra el accordion
  const handleChange = (panel: string) => (event: SyntheticEvent, newExpanded: boolean) => {
    setExpanded(newExpanded ? panel : false);
  };

  if (loadingData) return <Loader />;

  return (
    <>
      <Grid container>
        <Grid item xs={12}>
          <CustomCard>
            <CardContent>
              <Accordion
                expanded={expanded === 'therapeuticProjectPanel'}
                onChange={handleChange('therapeuticProjectPanel')}
              >
                <AccordionSummary aria-controls='therapeuticProjectPanel-content' id='therapeuticProjectPanel-header'>
                  <Typography>{capitalize(t('therapeutic project'))}</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <CustomCard>
                    <CardHeader
                      action={
                        isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC) ? (
                          <Button
                            variant='contained'
                            onClick={() => {
                              onEdit_TherapeuticProject();
                            }}
                            sx={{ mr: 4, mb: [2, 0] }}
                          >
                            {capitalize(t(isCreatingTherapeuticProject ? 'new' : 'edit'))}
                          </Button>
                        ) : (
                          ''
                        )
                      }
                    />
                    <CardContent>
                      <TextInfo
                        title={'state'}
                        value={therapeuticProjectData?.therapeuticProjectState}
                        color={getColorLabelState(therapeuticProjectData?.therapeuticProjectState)}
                      ></TextInfo>
                      <TextInfo title={'problem'} value={therapeuticProjectData?.problem}></TextInfo>
                      <TextInfo title={'hypothesis'} value={therapeuticProjectData?.hypothesis}></TextInfo>
                      <TextInfo title={'clinical context'} value={therapeuticProjectData?.clinicalContext}></TextInfo>
                      <TextInfo title={'actual project'} value={therapeuticProjectData?.actualProject}></TextInfo>
                      <TextInfo title={'main goal'} value={therapeuticProjectData?.mainGoal}></TextInfo>
                      <TextInfo title={'activity plan'} value={therapeuticProjectData?.activityPlan}></TextInfo>
                      <TextInfo title={'observations'} value={therapeuticProjectData?.observations}></TextInfo>
                      <TextInfo title={'symptoms'} value={therapeuticProjectData?.symptoms}></TextInfo>{' '}
                    </CardContent>
                  </CustomCard>
                  {!!editTherapeuticProjectSideOpen && (
                    <DynamicFormSidebar
                      isCreating={isCreatingTherapeuticProject}
                      onSubmit={onSubmitTherapeuticProject}
                      title={'Edit therapeutic project'}
                      formId={'Edit_therapeuticProject'}
                      initialValues={therapeuticProjectData}
                      preloadForm={editTherapeuticProjectForm}
                      open={editTherapeuticProjectSideOpen}
                      toggle={toggleEditTherapeuticProjectDrawer}
                      onSubmitDone={() => {
                        toggleEditTherapeuticProjectDrawer();

                        return Promise.resolve();
                      }}
                    />
                  )}
                </AccordionDetails>
              </Accordion>
              <Accordion expanded={expanded === 'goalsPanel'} onChange={handleChange('goalsPanel')}>
                <AccordionSummary aria-controls='goalsPanel-content' id='goalsPanel-header'>
                  <Typography>{capitalize(t('goals'))}</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <CustomCard>
                    <CardHeader
                      action={
                        isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC) ? (
                          <Button
                            variant='contained'
                            onClick={() => {
                              onEdit_PatientGoal();
                            }}
                            sx={{ mr: 4, mb: [0, 4] }}
                          >
                            {capitalize(t('add new goal'))}
                          </Button>
                        ) : (
                          ''
                        )
                      }
                    />
                    <CardContent>
                      <Grid container spacing={6}></Grid> <Divider sx={{ m: '0 !important' }} />
                      <Box
                        sx={{
                          py: 4,
                          px: 6,
                          rowGap: 2,
                          columnGap: 4,
                          display: 'flex',
                          flexWrap: 'wrap',
                          alignItems: 'center',

                          justifyContent: 'right',
                        }}
                      >
                        <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
                          <CustomTextField
                            sx={{ mr: 4 }}
                            placeholder={capitalize(t('search placeholder'))}
                            onChange={(e) => setSearchText(e.target.value)}
                          />
                        </Box>
                      </Box>
                      <DataGrid
                        autoHeight
                        rows={patientGoals.filter((item) => {
                          if (item) return item.showRow;
                        })}
                        rowHeight={60}
                        loading={loadingData}
                        columns={columns}
                        initialState={{
                          columns: {
                            columnVisibilityModel: {
                              id: false,
                            },
                          },
                        }}
                        disableRowSelectionOnClick
                        pageSizeOptions={[7, 10, 25, 50]}
                        paginationModel={paginationModel}
                        onPaginationModelChange={setPaginationModel}
                      />
                    </CardContent>
                  </CustomCard>
                  {!!editPatientGoalsSideOpen && patientGoalsEntitySchema && patientGoalsEntitySchemaFields && (
                    <DynamicFormSidebar
                      isCreating={isCreatingPatientGoals}
                      onSubmit={onSubmitPatientGoals}
                      title={'Edit patient goals'}
                      formId={'Edit_PatientGoals'}
                      initialValues={patientGoalsData}
                      preloadForm={editPatientGoalsForm}
                      open={editPatientGoalsSideOpen}
                      toggle={toggleEditPatientGoalsDrawer}
                      onSubmitDone={() => {
                        toggleEditPatientGoalsDrawer();

                        return Promise.resolve();
                      }}
                    />
                  )}
                </AccordionDetails>
              </Accordion>
            </CardContent>
          </CustomCard>
        </Grid>

        <DialogAction
          show={deleteGoalConfirmShow}
          title='delete goal'
          text='delete goal confirm'
          textButtonSubmit='delete'
          colorButtonSubmit='warning'
          onClickSubmit={() => handleDeleteGoal()}
          onClickClose={() => setDeleteGoalConfirmShow(false)}
        />
      </Grid>
    </>
  );
};

export default TherapeuticProjectTab;
