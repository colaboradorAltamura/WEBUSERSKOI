// ** MUI Imports
import { useState, useEffect } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import { Button, capitalize, styled } from '@mui/material';
import TextInfo from 'src/@core/components/custom-text-info';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import { createEntityDataBySchema, schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import Loader from 'src/@core/components/loader';
import { dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { AppRols } from 'src/types/appRols';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { Collections } from 'src/types/collectionsTypes';
// ** Icon Imports
import {
  getSourceEntityData,
  handleError,
  hasRole,
  nameof,
  parseDateToShortString,
  roundTwoDecimals,
} from 'src/@core/coreHelper';
import {
  IPatientPaymentCondition,
  IPatient,
  ICompany,
  IHealthInsuranceAgreement,
  PaymentConditionStateTypes,
  CMSCollections,
} from 'src/types/@autogenerated';
import { useRouter } from 'next/router';
import OptionsMenu from 'src/@core/components/option-menu';
import PaymentConditionForm from '../paymentCondition';
//import PaymentConditionForm from '../PaymentConditions';

const PAYMENT_CONDITIONS = CMSCollections.PATIENT_PAYMENT_CONDITIONS;
interface PropsType {
  docId: string;
  patientSchemaArg: IEntitySchema;
  patientDataArg: IPatient;
  patientSchemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
}

const calculateMonthlyHoursRate = (hours: number, hourRate: number) => {
  return hours * hourRate;
};

const calculateMonthlyHoursRateTax = (monthlyHoursRate: number, tax: string) => {
  if (!tax) return 0;
  if (tax === 'iva_21') return monthlyHoursRate * 1.21;
  else if (tax === 'iva_10_5') return monthlyHoursRate * 1.105;
  else if (tax === 'tax_free') return monthlyHoursRate;

  return 0;
};

const calculateMargin = (workerHours: number, enliteRate: number) => {
  if (!enliteRate) return 0;

  return (1 - workerHours) / enliteRate;
};

const PaymentConditionTab = ({
  docId,
  patientSchemaArg,
  patientDataArg,
  patientSchemaFieldsArg,
  onUpdatePatient,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const router = useRouter();

  // ** State
  const [patientSchema, setPatientSchema] = useState<IEntitySchema>(patientSchemaArg);
  const [patientData, setPatientData] = useState<IPatient>(patientDataArg);
  const [patientPaymentConditionData, setPatientPaymentConditionData] = useState<IPatientPaymentCondition | null>();
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);

  const [patientPaymentConditionsEntitySchema, setPatientPaymentConditionsEntitySchema] =
    useState<IEntitySchema | null>(null);
  const [patientPaymentConditionsEntitySchemaFields, setPatientPaymentConditionsEntitySchemaFields] = useState<
    IEntitySchemaField[]
  >([]);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);

  // ** patients
  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);
  const toggleEditPatientDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  const [monthlyHoursRate, setMonthlyHoursRate] = useState<number>(0);
  const [monthlyHoursRateTax, setMonthlyHoursRateTax] = useState<number>(0);
  const [margin, setMargin] = useState<number>(0);
  const [isCreating, setIsCreating] = useState<boolean>(true);

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        setLoadingSchema(true);
        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === PAYMENT_CONDITIONS;
        });
        if (!schema) throw new Error('Missing schemaName: ' + PAYMENT_CONDITIONS);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setPatientPaymentConditionsEntitySchema(entitySchemaResponse);
        setPatientPaymentConditionsEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, []);

  // Obtenemos todos los paymentConditions relacionados a este patient
  useEffect(() => {
    const doAsync = async () => {
      setLoadingData(true);
      try {
        const response = await dynamicGet({
          params: '/cms/' + PAYMENT_CONDITIONS + '/by-prop/' + nameof<IPatientPaymentCondition>('userId') + '/' + docId,
        });

        console.log(response);
        if (!response || !response.items) throw new Error('Invalid response');

        if (response.items[0]) {
          setPatientPaymentConditionData(response.items[0]);
          setCalculatesValues(response.items[0]);
          setIsCreating(false);
        } else {
          setIsCreating(true);
        }

        setLoadingData(false);
      } catch (e) {
        handleError(e);
        setLoadingData(false);
      }
    };

    doAsync();
  }, [toggleData]);

  const setCalculatesValues = (paymentCondition: IPatientPaymentCondition) => {
    const monthly =
      paymentCondition.monthlyHours && paymentCondition.hourlyRateEnlite
        ? calculateMonthlyHoursRate(paymentCondition.monthlyHours, paymentCondition.hourlyRateEnlite)
        : 0;
    const monthlyTax = paymentCondition.taxCondition
      ? calculateMonthlyHoursRateTax(monthly, paymentCondition.taxCondition)
      : 0;
    const marginVal =
      paymentCondition.hourlyRateWorker && paymentCondition.hourlyRateEnlite
        ? calculateMargin(paymentCondition.hourlyRateWorker, paymentCondition.hourlyRateEnlite)
        : 0;

    setMonthlyHoursRate(monthly);
    setMonthlyHoursRateTax(monthlyTax);
    setMargin(marginVal);
  };

  const isFieldsCompleted = () => {
    const requeridFieldsNames = [
      nameof<IPatientPaymentCondition>('businessType'),
      nameof<IPatientPaymentCondition>('paymentMode'),
      nameof<IPatientPaymentCondition>('taxCondition'),
      nameof<IPatientPaymentCondition>('healthInsuranceId'),
      nameof<IPatientPaymentCondition>('healthInsuranceAgreementId'),
      nameof<IPatientPaymentCondition>('hourlyRateWorker'),
      nameof<IPatientPaymentCondition>('collectionPeriod'),
      nameof<IPatientPaymentCondition>('paymentDate'),
      nameof<IPatientPaymentCondition>('hourlyRateEnlite'),
      nameof<IPatientPaymentCondition>('monthlyHours'),
      nameof<IPatientPaymentCondition>('validFrom'),
      nameof<IPatientPaymentCondition>('validUntil'),
    ];
    if (!patientPaymentConditionData) throw new Error('Missing entityData');

    const isValid = requeridFieldsNames.find(
      (field) => !patientPaymentConditionData[field as keyof IPatientPaymentCondition]
    );

    return !isValid;
  };

  const patientPaymentConditionStateUpdate = async (patientPaymentConditionTargetState: PaymentConditionStateTypes) => {
    try {
      setLoadingData(true);

      if (!patientPaymentConditionData || !currentUser.currentUser)
        throw new Error('Missing entityData/currentUser.currentUser');

      if (patientPaymentConditionTargetState === PaymentConditionStateTypes.ACTIVE && !isFieldsCompleted())
        throw new Error(t('required fields') as string);

      const itemValues = { ...patientPaymentConditionData };

      itemValues.paymentConditionsState = patientPaymentConditionTargetState;

      //update paymentCondition entitiy
      if (itemValues.id) await updateEntitybyId(itemValues, PAYMENT_CONDITIONS, itemValues.id);

      await onUpdatePatient();

      // refresco la info
      setToggleData(!toggleData);
      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const handleOnEditSubmit_PatientPaymentCondition = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!patientPaymentConditionsEntitySchema || !currentUser.currentUser)
        throw new Error('Missing entitySchema/currentUser.currentUser');

      if (patientPaymentConditionData?.id)
        await updateEntityDataBySchema(
          currentUser.currentUser,
          patientPaymentConditionsEntitySchema,
          patientPaymentConditionsEntitySchemaFields,
          patientPaymentConditionData?.id,
          formData,
          null,
          null
        );
      else {
        formData['patientId'] = patientData.id;

        const creationResult = await createEntityDataBySchema(
          currentUser.currentUser,
          patientPaymentConditionsEntitySchema,
          patientPaymentConditionsEntitySchemaFields,
          formData,
          patientSchema
        );
      }

      // cierro sidebar
      setEditSidebarOpen(false);

      // refresco la info
      setToggleData(!toggleData);
      await onUpdatePatient();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const isPermittedByRol = (role: string) => {
    //UserDefinedRols.UDR_STAFF_COMMERCIAL
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, role))
    );
  };

  const getHeatlhInsuranceFriendlyName = (patientPaymentConditionData?: IPatientPaymentCondition | null) => {
    if (!patientPaymentConditionData) return '';

    const sourceData = getSourceEntityData({
      obj: patientPaymentConditionData,
      key: nameof<IPatientPaymentCondition>('healthInsuranceId'),
    });
    if (!sourceData) return '';

    return (sourceData as ICompany).name;
  };

  const getHealthInsuranceAgreementFriendlyName = (patientPaymentConditionData?: IPatientPaymentCondition | null) => {
    if (!patientPaymentConditionData) return '';

    const sourceData = getSourceEntityData({
      obj: patientPaymentConditionData,
      key: nameof<IPatientPaymentCondition>('healthInsuranceAgreementId'),
    });
    if (!sourceData) return '';

    return (sourceData as IHealthInsuranceAgreement).name;
  };

  const printOnClick = () => {
    window.print();
  };

  const updateEntitybyId = async (formData: any, schema: string, id: string) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${schema}/` + id,
      data: formData,
    });
  };

  if (loadingData) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('budget'))}
            action={
              isPermittedByRol(UserDefinedRols.UDR_STAFF_COMMERCIAL) && (
                <>
                  <Button
                    variant='contained'
                    onClick={() => {
                      setEditSidebarOpen(true);
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('edit'))}
                  </Button>
                  <OptionsMenu
                    options={[
                      {
                        text: capitalize(t('print')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => printOnClick(),
                        },
                      },
                      {
                        text: capitalize(t('send')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => alert('email enviado!'),
                        },
                      },
                      {
                        text: capitalize(t('active')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => patientPaymentConditionStateUpdate(PaymentConditionStateTypes.ACTIVE),
                        },
                      },
                      {
                        text: capitalize(t('inactive')),
                        menuItemProps: {
                          sx: { py: 2 },
                          onClick: () => patientPaymentConditionStateUpdate(PaymentConditionStateTypes.INACTIVE),
                        },
                      },
                    ]}
                    iconButtonProps={{ size: 'small', sx: { color: 'text.disabled' } }}
                  />
                </>
              )
            }
          />
          <CardContent>
            {isPermittedByRol(UserDefinedRols.UDR_STAFF_ADMISSION) && (
              <Grid container spacing={4}>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'hourRateWorker'} value={patientPaymentConditionData?.hourlyRateWorker}></TextInfo>
                  <TextInfo title={'paymentDate'} value={patientPaymentConditionData?.paymentDate}></TextInfo>{' '}
                  <TextInfo
                    title={'paymentCondition state'}
                    value={patientPaymentConditionData?.paymentConditionsState}
                  ></TextInfo>
                </Grid>
              </Grid>
            )}

            {isPermittedByRol(UserDefinedRols.UDR_STAFF_COMMERCIAL) && (
              <Grid container spacing={4}>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'payment method'} value={patientPaymentConditionData?.businessType}></TextInfo>
                  <TextInfo
                    title={'health insurance'}
                    value={getHeatlhInsuranceFriendlyName(patientPaymentConditionData)}
                  ></TextInfo>
                  <TextInfo title={'hourRateEnlite'} value={patientPaymentConditionData?.hourlyRateEnlite}></TextInfo>
                  <TextInfo title={'margen %'} value={roundTwoDecimals(margin)}></TextInfo>
                  <TextInfo title={'monthlyHours'} value={patientPaymentConditionData?.monthlyHours}></TextInfo>
                  <TextInfo
                    title={'validFrom'}
                    value={parseDateToShortString(patientPaymentConditionData?.validFrom)}
                  ></TextInfo>
                  <TextInfo title={'taxCondition'} value={patientPaymentConditionData?.taxCondition}></TextInfo>
                </Grid>

                <Grid item xs={12} md={6}>
                  <TextInfo title={'paymentMode'} value={patientPaymentConditionData?.paymentMode}></TextInfo>
                  <TextInfo
                    title={'agreement'}
                    value={getHealthInsuranceAgreementFriendlyName(patientPaymentConditionData)}
                  ></TextInfo>
                  <TextInfo title={'hourRateWorker'} value={patientPaymentConditionData?.hourlyRateWorker}></TextInfo>
                  <TextInfo title={'monto neto mensual'} value={monthlyHoursRate}></TextInfo>
                  <TextInfo title={'monto bruto mensual'} value={monthlyHoursRateTax}></TextInfo>
                  <TextInfo
                    title={'validUntil'}
                    value={parseDateToShortString(patientPaymentConditionData?.validUntil)}
                  ></TextInfo>
                </Grid>
              </Grid>
            )}
          </CardContent>
        </Card>

        {!!editSidebarOpen && (
          <PaymentConditionForm
            docId={docId}
            isCreating={isCreating}
            onSubmit={handleOnEditSubmit_PatientPaymentCondition}
            title={'Edit'}
            formId={'Edit_paymentCondition'}
            initialValues={patientPaymentConditionData ?? null} // TODO JOACO
            preloadForm={editEntityForm}
            open={editSidebarOpen}
            toggle={toggleEditPatientDrawer}
            onSubmitDone={() => {
              toggleEditPatientDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>
    </Grid>
  );
};

export default PaymentConditionTab;
