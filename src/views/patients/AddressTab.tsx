// ** MUI Imports
import Card from '@mui/material/Card';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

import { useState } from 'react';
import Loader from 'src/@core/components/loader';
import { handleError, hasRole } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { dynamicCreate, dynamicRemove, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { CMSCollections, IAddress, IPatient, IUsersAddress } from 'src/types/@autogenerated';
import { AppRols } from 'src/types/appRols';
import { Collections } from 'src/types/collectionsTypes';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import AddressView from '../address/dialog';

interface PropsType {
  docId: string;
  patientSchemaArg: IEntitySchema;
  patientDataArg: IPatient;
  patientSchemaFieldsArg: IEntitySchemaField[];
  primaryAddressArg: IAddress | null;
  addresses: IUsersAddress[] | null;
  onUpdatePatient: () => Promise<any>;
}

const AddressTab = ({
  docId,
  patientSchemaArg,
  patientDataArg,
  patientSchemaFieldsArg,
  primaryAddressArg,
  addresses,
  onUpdatePatient,
}: PropsType) => {
  // ** Hooks

  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [userAddresses, setUserAddresses] = useState<IUsersAddress[] | null>(addresses ?? null);

  const [loading, setLoading] = useState<boolean>(false);

  const onSubmitAddress = async (formData: IUsersAddress, isCreating: boolean) => {
    try {
      setLoading(true);
      if (!formData || !formData.address) throw new Error('address missing');

      const newAddress = { ...formData } as IUsersAddress;

      if (isCreating) await createAddressEntity(newAddress);
      else await updateAddressEntity(newAddress);

      onUpdatePatient();
      setLoading(false);
    } catch (e) {
      handleError(e);
      setLoading(false);
    }
  };

  const processUniquePrimaryAddress = async (formData: IUsersAddress) => {
    if (!formData.isPrimary) return;
    const promises: Promise<any>[] = [];

    userAddresses?.forEach((ua) => {
      if (!ua.isPrimary) return;

      promises.push(
        new Promise((resolve, reject) => {
          dynamicUpdate({
            params: '/cms/' + CMSCollections.USERS_ADDRESSES + '/' + ua.id,
            data: { isPrimary: false },
          })
            .then(resolve)
            .catch(reject);
        })
      );
    });

    if (promises.length) await Promise.all(promises);
  };
  const createAddressEntity = async (formData: IUsersAddress) => {
    await dynamicCreate({
      params: `/cms/${CMSCollections.USERS_ADDRESSES}/`,
      data: formData,
    });

    await processUniquePrimaryAddress(formData);
  };

  const updateAddressEntity = async (formData: IUsersAddress) => {
    await dynamicUpdate({
      params: `/cms/${CMSCollections.USERS_ADDRESSES}/` + formData.id,
      data: formData,
    });

    await processUniquePrimaryAddress(formData);
  };

  const handleDelete = async (formData: IUsersAddress) => {
    try {
      setLoading(true);

      await dynamicRemove({
        params: '/cms/' + CMSCollections.USERS_ADDRESSES + '/' + formData.id,
        data: formData,
      });

      setLoading(false);
      onUpdatePatient();
    } catch (e) {
      setLoading(false);
      handleError(e);
    }
  };

  if (loading) return <Loader />;

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <AddressView docId={docId} addresses={userAddresses} onSubmit={onSubmitAddress} onRemove={handleDelete} />
        </Card>
      </Grid>
    </Grid>
  );
};

export default AddressTab;
