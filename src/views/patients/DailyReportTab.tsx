// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Grid from '@mui/material/Grid';
import moment from 'moment';

import { useTranslation } from 'react-i18next';

import {
  Box,
  Button,
  Divider,
  IconButton,
  Tooltip,
  Typography,
  responsiveFontSizes,
  capitalize,
  CardHeader,
} from '@mui/material';
import { useEffect, useState } from 'react';
import { getSourceEntityData, handleError, hasRole, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import {
  CMSCollections,
  IDailyReport,
  DailyReportStatusTypes,
  IPatient,
  IPatientGoalsScore,
  IWorker,
} from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { IForm } from 'src/types/dynamics';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import { Icon } from '@iconify/react';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import CustomTextField from 'src/@core/components/mui/text-field';
import { dynamicCreate, dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import DailyReportForm from 'src/pages/dailyReport/form';
import DailyReportDetails from 'src/pages/dailyReport/details';
import { IUser } from 'src/types/users';

interface PropsType {
  docId: string;
  patientSchemaArg: IEntitySchema;
  patientDataArg: IPatient;
  patientSchemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
}

interface IDailyReportRow extends IDailyReport {
  showRow: boolean;
  workerName: string;
}
interface CellType {
  row: IDailyReportRow;
}

const SCHEMA_NAME = CMSCollections.DAILY_REPORTS;
const DailyReportTab = ({
  docId,
  patientSchemaArg,
  patientDataArg,
  patientSchemaFieldsArg,
  onUpdatePatient,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema>();
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>();
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);

  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [isCreating, setIsCreating] = useState<boolean>(true);
  const [dailyReportData, setDailyReportData] = useState<IDailyReportRow>();
  const [entitiesData, setEntitiesData] = useState<IDailyReportRow[]>([]);

  //- form
  const [dailyReportFormShow, setDailyReportFormShow] = useState<boolean>(false);
  const toggleSideDrawer = () => setDailyReportFormShow(!dailyReportFormShow);

  //- details
  const [dailyReportDetailsShow, setDailyReportDetailsShow] = useState<boolean>(false);
  const [dailyReportDataDetails, setDailyReportDataDetails] = useState<IDailyReport>();

  //- grid
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS))
    );
  };

  const updateColumnsData = () => {
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='View Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                handleViewContent(row);
              }}
            >
              <Icon icon='tabler:eye' />
            </IconButton>
          </Tooltip>
          <Tooltip title='edit Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                handleEdit(row);
              }}
            >
              <Icon icon='tabler:edit' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'eventDate',
      headerName: t('event date') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {parseDateToShortString(row.eventDate)}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'checkIn',
      headerName: capitalize(t('checkIn')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {moment(row.checkIn).format('hh:mm:ss a')}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'checkOut',
      headerName: capitalize(t('checkOut')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {moment(row.checkOut).format('hh:mm:ss a')}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'carer',
      headerName: capitalize(t('carer')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.workerName}
              </Typography>
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'globalScore',
      headerName: capitalize(t('global score')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.globalScore}
              </Typography>
            </Box>
          </>
        );
      },
    });
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'dailyReportStatus',
      headerName: capitalize(t('status')) as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.dailyReportStatus}
              </Typography>
            </Box>
          </>
        );
      },
    });
    setColumns(columnsData);
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === SCHEMA_NAME;
        });
        if (!schema) throw new Error('Missing schemaName: ' + SCHEMA_NAME);

        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);
        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, [dynamics.isLoadingSchemas]);

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields]);

  // Fetch schema.collectionName
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        setLoadingData(true);

        // getting data by patient Id
        const data: any = await dynamicGet({
          params: '/cms/' + SCHEMA_NAME + '/by-prop/' + nameof<IDailyReport>('userId') + '/' + docId, // by PatientId
        });

        setEntitiesData(
          data.items.map((report: IDailyReport) => {
            const workerData = getWorkerData(report);

            if (workerData)
              return {
                showRow: true,
                workerName: `${workerData.firstName} ${workerData.lastName}`,
                ...report,
              } as IDailyReportRow;

            return { showRow: true, workerName: '', ...report } as IDailyReportRow;
          }) as IDailyReportRow[]
        );

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, toggleData]);

  //obtiene la data del worker
  const getWorkerData = (dailyReport: IDailyReport) => {
    if (!dailyReport) return '';
    const sourceData = getSourceEntityData({
      obj: dailyReport,
      key: nameof<IDailyReport>('workerId'),
    });
    if (sourceData) return sourceData as IWorker;
  };

  const handleOnSubmit = async (dailyReportForm: any, goalScoreForm: IPatientGoalsScore[], isCreating: boolean) => {
    try {
      setLoadingData(true);

      const dailyReportValues = { ...dailyReportForm };
      const goalScoreValues = goalScoreForm;

      if (isCreating) {
        //insertarmos primero el daily report
        const dailyReportResponse = await createEntity(dailyReportValues, CMSCollections.DAILY_REPORTS);

        //si esta todo ok, insertarmos cada goal con su score y note
        if (dailyReportResponse && dailyReportResponse.id) {
          goalScoreValues.map((goal: IPatientGoalsScore) => {
            //por cada goal, le asignamos el id del daily report
            goal.dailyReportId = dailyReportResponse.id;
            //inserta cada goal
            const goalScoreReport = createEntity(goal, CMSCollections.PATIENT_GOALS_SCORES);
          });
        }
      } else {
        //update primero el daily report
        const dailyReportResponse = await updateEntity(
          dailyReportValues,
          CMSCollections.DAILY_REPORTS,
          dailyReportValues.id
        );

        goalScoreValues.map(async (goal: IPatientGoalsScore) => {
          if (goal.id) {
            await updateEntity(goal, CMSCollections.PATIENT_GOALS_SCORES, goal.id);
          }
        });
      }

      // refresco la tabla
      setToggleData(!toggleData);

      // cierro modal
      setDailyReportFormShow(false);
      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };
  const createEntity = async (formData: any, schema: string) => {
    let response = null;

    response = await dynamicCreate({
      params: `/cms/${schema}/`,
      data: formData,
    });

    return response;
  };
  const updateEntity = async (formData: any, schema: string, id: string) => {
    let response = null;

    response = await dynamicUpdate({
      params: `/cms/${schema}/` + id,
      data: formData,
    });

    return response;
  };

  const setNewDailyReport = () => {
    const newDailyReport = {
      checkOutLongitude: 0,
      checkOutLatitude: 0,
      patientScheduleId: '',
      workerId: '',
      dailyReportStatus: DailyReportStatusTypes.COMPLETED,
      globalScore: 0,
      checkInLongitude: 0,
      checkInLatitude: 0,
      generalNotes: '',
      checkOut: new Date(),
      checkIn: new Date(),
      eventDate: new Date(),
      userId: docId,
    } as IDailyReportRow;

    return newDailyReport;
  };
  const handleEdit = (row: IDailyReportRow) => {
    setDailyReportData(row);
    setDailyReportFormShow(true);
    setIsCreating(false);
  };

  const handleViewContent = (row: IDailyReportRow) => {
    const dailyReportDetails = { ...row } as IDailyReport;
    console.log(dailyReportDetails);
    setDailyReportDataDetails(dailyReportDetails);
    setDailyReportDetailsShow(true);
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader sx={{}} title={capitalize(t('daily reports'))} />
          <CardContent>
            <Grid container spacing={6}></Grid> <Divider sx={{ m: '0 !important' }} />
            <Box
              sx={{
                py: 4,
                px: 6,
                rowGap: 2,
                columnGap: 4,
                display: 'flex',
                flexWrap: 'wrap',
                alignItems: 'center',

                justifyContent: 'right',
              }}
            >
              <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
                <CustomTextField
                  sx={{ mr: 5 }}
                  placeholder={capitalize(t('search placeholder'))}
                  onChange={(e) => setSearchText(e.target.value)}
                />
                {isPermittedByRol() && (
                  <Button
                    onClick={() => {
                      setIsCreating(true);
                      setDailyReportFormShow(true);
                      setDailyReportData(setNewDailyReport());
                    }}
                    variant='contained'
                    sx={{ '& svg': { mr: 2 } }}
                  >
                    <Icon fontSize='1.125rem' icon='tabler:plus' />
                    {capitalize(t('new'))}
                  </Button>
                )}
              </Box>
            </Box>
            <DataGrid
              autoHeight
              rows={entitiesData.filter((item) => {
                if (item) return item.showRow;
              })}
              rowHeight={60}
              loading={loadingData}
              columns={columns}
              initialState={{
                columns: {
                  columnVisibilityModel: {
                    id: false,
                  },
                },
              }}
              disableRowSelectionOnClick
              pageSizeOptions={[7, 10, 25, 50]}
              paginationModel={paginationModel}
              onPaginationModelChange={setPaginationModel}
            />
          </CardContent>
        </Card>
        {!!dailyReportFormShow && !!dailyReportData && !!entitySchema && (
          <DailyReportForm
            docId={docId}
            formId={'new_dailyReport'}
            preloadForm={null}
            open={dailyReportFormShow}
            onSubmit={handleOnSubmit}
            onSubmitDone={handleOnSubmit}
            onClose={() => setDailyReportFormShow(false)}
            title={t(isCreating ? 'new daily report' : 'edit daily report') as string}
            initialValues={dailyReportData}
            isCreating={isCreating}
          ></DailyReportForm>
        )}

        {!!dailyReportDetailsShow && !!dailyReportDataDetails && (
          <DailyReportDetails
            docId={docId}
            open={dailyReportDetailsShow}
            onClose={() => setDailyReportDetailsShow(false)}
            title={t('daily report details') as string}
            initialValues={dailyReportDataDetails}
          ></DailyReportDetails>
        )}
      </Grid>
    </Grid>
  );
};

export default DailyReportTab;
