// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';
// ** Icon Imports

// ** Types

// ** Demo Component Imports

// ** Custom Components Imports
import { Button, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import TextInfo from 'src/@core/components/custom-text-info';
import { handleError, hasRole, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IAddress, IPatient } from 'src/types/@autogenerated';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import RelativeGrid from '../relatives';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  dataArg: IPatient;
  schemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
  primaryAddressArg: IAddress | null;
}

const SummaryTab = ({ docId, schemaArg, dataArg, primaryAddressArg, schemaFieldsArg, onUpdatePatient }: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema>(schemaArg);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>(schemaFieldsArg);
  const [entityData, setEntityData] = useState<IPatient>(dataArg);
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [primaryAddress, setPrimaryAddress] = useState<IAddress | null>(primaryAddressArg);

  // ** patients
  const [editSidebarOpen, setEditSidebarOpen] = useState<boolean>(false);
  const toggleEditDrawer = () => setEditSidebarOpen(!editSidebarOpen);

  // ** relatives
  const [editRelativeSidebarOpen, setEditRelativeSidebarOpen] = useState<boolean>(false);
  const toggleEditRelativeDrawer = () => setEditRelativeSidebarOpen(!editRelativeSidebarOpen);

  // **

  const calculateAge = (birthdate: any) => {
    const today = new Date();
    const birthDateFormated = new Date(birthdate);

    if (birthDateFormated.getDate()) {
      //if a valid date
      let age = today.getFullYear() - birthDateFormated.getFullYear();
      if (age > 0) {
        if (birthDateFormated.getMonth() > today.getMonth() || birthDateFormated.getDay() > today.getDay()) age--;
      } else {
        age = today.getMonth() - birthDateFormated.getMonth();

        return `${age} ${age > 1 ? t('months') : t('month')}`;
      }

      return `${age} ${age > 1 ? t('years') : t('year')}`;
    }

    return '-';
  };

  const handleOnEntityEdit_Patient = () => {
    try {
      if (!entitySchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IPatient>('firstName'),
        nameof<IPatient>('lastName'),
        nameof<IPatient>('email'),
        nameof<IPatient>('phoneNumber'),
        nameof<IPatient>('identificationType'),
        nameof<IPatient>('identificationNumber'),
        nameof<IPatient>('patientAgeRange'),
      ];

      const toShowFields = entitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(entitySchema, toShowFields, null, dynamics);

      setEditEntityForm(theForm);

      setEditSidebarOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  const handleOnEditSubmit_Patient = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!entitySchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditSidebarOpen(false);

      await onUpdatePatient();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const handleOnEditSubmit_Relative = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!entitySchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      setEditRelativeSidebarOpen(false);

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  useEffect(() => {
    setPrimaryAddress(primaryAddressArg);
  }, [primaryAddressArg]);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardHeader
            title={capitalize(t('general information'))}
            action={
              isPermittedByRol() ? (
                <Button
                  variant='contained'
                  onClick={() => {
                    handleOnEntityEdit_Patient();
                  }}
                  sx={{ mr: 4, mb: [2, 0] }}
                >
                  {capitalize(t('edit'))}
                </Button>
              ) : (
                ''
              )
            }
          />
          <CardContent>
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <TextInfo title={'gender'} value={entityData.gender}></TextInfo>
                <TextInfo title={'identificationType'} value={entityData.identificationType}></TextInfo>
                <TextInfo title={'identificationNumber'} value={entityData.identificationNumber}></TextInfo>
                <TextInfo title={'birthdate'} value={parseDateToShortString(entityData.birtdate)}></TextInfo>
                <TextInfo title={'age'} value={calculateAge(entityData.birtdate)}></TextInfo>
                <TextInfo title={'age range'} value={entityData.patientAgeRange}></TextInfo>
              </Grid>
              <Grid item xs={12} md={6}>
                <TextInfo title={'address'} value={primaryAddress?.addressString}></TextInfo>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {!!editSidebarOpen && (
          <DynamicFormSidebar
            isCreating={false}
            onSubmit={handleOnEditSubmit_Patient}
            title={'Edit ' + entitySchema?.name}
            formId={'Edit_' + entitySchema?.name}
            initialValues={entityData}
            preloadForm={editEntityForm}
            open={editSidebarOpen}
            toggle={toggleEditDrawer}
            onSubmitDone={() => {
              toggleEditDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Grid>

      <Grid item xs={12}>
        <Card>
          <CardHeader title={capitalize(t('relatives'))} />

          <CardContent>
            <RelativeGrid
              docId={docId}
              schemaArg={entitySchema}
              schemaFieldsArg={entitySchemaFields}
              dataArg={entityData}
              onUpdatePatient={onUpdatePatient}
            />
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default SummaryTab;
