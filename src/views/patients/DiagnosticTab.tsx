// ** MUI Imports
import { useState, useEffect } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import { Button, capitalize, styled } from '@mui/material';
import TextInfo from 'src/@core/components/custom-text-info';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { IForm } from 'src/types/dynamics';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import Loader from 'src/@core/components/loader';
import { AppRols } from 'src/types/appRols';
import { UserDefinedRols } from 'src/types/userDefinedRols';
// ** Icon Imports
import { handleError, hasRole, nameof } from 'src/@core/coreHelper';
import {
  IPatientPaymentCondition,
  IPatient,
  CMSCollections,
  BusinessTypes,
  ApplicantUrgencyLeves,
} from 'src/types/@autogenerated';
import { useRouter } from 'next/router';
import { schemaToForm, updateEntityDataBySchema } from '../components/dynamics/helpers';
import DynamicFormSidebar from '../components/dynamics/DynamicFormSidebar';
import { dynamicGet } from 'src/services/entitiesDynamicServices';

const PAYMENT_CONDITIONS = CMSCollections.PATIENT_PAYMENT_CONDITIONS;
interface PropsType {
  docId: string;
  patientSchemaArg: IEntitySchema;
  patientDataArg: IPatient;
  patientSchemaFieldsArg: IEntitySchemaField[];
  onUpdatePatient: () => Promise<any>;
}

const ContractedDiagnosticTab = ({
  docId,
  patientSchemaArg,
  patientDataArg,
  patientSchemaFieldsArg,
  onUpdatePatient,
}: PropsType) => {
  // ** Hooks
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const router = useRouter();

  // ** State
  const [patientSchema, setPatientSchema] = useState<IEntitySchema>(patientSchemaArg);
  const [patientData, setPatientData] = useState<IPatient>(patientDataArg);
  const [patientEntitySchemaFields, setPatientEntitySchemaFields] =
    useState<IEntitySchemaField[]>(patientSchemaFieldsArg);
  const [patientPaymentConditionData, setPatientPaymentConditionData] = useState<IPatientPaymentCondition | null>();
  const [editEntityForm, setEditEntityForm] = useState<IForm | null>(null);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [toggleData, setToggleData] = useState<boolean>(false);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);

  // ** diagnostic
  const [editDiagnosticSideOpen, setEditDiagnosticSideOpen] = useState<boolean>(false);
  const toggleEditDiagnosticDrawer = () => setEditDiagnosticSideOpen(!editDiagnosticSideOpen);
  const [editDiagnosticForm, setEditDiagnosticForm] = useState<IForm | null>(null);

  // ** treatmentProf
  const [editTreatmentProfSideOpen, setEditTreatmentProfSideOpen] = useState<boolean>(false);
  const toggleEditTreatmentProfDrawer = () => setEditTreatmentProfSideOpen(!editDiagnosticSideOpen);
  const [editTreatmentProfForm, setEditTreatmentProfForm] = useState<IForm | null>(null);

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        setLoadingSchema(true);
        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === PAYMENT_CONDITIONS;
        });
        if (!schema) throw new Error('Missing schemaName: ' + PAYMENT_CONDITIONS);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, []);

  const isFieldsCompleted = () => {
    const requeridFieldsNames = [
      nameof<IPatientPaymentCondition>('businessType'),
      nameof<IPatientPaymentCondition>('paymentMode'),
      nameof<IPatientPaymentCondition>('taxCondition'),
      nameof<IPatientPaymentCondition>('healthInsuranceId'),
      nameof<IPatientPaymentCondition>('healthInsuranceAgreementId'),
      nameof<IPatientPaymentCondition>('hourlyRateWorker'),
      nameof<IPatientPaymentCondition>('collectionPeriod'),
      nameof<IPatientPaymentCondition>('paymentDate'),
      nameof<IPatientPaymentCondition>('hourlyRateEnlite'),
      nameof<IPatientPaymentCondition>('monthlyHours'),
      nameof<IPatientPaymentCondition>('validFrom'),
      nameof<IPatientPaymentCondition>('validUntil'),
    ];
    if (!patientPaymentConditionData) throw new Error('Missing entityData');

    const isValid = requeridFieldsNames.find(
      (field) => !patientPaymentConditionData[field as keyof IPatientPaymentCondition]
    );

    return !isValid;
  };
  const onEdit_Diagnostic = () => {
    try {
      if (!patientSchema) throw new Error('missing entitySchema');

      const fieldsNames = [
        nameof<IPatient>('diagnostic'),
        nameof<IPatient>('diagnosisDetails'),
        nameof<IPatient>('urgencyLevel'),
        nameof<IPatient>('previousTreatment'),
        nameof<IPatient>('suicideAttempt'),
        nameof<IPatient>('urgencyLevelComments'),
        nameof<IPatient>('aggresiveBehaviour'),
        nameof<IPatient>('manageMoney'),
        nameof<IPatient>('patientReport'),
        nameof<IPatient>('aggresiveBehaviour'),
        nameof<IPatient>('pathologiesTypes'),
      ];

      const toShowFields = patientEntitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(patientSchema, toShowFields, null, dynamics);

      setEditDiagnosticForm(theForm);

      setEditDiagnosticSideOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };
  const onEdit_TreatmentProf = () => {
    try {
      if (!patientSchema) throw new Error('missing entitySchema');

      const fieldsNames = [nameof<IPatient>('treatmentProfName'), nameof<IPatient>('treatmentProfPhone')];

      const toShowFields = patientEntitySchemaFields.filter((field) => {
        return fieldsNames.includes(field.name);
      });
      const theForm = schemaToForm(patientSchema, toShowFields, null, dynamics);

      setEditDiagnosticForm(theForm);

      setEditDiagnosticSideOpen(true);
    } catch (e: any) {
      handleError(e);
    }
  };

  const onSubmit_Patient = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!patientSchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');

      await updateEntityDataBySchema(
        currentUser.currentUser,
        patientSchema,
        patientEntitySchemaFields,
        docId,
        formData,
        null,
        null
      );

      // cierro sidebar
      closeSideBar();

      await onUpdatePatient();

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  const closeSideBar = () => {
    setEditDiagnosticSideOpen(false);
    setEditTreatmentProfSideOpen(false);
  };
  const isPermittedByRol = (role: string) => {
    //UserDefinedRols.UDR_STAFF_COMMERCIAL
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, role))
    );
  };

  const getColorLabelUrgerncy = (state?: string) => {
    if (!state) return 'info';
    if (state === ApplicantUrgencyLeves.EXTREMELY_URGENT) return 'error';
    if (state === ApplicantUrgencyLeves.URGENT) return 'warning';
  };

  if (loadingData) return <Loader />;

  return (
    <>
      <Grid container spacing={6}>
        <Grid item xs={12}>
          <Card>
            <CardHeader
              title={capitalize(t('diagnostic'))}
              action={
                isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC) ? (
                  <Button
                    variant='contained'
                    onClick={() => {
                      onEdit_Diagnostic();
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('edit'))}
                  </Button>
                ) : (
                  ''
                )
              }
            />
            <CardContent>
              <Grid container spacing={0}>
                <Grid item xs={12} md={12}>
                  <TextInfo title={'diagnostic'} value={patientData.diagnostic}></TextInfo>
                  <TextInfo title={'details'} value={patientData.diagnosisDetails}></TextInfo>
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextInfo
                    title={'urgency'}
                    value={patientData.urgencyLevel ?? ''}
                    color={getColorLabelUrgerncy(patientData.urgencyLevel ?? '')}
                  ></TextInfo>
                  <TextInfo title={'was assisted before'} value={patientData.previousTreatment}></TextInfo>
                  <TextInfo title={'suicidal thoughts'} value={patientData.suicideAttempt}></TextInfo>
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'comments'} value={patientData.urgencyLevelComments}></TextInfo>
                  <TextInfo title={'aggressive behavior'} value={patientData.aggresiveBehaviour}></TextInfo>
                  <TextInfo title={'cash management'} value={patientData.manageMoney}></TextInfo>
                </Grid>

                <Grid item xs={12} md={12}>
                  <TextInfo title={'patient story'} value={patientData.patientReport}></TextInfo>
                  <TextInfo title={'pathologies types'} value={patientData.pathologiesTypes}></TextInfo>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
          {!!editDiagnosticSideOpen && (
            <DynamicFormSidebar
              isCreating={false}
              onSubmit={onSubmit_Patient}
              title={'Edit diagnostic'}
              formId={'Edit_diagnostic'}
              initialValues={patientData}
              preloadForm={editDiagnosticForm}
              open={editDiagnosticSideOpen}
              toggle={toggleEditDiagnosticDrawer}
              onSubmitDone={() => {
                toggleEditDiagnosticDrawer();

                return Promise.resolve();
              }}
            />
          )}
        </Grid>
        <Grid item xs={12}>
          <Card>
            <CardHeader
              title={capitalize(t('professional team'))}
              action={
                isPermittedByRol(UserDefinedRols.UDR_STAFF_CLINIC) ? (
                  <Button
                    variant='contained'
                    onClick={() => {
                      onEdit_TreatmentProf();
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('edit'))}
                  </Button>
                ) : (
                  ''
                )
              }
            />
            <CardContent>
              <Grid container spacing={0}>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'fullname'} value={patientData.treatmentProfName}></TextInfo>
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextInfo title={'phone number'} value={patientData.treatmentProfPhone}></TextInfo>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
          {!!editTreatmentProfSideOpen && (
            <DynamicFormSidebar
              isCreating={false}
              onSubmit={onSubmit_Patient}
              title={'Edit treatmentProf'}
              formId={'Edit_treatmentProf'}
              initialValues={patientData}
              preloadForm={editTreatmentProfForm}
              open={editTreatmentProfSideOpen}
              toggle={toggleEditTreatmentProfDrawer}
              onSubmitDone={() => {
                toggleEditTreatmentProfDrawer();

                return Promise.resolve();
              }}
            />
          )}
        </Grid>
      </Grid>
    </>
  );
};

export default ContractedDiagnosticTab;
