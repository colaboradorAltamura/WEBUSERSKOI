// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';
import { ReactElement, Ref, forwardRef, useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
// ** Custom Components Imports
import { Avatar, Button, MenuItem, capitalize } from '@mui/material';
import Box from '@mui/material/Box';
import Dialog from '@mui/material/Dialog';
import DialogContent from '@mui/material/DialogContent';
import Fade, { FadeProps } from '@mui/material/Fade';
import IconButton, { IconButtonProps } from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/material/styles';
import Icon from 'src/@core/components/icon';
import Loader from 'src/@core/components/loader';
import {
  DAY_OF_WEEK_LONG_NAMES,
  getSourceEntityData,
  handleError,
  nameof,
  parseDateToTimeString,
} from 'src/@core/coreHelper';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useDynamics } from 'src/hooks/useDynamics';
import { dynamicCreate, dynamicGet, dynamicRemove, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { CMSCollections, IPatient, IPatientsSchedule, IUsersAddress, IWorker } from 'src/types/@autogenerated';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import ConfigureItineraryModal from './ConfigureItineraryModal';
import { IAvailabilityWeek } from 'src/types/workers';
import { getInitials } from 'src/@core/utils/get-initials';
import CustomTextField from 'src/@core/components/mui/text-field';
import { updateEntityDataBySchema } from '../components/dynamics/helpers';
import WorkerSearch from '../workersSearch';
import OptionsMenu from 'src/@core/components/option-menu';

interface PropsType {
  docId: string;
  patient: IPatient;
  addresses: IUsersAddress[];
}

const Transition = forwardRef(function Transition(
  props: FadeProps & { children?: ReactElement<any, any> },
  ref: Ref<unknown>
) {
  return <Fade ref={ref} {...props} />;
});

const ItineraryTab = ({ docId, patient, addresses }: PropsType) => {
  // ** Hooks
  const { t } = useTranslation();
  const dynamics = useDynamics();
  const currentUser = useCurrentUser();

  // ** State

  const [toggleData, setToggleData] = useState<boolean>(false);

  const [entitySchema, setEntitySchema] = useState<IEntitySchema | null>(null);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>([]);
  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);

  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [patientSchedules, setPatientSchedules] = useState<IPatientsSchedule[]>([]);

  const [selectedPatientSchedule, setSelectedPatientSchedule] = useState<IPatientsSchedule | null>(null);

  const [showAddPatientScheduleModal, setShowAddPatientScheduleModal] = useState<boolean>(false);

  const [showSelectAddressModal, setShowSelectAddressModal] = useState<boolean>(false);
  const [showSelectWorkerModal, setShowSelectWorkerModal] = useState<boolean>(false);

  let initialAddress = null;

  if (addresses && addresses.length) {
    initialAddress = addresses.find((address) => {
      return address.isPrimary;
    });
    if (!initialAddress) initialAddress = addresses[0];
  }

  // const [selectedAddress, setSelectedAddress] = useState<IUsersAddress | null>(initialAddress);

  // fetch schema
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);

        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.PATIENTS_SCHEDULES;
        });

        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.PATIENTS_SCHEDULES);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        //const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);

        // Fetch Fields
        // const entitySchemaFieldsResponse = await listEntitySchemaFields(entitySchemaResponse.id);

        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, [dynamics.isLoadingSchemas]);

  useEffect(() => {
    if (!patient || loadingSchema) return;

    const doAsync = async () => {
      try {
        if (!patient) return;

        setIsLoading(true);

        const patientSchedulesResult = (await dynamicGet({
          params: `/cms/${CMSCollections.PATIENTS_SCHEDULES}/by-user/${patient.id}`,
        })) as { items: IPatientsSchedule[] };

        setPatientSchedules(
          patientSchedulesResult.items.sort((a, b) => {
            return a.dayOfWeek == b.dayOfWeek
              ? new Date(a.startHour).getTime() - new Date(b.startHour).getTime()
              : a.dayOfWeek - b.dayOfWeek;
          })
        );

        setIsLoading(false);
      } catch (e) {
        setIsLoading(false);
        handleError(e);
      }
    };

    doAsync();
  }, [loadingSchema, toggleData]);

  if (isLoading) return <Loader />;

  const CustomCloseButton = styled(IconButton)<IconButtonProps>(({ theme }) => ({
    top: 0,
    right: 0,
    color: 'grey.500',
    position: 'absolute',
    boxShadow: theme.shadows[2],
    transform: 'translate(10px, -10px)',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: `${theme.palette.background.paper} !important`,
    transition: 'transform 0.25s ease-in-out, box-shadow 0.25s ease-in-out',
    '&:hover': {
      transform: 'translate(7px, -5px)',
    },
  }));

  const handleClose = () => {
    setShowAddPatientScheduleModal(false);
    setShowSelectAddressModal(false);
    setShowSelectWorkerModal(false);
  };

  const renderPatientScheduleCard = (patientSchedule: IPatientsSchedule) => {
    let dayOfWeekLabel = '';

    if (patientSchedule.dayOfWeek >= 0 && patientSchedule.dayOfWeek <= 6)
      dayOfWeekLabel = DAY_OF_WEEK_LONG_NAMES[patientSchedule.dayOfWeek].toUpperCase();

    const relatedWorker = getSourceEntityData({
      obj: patientSchedule,
      key: nameof<IPatientsSchedule>('workerId'),
    }) as IWorker | null;

    const workerFullName = relatedWorker ? relatedWorker.firstName + ' ' + relatedWorker.lastName : '-';
    const workerInitials = relatedWorker
      ? getInitials(capitalize(relatedWorker.firstName + ' ' + relatedWorker.lastName))
      : '-';

    const avatarUrl = relatedWorker && relatedWorker.avatarUrl ? relatedWorker.avatarUrl : null;

    const relatedAddress = getSourceEntityData({
      obj: patientSchedule,
      key: nameof<IPatientsSchedule>('userAddressId'),
    }) as IUsersAddress | null;

    return (
      <Card sx={{ mb: 2 }}>
        <CardHeader
          title={capitalize(t(dayOfWeekLabel))}
          action={
            <OptionsMenu
              options={[
                {
                  text: capitalize(t('remove address')),
                  menuItemProps: {
                    sx: { py: 2 },
                    onClick: () => handleRemoveAddress(patientSchedule),
                  },
                },
                {
                  text: capitalize(t('remove terapeut')),
                  menuItemProps: {
                    sx: { py: 2 },
                    onClick: () => handleRemoveTerapeut(patientSchedule),
                  },
                },
                {
                  text: capitalize(t('edit schedule')),
                  menuItemProps: {
                    sx: { py: 2 },
                    onClick: handleAddNewPatientSchedule,
                  },
                },
              ]}
              iconButtonProps={{ size: 'small', sx: { color: 'text.disabled' } }}
            />
          }
        />
        <CardContent sx={{ p: (theme) => `${theme.spacing(3.25, 5, 4.5)} !important` }}>
          {relatedAddress && <Typography sx={{ mb: 3 }}>{relatedAddress?.address.addressString} </Typography>}
          {!relatedAddress && (
            <Button
              onClick={() => {
                handleSelectAddress(patientSchedule);
              }}
              variant='text'
              endIcon={<Icon icon='tabler:map-check' />}
            >
              Define address
            </Button>
          )}
          <Box sx={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'space-between' }}>
            {relatedWorker && (
              <Box sx={{ mr: 2, display: 'flex', alignItems: 'center' }}>
                {avatarUrl && (
                  <Avatar alt={workerFullName} src='/images/avatars/4.png' sx={{ width: 34, height: 34, mr: 2.75 }} />
                )}

                {!avatarUrl && <Avatar sx={{ width: 34, height: 34, mr: 2.75 }}>{workerInitials}</Avatar>}
                <Typography>{workerFullName}</Typography>
              </Box>
            )}

            {!relatedWorker && (
              <Box sx={{ mr: 2, display: 'flex', alignItems: 'center' }}>
                <Button
                  onClick={() => {
                    handleSelectWorker(patientSchedule);
                  }}
                  variant='text'
                  endIcon={<Icon icon='tabler:users' />}
                >
                  Assign terapeut
                </Button>
              </Box>
            )}
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mr: 3.5, '& svg': { mr: 1.25 } }}>
                {`From `}
                <Typography sx={{ ml: 1 }}> {parseDateToTimeString(patientSchedule.startHour)} hs</Typography>
              </Box>
              <Box sx={{ display: 'flex', alignItems: 'center', '& svg': { mr: 1.25 } }}>
                {`to `}
                <Typography sx={{ ml: 1 }}>{parseDateToTimeString(patientSchedule.endHour)} hs</Typography>
              </Box>
            </Box>
          </Box>
        </CardContent>
      </Card>
    );
  };

  const handleAddNewPatientSchedule = () => {
    setShowAddPatientScheduleModal(true);
  };

  const handleOnItineraryUpdate = async (itinerary: IAvailabilityWeek[]) => {
    try {
      setIsLoading(true);

      const promises: Promise<any>[] = [];
      itinerary.forEach((weekItem) => {
        weekItem.timeRanges.forEach((dayItem) => {
          if (!patient.id) throw new Error('missing patient.id');

          const formData: IPatientsSchedule = {
            endHour: dayItem.to,
            startHour: dayItem.from,
            dayOfWeek: weekItem.dayOfWeek,

            // userAddressId: null,
            // workerId: null,
            userId: patient.id,
          };
          if (dayItem.patientScheduleId) {
            promises.push(
              dynamicUpdate({
                params: `/cms/${CMSCollections.PATIENTS_SCHEDULES}/${dayItem.patientScheduleId}`,
                data: formData,
              })
            );
          } else {
            promises.push(dynamicCreate({ params: `/cms/${CMSCollections.PATIENTS_SCHEDULES}`, data: formData }));
          }
        });
      });

      // Filter for those schedules that are not part in the new itinerary
      const patientSchedulesToRemove = patientSchedules.filter(
        (patientSchedule: IPatientsSchedule) =>
          !itinerary.some((dayItem: IAvailabilityWeek) =>
            dayItem.timeRanges.some((timeRange) => timeRange.patientScheduleId == patientSchedule.id)
          )
      );

      // Removes from firestore the eliminated time range / schedule
      patientSchedulesToRemove.forEach((patientSchedule: IPatientsSchedule) => {
        promises.push(dynamicRemove({ params: `/cms/${CMSCollections.PATIENTS_SCHEDULES}/${patientSchedule.id}` }));
      });

      const results = await Promise.all(promises);
      setToggleData(!toggleData);
      setIsLoading(false);
      handleClose();
    } catch (e) {
      setIsLoading(false);
      handleError(e);
    }
  };

  const handleSelectAddress = (patientSchedule: IPatientsSchedule) => {
    setSelectedPatientSchedule(patientSchedule);
    setShowSelectAddressModal(true);
  };

  const handleSelectWorker = (patientSchedule: IPatientsSchedule) => {
    if (!patientSchedule.userAddressId) {
      handleError(new Error('Must select an address first'));

      return;
    }
    setSelectedPatientSchedule(patientSchedule);
    setShowSelectWorkerModal(true);
  };

  const handleOnAddressSelected = async (address: IUsersAddress) => {
    try {
      if (!entitySchema || !entitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/entitySchemaFields/currentUser.currentUser');

      if (!selectedPatientSchedule?.id) throw new Error('missing selectedPatientSchedule.id');
      setIsLoading(true);

      const formData = { [nameof<IPatientsSchedule>('userAddressId')]: address.id };

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        selectedPatientSchedule.id,
        formData,
        null,
        null
      );

      setToggleData(!toggleData);

      setIsLoading(false);
      handleClose();
    } catch (e: any) {
      handleError(e);
      setIsLoading(false);
    }
  };

  const handleOnWorkerSelected = async (worker: IWorker) => {
    try {
      if (!entitySchema || !entitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/entitySchemaFields/currentUser.currentUser');

      if (!selectedPatientSchedule?.id) throw new Error('missing selectedPatientSchedule.id');
      setIsLoading(true);

      const formData = { [nameof<IPatientsSchedule>('workerId')]: worker.id };

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        selectedPatientSchedule.id,
        formData,
        null,
        null
      );

      setToggleData(!toggleData);

      setIsLoading(false);
      handleClose();
    } catch (e: any) {
      handleError(e);
      setIsLoading(false);
    }
  };

  const handleRemoveAddress = async (selectedPatientSchedule: IPatientsSchedule) => {
    try {
      if (!entitySchema || !entitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/entitySchemaFields/currentUser.currentUser');

      if (!selectedPatientSchedule.id) throw new Error('missing selectedPatientSchedule.id');
      setIsLoading(true);

      const formData = {
        [nameof<IPatientsSchedule>('userAddressId')]: null,
        [nameof<IPatientsSchedule>('workerId')]: null,
      };

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        selectedPatientSchedule.id,
        formData,
        null,
        null
      );

      setToggleData(!toggleData);

      setIsLoading(false);
      handleClose();
    } catch (e: any) {
      handleError(e);
      setIsLoading(false);
    }
  };

  const handleRemoveTerapeut = async (selectedPatientSchedule: IPatientsSchedule) => {
    try {
      if (!entitySchema || !entitySchemaFields || !currentUser.currentUser)
        throw new Error('Missing entitySchema/entitySchemaFields/currentUser.currentUser');

      if (!selectedPatientSchedule.id) throw new Error('missing selectedPatientSchedule.id');
      setIsLoading(true);

      const formData = { [nameof<IPatientsSchedule>('workerId')]: null };

      await updateEntityDataBySchema(
        currentUser.currentUser,
        entitySchema,
        entitySchemaFields,
        selectedPatientSchedule.id,
        formData,
        null,
        null
      );

      setToggleData(!toggleData);

      setIsLoading(false);
      handleClose();
    } catch (e: any) {
      handleError(e);
      setIsLoading(false);
    }
  };

  const selectedPatientScheduleAddress: IUsersAddress | null =
    selectedPatientSchedule && selectedPatientSchedule.userAddressId
      ? getSourceEntityData({ obj: selectedPatientSchedule, key: nameof<IPatientsSchedule>('userAddressId') })
      : null;

  const mapPatientSchedulesToAvailabilityWeek = (): IAvailabilityWeek[] => {
    const availabilityWeek: IAvailabilityWeek[] = [];

    patientSchedules.forEach((patientSchedule: IPatientsSchedule) => {
      const dayToModify = availabilityWeek.find(
        (availabilityDay: IAvailabilityWeek) => availabilityDay.dayOfWeek == patientSchedule.dayOfWeek
      );
      if (dayToModify) {
        dayToModify.timeRanges.push({
          from: patientSchedule.startHour,
          to: patientSchedule.endHour,
          patientScheduleId: patientSchedule.id,
        });
      } else {
        availabilityWeek.push({
          dayOfWeek: patientSchedule.dayOfWeek,
          timeRanges: [
            {
              from: patientSchedule.startHour,
              to: patientSchedule.endHour,
              patientScheduleId: patientSchedule.id,
            },
          ],
        });
      }
    });

    return availabilityWeek;
  };

  return (
    <>
      <Card style={{ marginBottom: 10, marginTop: 10 }}>
        <CardHeader
          title={capitalize(t('itinerary'))}
          action={
            <Button
              variant='contained'
              onClick={() => {
                handleAddNewPatientSchedule();
              }}
              sx={{ mr: 4, mb: [2, 0] }}
            >
              {capitalize(t('edit schedule'))}
            </Button>
          }
        />
        <CardContent>
          <Grid container spacing={0}>
            {patientSchedules &&
              patientSchedules.map((item, index) => {
                return (
                  <Grid item xs={12} key={index}>
                    {renderPatientScheduleCard(item)}
                  </Grid>
                );
              })}
          </Grid>
        </CardContent>
      </Card>

      <Card>
        <CardHeader title={capitalize(t('Next events'))} />
        <CardContent>
          <Grid container spacing={0}>
            <Grid item xs={12}>
              {/* <Divider sx={{ m: '0 !important' }} /> */}
              {isLoading && <Loader />}
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Define ITINERARY Modal */}
      <Dialog
        fullWidth
        open={showAddPatientScheduleModal}
        scroll='body'
        maxWidth='md'
        onClose={handleClose}
        TransitionComponent={Transition}
        sx={{ '& .MuiDialog-paper': { overflow: 'visible' } }}
      >
        <DialogContent
          sx={{
            pr: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pl: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(11)} !important`],
            py: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
          }}
        >
          <CustomCloseButton onClick={handleClose}>
            <Icon icon='tabler:x' fontSize='1.25rem' />
          </CustomCloseButton>
          <Box sx={{ mb: 8, textAlign: 'center' }}>
            <Typography variant='h5' sx={{ mb: 3 }}>
              Create itinerary
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
            <ConfigureItineraryModal
              onItineraryUpdate={handleOnItineraryUpdate}
              initialData={mapPatientSchedulesToAvailabilityWeek()}
            />
          </Box>
        </DialogContent>
      </Dialog>

      {/* Define ADDRESS Modal */}
      <Dialog
        fullWidth
        open={showSelectAddressModal}
        scroll='body'
        maxWidth='md'
        onClose={handleClose}
        TransitionComponent={Transition}
        sx={{ '& .MuiDialog-paper': { overflow: 'visible' } }}
      >
        <DialogContent
          sx={{
            pr: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pl: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(11)} !important`],
            py: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
          }}
        >
          <CustomCloseButton onClick={handleClose}>
            <Icon icon='tabler:x' fontSize='1.25rem' />
          </CustomCloseButton>
          <Box sx={{ mb: 8, textAlign: 'center' }}>
            <Typography variant='h5' sx={{ mb: 3 }}>
              Define Address
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
            <CustomTextField
              select
              fullWidth
              label={t('Patient address')}
              onChange={(event) => {
                const selected = addresses.find((address) => {
                  return address.id === event.target.value;
                });

                if (selected) handleOnAddressSelected(selected);
              }}
              // value={selectedAddress?.id} // para que no venga ninguna inicializada
            >
              {!!addresses &&
                addresses.map((op, index) => {
                  return (
                    <MenuItem key={index} value={op.id}>
                      {/* <em>None</em> */}
                      {op.address.addressString}
                    </MenuItem>
                  );
                })}
            </CustomTextField>
          </Box>
        </DialogContent>
      </Dialog>

      {/* Define WORKER Modal */}
      <Dialog
        fullWidth
        open={showSelectWorkerModal}
        scroll='body'
        maxWidth='md'
        onClose={handleClose}
        TransitionComponent={Transition}
        sx={{ '& .MuiDialog-paper': { overflow: 'visible' } }}
      >
        <DialogContent
          sx={{
            pr: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pl: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(11)} !important`],
            py: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
          }}
        >
          <CustomCloseButton onClick={handleClose}>
            <Icon icon='tabler:x' fontSize='1.25rem' />
          </CustomCloseButton>
          <Box sx={{ mb: 8, textAlign: 'center' }}>
            <Typography variant='h5' sx={{ mb: 3 }}>
              Assign worker
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
            <WorkerSearch
              onWorkerSelected={handleOnWorkerSelected}
              addresses={addresses}
              initialAddress={selectedPatientScheduleAddress}
            />
          </Box>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ItineraryTab;
