// ** MUI Imports
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Typography from '@mui/material/Typography';

// ** Types
import { hexToRGBA } from 'src/@core/utils/hex-to-rgba';

// ** Custom Components Imports
import { Button } from '@mui/material';
import { useEffect, useState } from 'react';
import Loader from 'src/@core/components/loader';
import CustomChip from 'src/@core/components/mui/chip';
import OptionsMenu from 'src/@core/components/option-menu';
import { getSourceEntityData, handleError } from 'src/@core/coreHelper';
import { formatDate } from 'src/@core/utils/format';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { EnliteServices, IPatient, PatientsClinicStateTypes } from 'src/types/@autogenerated';
import { IconButton, Tooltip, capitalize } from '@mui/material';
import Icon from 'src/@core/components/icon';
import { useRouter } from 'next/router';

import { ThemeColor } from 'src/@core/layouts/types';
// import { t } from 'i18next';
import { useTranslation } from 'react-i18next';

interface IPatientsListResponse {
  total: number;
  hasMore: boolean;
  items: IPatient[];
}

interface IPatientRow extends IPatient {
  statusColor: ThemeColor;
  statusName: string;
}

const WidgetOldestClinicPatients = () => {
  const router = useRouter();
  const [data, setData] = useState<any[] | null>(null);
  const [compError, setCompError] = useState<any[] | null>(null);

  const { t } = useTranslation();

  useEffect(() => {
    const doAsync = async () => {
      try {
        const response = (await dynamicGet({
          params: '/cms/' + 'patients',
          filters: [
            // {
            //   key: 'clinicStateType',
            //   value: [
            //     PatientsClinicStateTypes.PENDING_INFORMATION,
            //     PatientsClinicStateTypes.PENDING_PARTIAL_INFO,
            //     PatientsClinicStateTypes.PENDING_TRIAGE,
            //     PatientsClinicStateTypes.WAITING_PAYMENT
            //   ],
            //   operator: '$in',
            // },
            {
              key: 'enliteService',
              value: [EnliteServices.CLINIC],
              operator: '$in',
            },
          ],
        })) as IPatientsListResponse;

        const orderedList = response.items.sort(
          (a: IPatient, b: IPatient) => new Date(a.updatedAt as any).getTime() - new Date(b.updatedAt as any).getTime()
        );

        const finalList = orderedList.splice(0, 5);

        console.log('Lista antes del render: ', finalList);
        const dataToRender: IPatientRow[] = [];

        console.log(finalList);
        // Recorro la lista de pacientes para guardar el status y el color de cada estado
        finalList.forEach((patient: IPatient) => {
          const statusName = getSourceEntityData({ obj: patient, key: 'clinicStateType' }).code;
          let statusColor: ThemeColor = 'info';

          if (patient.clinicStateType === PatientsClinicStateTypes.PENDING_TRIAGE) statusColor = 'warning';
          else if (patient.clinicStateType === PatientsClinicStateTypes.WAITING_PAYMENT) statusColor = 'success';

          const patientRow: IPatientRow = { ...patient, statusName: t(statusName), statusColor };

          dataToRender.push(patientRow);
        });
        // console.log(dataToRender);
        setData(dataToRender);
      } catch (e: any) {
        setCompError(e);
      }
    };

    doAsync();
  }, []);

  return (
    <Card
      sx={{
        transform: 'translateY(0)',
      }}
    >
      <CardHeader
        title={t('Oldest open patients')}
        action={<Button onClick={() => router.push(`/patients`)}>{t('View all')}</Button>}
      />
      {!data && <Loader sx={{ marginBottom: 10 }} />}
      {compError && (
        <Typography noWrap variant='h5'>
          Ups! Error de conexi√≥n
        </Typography>
      )}
      {data && (
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow
                sx={{ '& .MuiTableCell-root': { py: 2, borderTop: (theme) => `1px solid ${theme.palette.divider}` } }}
              >
                <TableCell></TableCell>
                <TableCell>{t('name')}</TableCell>
                <TableCell>{t('status')}</TableCell>
                <TableCell>{t('last update')}</TableCell>
              </TableRow>
            </TableHead>

            <TableBody>
              {data.length === 0 && (
                <Typography noWrap variant='h5'>
                  No hay solicitudes abiertas
                </Typography>
              )}
              {data.length > 0 &&
                data.map((row: IPatientRow, index) => {
                  return (
                    <TableRow
                      key={index}
                      sx={{
                        '&:last-child .MuiTableCell-root': { pb: (theme) => `${theme.spacing(6)} !important` },
                        '& .MuiTableCell-root': { border: 0, py: (theme) => `${theme.spacing(2.25)} !important` },
                        '&:first-of-type .MuiTableCell-root': { pt: (theme) => `${theme.spacing(4.5)} !important` },

                        transition: 'background-color 0.3s ease',
                        '&:hover': {
                          backgroundColor: (theme) => hexToRGBA(theme.palette.primary.main, 0.1),
                        },
                      }}
                    >
                      <TableCell>
                        <Tooltip title='Ver contenido'>
                          <IconButton
                            size='small'
                            sx={{ color: 'text.secondary' }}
                            onClick={() => {
                              router.push(`/patients/${row.id}`);
                            }}
                          >
                            <Icon icon='tabler:eye' />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center', '& img': { mr: 4 } }}>
                          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>
                            <Typography
                              noWrap
                              sx={{ fontWeight: 500, color: 'text.secondary', textTransform: 'capitalize' }}
                            >
                              {row.firstName + ' ' + row.lastName}
                            </Typography>
                          </Box>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <CustomChip
                          rounded
                          size='small'
                          skin='light'
                          label={row.statusName}
                          color={row.statusColor}
                          sx={{ textTransform: 'capitalize' }}
                        />
                      </TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>
                          <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                            {formatDate(row.updatedAt as any)}
                          </Typography>
                        </Box>
                      </TableCell>
                    </TableRow>
                  );
                })}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Card>
  );
};

export default WidgetOldestClinicPatients;
