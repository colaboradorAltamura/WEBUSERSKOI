import {
  Box,
  BoxProps,
  Button,
  Card,
  CardContent,
  Drawer,
  Grid,
  IconButton,
  MenuItem,
  Typography,
  styled,
} from '@mui/material';
import { Form, Formik } from 'formik';
import DynamicFormComponent from '../components/dynamics/DynamicFormComponent';
import CustomTextField from 'src/@core/components/mui/text-field';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { DynamicComponentTypes, IForm } from 'src/types/dynamics';
import * as Yup from 'yup';
// ** Icon Imports
import Icon from 'src/@core/components/icon';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { useDynamics } from 'src/hooks/useDynamics';
import {
  BusinessTypes,
  IPatientPaymentCondition,
  IHealthInsuranceAgreement,
  PaymentConditionStateTypes,
} from 'src/types/@autogenerated';
import { nameof } from 'src/@core/coreHelper';
import Loader from 'src/@core/components/loader';
import 'cleave.js/dist/addons/cleave-phone.us';

const BUSINESS_TYPE_SCHEMA_NAME = 'businessTypes';
const PAYMENT_MODE_SCHEMA_NAME = 'paymentModes';
const COMPANY_SCHEMA_NAME = 'companies';
const HEALTH_INSURANCE_AGREEMENTS_SCHEMA_NAME = 'healthInsuranceAgreements';
const CURRENCY_SCHEMA_NAME = 'currencies';
const TAX_CONDITION_SCHEMA_NAME = 'taxConditionTypes';

const STEP_VALIDATIONS_DEFAULT = Yup.object().shape({
  hourlyRateEnlite: Yup.string().required('Field is required'),
  hourlyRateWorker: Yup.string().required('Field is required'),
  paymentDate: Yup.string().required('Field is required'),
  monthlyHours: Yup.string().required('Field is required'),
  validUntil: Yup.date().required('Field is required').min(new Date(), 'Select a valid date'),
  validFrom: Yup.date().required('Field is required').min(new Date(), 'Select a valid date'),
});

const Header = styled(Box)<BoxProps>(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  padding: theme.spacing(6),
  justifyContent: 'space-between',
}));

interface PropsType {
  docId: string;
  formId?: string;
  preloadForm?: IForm | null;
  open: boolean;
  toggle: () => void;
  onSubmit: (formData: any, isCreating: boolean) => Promise<any>;
  onSubmitDone?: (formData: any, isCreating: boolean) => Promise<any>;
  title?: string;
  initialValues: IPatientPaymentCondition | null;
  isCreating?: boolean;
}

const PaymentConditionForm = ({ docId, initialValues, open, title, isCreating, toggle, onSubmit }: PropsType) => {
  // **  HOOKS
  const { t } = useTranslation();
  const dynamics = useDynamics();

  // ** states
  const [paymentConditionData, setPaymentConditionData] = useState<IPatientPaymentCondition>(
    initialValues ? initialValues : ({ userId: docId } as IPatientPaymentCondition)
  );
  const [STEP_VALIDATIONS, setStepValidations] = useState<any>(STEP_VALIDATIONS_DEFAULT);
  const [sidebarTitle, setSidebarTitle] = useState<string | undefined>(title);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);
  const [isFirstLoading, setIsFirstLoading] = useState<boolean>(true);
  const [privateInsuranceDisplay, setPrivateInsuranceDisplay] = useState<string>('grid');

  //options
  const [businessType, setBusinessType] = useState<string>(paymentConditionData?.businessType ?? '');
  const [businessTypeOptions, setBusinessTypeOptions] = useState<any[]>([]);

  const [paymentMode, setPaymentMode] = useState<string>(paymentConditionData?.paymentMode ?? '');
  const [paymentModeOptions, setPaymentModeOptions] = useState<any[]>([]);

  const [companyId, setCompanyId] = useState<string>('');
  const [companyOptions, setCompanyOptions] = useState<any[]>([]);

  const [currency, setCurrency] = useState<string>('');
  const [currencyOptions, setCurrencyOptions] = useState<any[]>([]);

  const [taxCondition, setTaxCondition] = useState<string>('');
  const [taxConditionOptions, setTaxConditionOptions] = useState<any[]>([]);

  const [paymentDate, setPaymentDate] = useState<string>('');

  const [agreementId, setAgreementId] = useState<string>('');
  const [agreementOptions, setAgreementOptions] = useState<any[]>([]);
  const [agreementOptionsFiltered, setAgreementOptionsFiltered] = useState<any[]>([]);

  const [validFrom, setValidFrom] = useState<Date>(new Date());
  const [validUntil, setValidUntil] = useState<Date>(new Date());

  const getOptions = async (schema: string) => {
    try {
      const optionsData: any = await dynamicGet({ params: '/cms/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };

  const filterAgreements = async (companyId: string) => {
    setAgreementOptionsFiltered(agreementOptions.filter((agreement) => agreement.companyId == companyId));
  };

  const setValuesByAgreement = async (agreementId: string) => {
    const agreementSelected = agreementOptions.find((item) => item.id == agreementId) as IHealthInsuranceAgreement;

    if (agreementSelected) {
      if (agreementSelected.currency) setCurrency(agreementSelected.currency);
      if (agreementSelected.taxCondition) setTaxCondition(agreementSelected.taxCondition);

      if (paymentConditionData) {
        paymentConditionData.hourlyRateEnlite = agreementSelected.hourlyRateEnlite ?? '';
        paymentConditionData.validFrom = agreementSelected.validFrom ?? new Date();
        paymentConditionData.validUntil = agreementSelected.validUntil ?? new Date();
      }
    }
  };

  const resetAgreementValues = () => {
    setCurrency('');
    setTaxCondition('');

    if (paymentConditionData) {
      paymentConditionData.hourlyRateEnlite = 0;
      paymentConditionData.validFrom = new Date();
      paymentConditionData.validUntil = new Date();
    }
  };
  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setBusinessTypeOptions(await getOptions(BUSINESS_TYPE_SCHEMA_NAME));
        setPaymentModeOptions(await getOptions(PAYMENT_MODE_SCHEMA_NAME));
        setCompanyOptions(await getOptions(COMPANY_SCHEMA_NAME));
        setAgreementOptions(await getOptions(HEALTH_INSURANCE_AGREEMENTS_SCHEMA_NAME));
        setCurrencyOptions(await getOptions(CURRENCY_SCHEMA_NAME));
        setTaxConditionOptions(await getOptions(TAX_CONDITION_SCHEMA_NAME));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);

  useEffect(() => {
    if (paymentConditionData && !loadingOptions) {
      setCompanyId(paymentConditionData.healthInsuranceId ? paymentConditionData.healthInsuranceId : '');
      setAgreementId(
        paymentConditionData.healthInsuranceAgreementId ? paymentConditionData.healthInsuranceAgreementId : ''
      );
    }
  }, [loadingOptions]);

  // ** Effects
  useEffect(() => {
    if (companyId) {
      filterAgreements(companyId);
      resetAgreementValues(); //resets all values might come from agreements
    }
  }, [companyId]);

  // ** Effects
  useEffect(() => {
    if (agreementId) {
      setValuesByAgreement(agreementId);
    }
  }, [agreementId]);

  const handleSubmit = async (values: any, actions: any) => {
    try {
      //setSubmitError(null);
      actions.setSubmitting(true);

      // clono para no modificar el original del form
      const itemValues = { ...values };

      const keys = Object.keys(itemValues);

      keys.forEach((key) => {
        const itemValue = itemValues[key];
        if (!itemValue.isOptionField) return;

        itemValues[key] = itemValue.value;
      });

      if (isCreating)
        //only if  is creating...
        itemValues[nameof<IPatientPaymentCondition>('paymentConditionsState')] = PaymentConditionStateTypes.ACTIVE;

      itemValues[nameof<IPatientPaymentCondition>('businessType')] = businessType;
      itemValues[nameof<IPatientPaymentCondition>('paymentMode')] = paymentMode;
      itemValues[nameof<IPatientPaymentCondition>('healthInsuranceAgreementId')] = agreementId;
      itemValues[nameof<IPatientPaymentCondition>('healthInsuranceId')] = companyId;
      //   itemValues[nameof<IPatientPaymentCondition>('paymentDate')] = paymentDate;
      itemValues[nameof<IPatientPaymentCondition>('taxCondition')] = taxCondition;

      onSubmit(itemValues, actions);
      toggle();

      actions.setSubmitting(false);
    } catch (e) {
      actions.setSubmitting(false);
    }
  };
  const handleClose = () => {
    toggle();
  };
  const onChangeBusinessType = (value: string) => {
    if (value) {
      setBusinessType(value);

      if (value == BusinessTypes.PRIVATE_INSURANCE) {
        setPrivateInsuranceDisplay('none'); //hides health insurance and health insurance agreement selects
        //initialize health insurance and health insurance agreement selects
        setCompanyId('');
        setAgreementId('');
        resetAgreementValues(); //resets all values might come from agreements
      } else setPrivateInsuranceDisplay('grid'); //shows health insurance and health insurance agreement selects
    }
  };

  return (
    <>
      <Drawer
        open={open}
        anchor='right'
        variant='temporary'
        onClose={handleClose}
        ModalProps={{ keepMounted: true }}
        sx={{ '& .MuiDrawer-paper': { width: { xs: 300, sm: 400 } } }}
      >
        <Header>
          <Typography variant='h5'>{sidebarTitle}</Typography>
          <IconButton
            size='small'
            onClick={handleClose}
            sx={{
              p: '0.438rem',
              borderRadius: 1,
              color: 'text.primary',
              backgroundColor: 'action.selected',
              '&:hover': {
                backgroundColor: (theme) =>
                  `rgba(${theme.palette.customColors ? theme.palette.customColors.main : ''}, 0.16)`,
              },
            }}
          >
            <Icon icon='tabler:x' fontSize='1.125rem' />
          </IconButton>
        </Header>
        <Box sx={{ p: (theme) => theme.spacing(0, 6, 6) }}>
          {open && (
            <Formik
              enableReinitialize={true}
              initialValues={paymentConditionData}
              validationSchema={STEP_VALIDATIONS}
              onSubmit={handleSubmit}
            >
              {({ values, errors, touched, isSubmitting }) => (
                <Form id={'paymentConditionForm'} autoComplete='off'>
                  <Card>
                    <CardContent sx={{ width: '100%' }}>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('payment method') as string}
                            id='businessType'
                            value={businessType}
                            onChange={(e) => onChangeBusinessType(e.target.value)}
                          >
                            {businessTypeOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.code}>
                                  {t(item.name)}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('paymentMode') as string}
                            id='paymentMode'
                            defaultValue={paymentMode}
                            onChange={(e) => setPaymentMode(e.target.value)}
                          >
                            {paymentModeOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.code}>
                                  {t(item.name)}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5, display: privateInsuranceDisplay }}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('health insurance') as string}
                            id='healthInsurance'
                            value={companyId}
                            onChange={(e) => setCompanyId(e.target.value)}
                          >
                            {companyOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.id}>
                                  {t(item.name)}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5, display: privateInsuranceDisplay }}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('agreement') as string}
                            id='healthAgreement'
                            value={agreementId}
                            onChange={(e) => setAgreementId(e.target.value)}
                          >
                            {agreementOptionsFiltered.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.id}>
                                  {t(item.name)}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('currency') as string}
                            id='currency'
                            value={currency}
                            onChange={(e) => setCurrency(e.target.value)}
                          >
                            {currencyOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.code}>
                                  {t(item.name)}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <DynamicFormComponent
                            component={{
                              id: 'hourlyRateEnlite',
                              name: 'hourlyRateEnlite',
                              label: t('hourRateEnlite') as string,
                              initialValue: '',
                              type: DynamicComponentTypes.FORM_TEXT,
                              dimensions: { xs: 12, sm: 12 },
                              errorMsg: t('field required msj') as string,
                            }}
                            isCreating={isCreating}
                          />
                        </Box>
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: 'hourlyRateWorker',
                            name: 'hourlyRateWorker',
                            label: t('hourRateWorker') as string,
                            type: DynamicComponentTypes.FORM_TEXT,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: 'paymentDate',
                            name: 'paymentDate',
                            label: t('payment day') as string,
                            type: DynamicComponentTypes.FORM_NUMBER,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: 'monthlyHours',
                            name: 'monthlyHours',
                            label: t('monthlyHours') as string,
                            type: DynamicComponentTypes.FORM_TEXT,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <CustomTextField
                          select
                          fullWidth
                          label={t('taxCondition') as string}
                          id='taxCondition'
                          value={taxCondition}
                          onChange={(e) => setTaxCondition(e.target.value)}
                        >
                          {taxConditionOptions.map((item: any, index: any) => {
                            return (
                              <MenuItem key={index} value={item.code}>
                                {t(item.name)}
                              </MenuItem>
                            );
                          })}
                        </CustomTextField>
                      </Grid>

                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: '',
                            name: 'validFrom',
                            initialValue: { validFrom },
                            label: t('validFrom') as string,
                            type: DynamicComponentTypes.FORM_DATE,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('valid date msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: '',
                            name: 'validUntil',
                            initialValue: { validUntil },
                            label: t('validUntil') as string,
                            type: DynamicComponentTypes.FORM_DATE,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('valid date msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} sx={{ marginBottom: 5 }}>
                        <DynamicFormComponent
                          component={{
                            id: 'collectionPeriod',
                            name: 'collectionPeriod',
                            label: t('collectionPeriod ') as string,
                            type: DynamicComponentTypes.FORM_NUMBER,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={isCreating}
                        />
                      </Grid>
                      <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                          <Button variant='contained' type={'submit'} disabled={isSubmitting}>
                            Submit
                          </Button>
                        </Box>
                      </Grid>
                    </CardContent>
                  </Card>
                </Form>
              )}
            </Formik>
          )}
        </Box>
      </Drawer>
    </>
  );
};

export default PaymentConditionForm;
