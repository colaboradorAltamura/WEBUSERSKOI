// ** React Imports
import { ReactNode, useEffect, useState } from 'react';

// ** Next Import

// ** MUI Components
import Alert from '@mui/material/Alert';
import Box, { BoxProps } from '@mui/material/Box';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import Typography from '@mui/material/Typography';
import { styled, useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';

import * as yup from 'yup';

// ** Custom Component Import
import CustomTextField from 'src/@core/components/mui/text-field';

// ** Icon Imports
import Icon from 'src/@core/components/icon';

// ** Layout Import
import BlankLayout from 'src/@core/layouts/BlankLayout';

// ** Hooks
import useBgColor from 'src/@core/hooks/useBgColor';
import { useSettings } from 'src/@core/hooks/useSettings';

// ** Demo Imports

import { Grid, Link, MenuItem, Toolbar } from '@mui/material';
import { Form, Formik, FormikHelpers } from 'formik';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import Loader from 'src/@core/components/loader';
import { capitalize, handleError } from 'src/@core/coreHelper';
import LanguageDropdown from 'src/@core/layouts/components/shared-components/LanguageDropdown';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import { useAuth } from 'src/hooks/useAuth';
import { dynamicGet } from 'src/services/entitiesDynamicServices'; // ** Source code imports
import {
  CMSCollections,
  PersonIdentificationTypes,
  SexTypes,
  WorkerProfessionTypes,
  PatientsClinicStateTypes,
  EnliteServices,
} from 'src/types/@autogenerated';
import { DynamicComponentTypes } from 'src/types/dynamics';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
// ** Styled Components

const RightWrapper = styled(Box)<BoxProps>(({ theme }) => ({
  width: '100%',
  [theme.breakpoints.up('md')]: {
    maxWidth: 800,
  },
  [theme.breakpoints.up('lg')]: {
    maxWidth: 1100,
  },
  [theme.breakpoints.up('xl')]: {
    maxWidth: 1400,
  },
}));

interface FormData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  passwordConfirmation: string;
  sex: string;
  identificationType: string;
  identificationNumber: string;
  phoneNumber: string;
  clinicStateType: PatientsClinicStateTypes;
  enliteService: EnliteServices;
}

const RegisterPatientsClinic = () => {
  // ** States
  const [showPassword, setShowPassword] = useState<boolean>(false);

  // ** options
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  const [professionOptions, setProfessionOptions] = useState<any[]>([]);
  const [sexOptions, setSexOptions] = useState<any[]>([]);
  const [identificationTypeOptions, setIdentificationTypeOptions] = useState<any[]>([]);

  const [map, setMap] = useState<any>(null);
  const [addressPlace, setAddressPlace] = useState<any>();

  // ** Hooks
  const theme = useTheme();

  const win: any = window;
  const { settings, saveSettings } = useSettings();
  const hidden = useMediaQuery(theme.breakpoints.down('md'));
  const router = useRouter();
  const auth = useAuth();
  const bgColors = useBgColor();
  const { t } = useTranslation();

  // ** Vars
  const registerUrlLink = router.asPath;

  const lng = router.query.lng as string | null;

  const schema = yup.object().shape({
    firstName: yup.string().required(),
    lastName: yup.string().required(),
    email: yup.string().email().required(),
    password: yup.string().min(5).required(),
    sex: yup.string().required(),
    identificationType: yup.string().required(),
    identificationNumber: yup.string().min(5).required(),
    phoneNumber: yup.string().min(10).required(),
    passwordConfirmation: yup.string().test('passwords-match', 'Passwords must match', function (value) {
      return this.parent.password === value;
    }),
  });

  const defaultValues = {
    firstName: '',
    lastName: '',
    password: '',
    passwordConfirmation: '',
    email: '',
    sex: '',
    identificationType: '',
    identificationNumber: '',
    phoneNumber: '',
    clinicStateType: PatientsClinicStateTypes.PENDING_INFORMATION,
    enliteService: EnliteServices.CLINIC,
  };

  const onSuccessRegistration = () => {
    router.replace('/'); //here
  };

  const LinkStyled = styled(Link)(({ theme }) => ({
    textDecoration: 'none',
    color: `${theme.palette.primary.main} !important`,
  }));
  const onSubmit = (values: FormData, actions: FormikHelpers<FormData>) => {
    try {
      if (!addressPlace) throw new Error(t('address missing') as string);
      const {
        firstName,
        lastName,
        email,
        password,
        identificationType,
        identificationNumber,
        phoneNumber,
        sex,
        clinicStateType,
        enliteService,
      } = values;

      actions.setSubmitting(true);

      auth.register(
        {
          firstName,
          lastName,
          email,
          password,
          identificationType,
          identificationNumber,
          phoneNumber,
          sex,
          address: addressPlace,
          clinicStateType,
          enliteService,
          registerUrlLink,
        },
        onSuccessRegistration,
        (errorData) => {
          actions.setSubmitting(false);
          handleError(new Error(errorData.errorMessage));

          // setError('email', {
          //   type: 'manual',
          //   message: errorData.errorMessage,
          // });
        }
      );
    } catch (error) {
      actions.setSubmitting(false);

      handleError(error);
    }
  };

  // ** Effects

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setSexOptions(await getOptions(CMSCollections.SEX_TYPES));
        setIdentificationTypeOptions(await getOptions(CMSCollections.PERSON_IDENTIFICATION_TYPES));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);

  useEffect(() => {
    if (!map || !addressPlace) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    const marker = new win.google.maps.Marker({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      id: 1, //to do check on this
      map: map,
      icon: image,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);
    map.setZoom(Math.min(map.getZoom(), 12));
  }, [addressPlace, map]);

  // useEffect(() => {
  //   if (!win.google) return;

  // const mapAux = new win.google.maps.Map(document.getElementById('map-canvas'), {
  //   center: {
  //     lat: -34.603008, //lat and long Buenos Aires
  //     lng: -58.3794688,
  //   },
  //   zoom: 12,
  // });

  //   setMap(mapAux);
  // }, [win.google]);

  const getOptions = async (schema: string) => {
    try {
      const optionsData: any = await dynamicGet({ params: '/cms/public/' + DEFAULT_ORGANIZATION_ID + '/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };

  const backgroundImage = {
    backgroundImage: `url('/images/banners/banner-main.png')`,
    backgroundSize: 'cover',
    backgroundPosition: 'center center',
    height: '100vh',
  };

  const onPlaceSelected = (place: any) => {
    setAddressPlace(place);
  };

  return (
    <Box className='content-right' sx={{ ...backgroundImage, justifyContent: 'center', textAlign: 'center' }}>
      <RightWrapper>
        <Box sx={{ top: 0, right: 0, mb: 10, display: 'right', position: 'absolute', alignItems: 'right' }}>
          <Toolbar sx={{ ml: 2.5, top: 0, fontWeight: 600, lineHeight: '24px', fontSize: '1.375rem' }}>
            <Box sx={{ alignItems: 'right', justifyContent: 'right', right: 0, top: 0, mb: 10 }}>
              <LanguageDropdown settings={settings} saveSettings={saveSettings} />
            </Box>
          </Toolbar>
        </Box>
        <Box
          sx={{
            p: [6, 12],
            height: '100%',
            width: '100%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          <Box sx={{ width: '100%', maxWidth: 650 }}>
            <Box sx={{ display: 'inline', marginBottom: '10px' }}>
              {/* <BannersWorker /> */}
              <Typography variant='h3' sx={{ mb: 1.5 }}>
                <img src='/images/logos/enlite-rosa.png' alt='Logo' width='' />
                {/* {t('worker registration title')} */}
              </Typography>
              <Typography sx={{ color: 'text.secondary', mb: 2 }}>
                Register to begin your journey with {<strong style={{ color: '#F562C5' }}>enlite</strong>}
              </Typography>
            </Box>
            {!!auth.authError && (
              <Alert icon={false} sx={{ py: 3, mb: 6, ...bgColors.errorLight, '& .MuiAlert-message': { p: 0 } }}>
                <Typography variant='body2' sx={{ mb: 2, color: 'primary.main' }}>
                  <strong>{auth.authError.message}</strong>
                </Typography>
              </Alert>
            )}
            <Formik
              enableReinitialize={true}
              initialValues={defaultValues}
              validationSchema={schema}
              onSubmit={onSubmit}
            >
              {({ values, errors, touched, isSubmitting, setValues }) => (
                <Form id={'registerForm'} autoComplete='off'>
                  {isSubmitting && <Loader />}

                  <Grid item sm={6} md={6} xs={6}>
                    <Grid container spacing={5} sx={{ mb: 4 }}>
                      <Grid item xs={12} sm={6}>
                        <DynamicFormComponent
                          component={{
                            id: 'firstName',
                            name: 'firstName',
                            placeholder: t('first name') as string,
                            type: DynamicComponentTypes.FORM_TEXT,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={true}
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <DynamicFormComponent
                          component={{
                            id: 'lastName',
                            name: 'lastName',

                            placeholder: t('last name') as string,
                            type: DynamicComponentTypes.FORM_TEXT,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={true}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12}>
                        <DynamicFormComponent
                          component={{
                            id: 'email',
                            name: 'email',
                            placeholder: t('email') as string,
                            type: DynamicComponentTypes.FORM_EMAIL,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={true}
                        />
                      </Grid>
                      <Grid item xs={12} sm={3}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            id='identificationType'
                            label={t('identification type') as string}
                            error={errors && errors['identificationType'] ? true : false}
                            helperText={errors['identificationType'] ? (t('field required msj') as string) : ''}
                            onChange={(e) =>
                              setValues({
                                ...values,
                                identificationType: e.target.value as PersonIdentificationTypes,
                              })
                            }
                          >
                            {identificationTypeOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} value={item.code}>
                                  {capitalize(t(item.name))}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>

                      <Grid item xs={12} sm={5}>
                        <DynamicFormComponent
                          component={{
                            id: 'identificationNumber',
                            name: 'identificationNumber',
                            label: t('identificationNumber') as string,
                            type: DynamicComponentTypes.FORM_TEXT,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={true}
                        />
                      </Grid>

                      <Grid item xs={12} sm={4}>
                        {loadingOptions ? (
                          <Loader />
                        ) : (
                          <CustomTextField
                            select
                            fullWidth
                            label={t('sex') as string}
                            id='sex'
                            error={errors && errors['sex'] ? true : false}
                            helperText={errors['sex'] ? (t('field required msj') as string) : ''}
                            onChange={(e) =>
                              setValues({
                                ...values,
                                sex: e.target.value as SexTypes,
                              })
                            }
                          >
                            {sexOptions.map((item: any, index: any) => {
                              return (
                                <MenuItem key={index} id={index} value={item.code}>
                                  {capitalize(t(item.name))}
                                </MenuItem>
                              );
                            })}
                          </CustomTextField>
                        )}
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <DynamicFormComponent
                          component={{
                            id: 'phoneNumber',
                            name: 'phoneNumber',
                            label: t('phone number') as string,
                            type: DynamicComponentTypes.FORM_PHONE_NUMBER,
                            dimensions: { xs: 12, sm: 12 },
                            errorMsg: t('field required msj') as string,
                          }}
                          isCreating={true}
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <CustomTextField
                          fullWidth
                          label={''}
                          placeholder={t('password') as string}
                          id='password'
                          onChange={(e) =>
                            setValues({
                              ...values,
                              password: e.target.value as string,
                            })
                          }
                          error={errors && errors['password'] ? true : false}
                          helperText={errors['password'] ? (t('field required msj') as string) : ''}
                          type={showPassword ? 'text' : 'password'}
                          InputProps={{
                            endAdornment: (
                              <InputAdornment position='end'>
                                <IconButton
                                  edge='end'
                                  onMouseDown={(e) => e.preventDefault()}
                                  onClick={() => setShowPassword(!showPassword)}
                                >
                                  <Icon fontSize='1.25rem' icon={showPassword ? 'tabler:eye' : 'tabler:eye-off'} />
                                </IconButton>
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <CustomTextField
                          fullWidth
                          label={''}
                          placeholder={t('password confirmation') as string}
                          id='passwordConfirmation'
                          onChange={(e) =>
                            setValues({
                              ...values,
                              passwordConfirmation: e.target.value as string,
                            })
                          }
                          error={Boolean(errors.passwordConfirmation)}
                          {...(errors.passwordConfirmation && { helperText: errors.passwordConfirmation })}
                          type={showPassword ? 'text' : 'password'}
                          InputProps={{
                            endAdornment: (
                              <InputAdornment position='end'>
                                <IconButton
                                  edge='end'
                                  onMouseDown={(e) => e.preventDefault()}
                                  onClick={() => setShowPassword(!showPassword)}
                                >
                                  <Icon fontSize='1.25rem' icon={showPassword ? 'tabler:eye' : 'tabler:eye-off'} />
                                </IconButton>
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Grid>
                      <Grid item xs={12} sm={12}>
                        <FormLocationField
                          label={''}
                          placeholder={t('address')}
                          value={addressPlace ? addressPlace.addressString : ''}
                          onPlaceSelected={(place: any) => {
                            onPlaceSelected(place);
                          }}
                        />
                      </Grid>

                      {/* <Grid item xs={12}>
                        <Card>
                          <Divider sx={{ m: '0 !important' }} />
                          <div id='map-canvas' style={{ height: 200 }} />
                        </Card>
                      </Grid> */}
                    </Grid>
                  </Grid>

                  <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important`, mb: '4vh' }}>
                    <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                      <Button fullWidth variant='contained' type='submit' disabled={isSubmitting}>
                        {capitalize(t('sign up') as string)}
                      </Button>
                    </Box>
                  </Grid>
                  <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', justifyContent: 'center' }}>
                    <Typography sx={{ color: 'text.secondary', mr: 2 }}>Already a member?</Typography>
                    <Typography href={`/login/care`} component={LinkStyled}>
                      Login
                    </Typography>
                  </Box>
                </Form>
              )}
            </Formik>
          </Box>
        </Box>
      </RightWrapper>
    </Box>
  );
};

RegisterPatientsClinic.getLayout = (page: ReactNode) => <BlankLayout>{page}</BlankLayout>;

RegisterPatientsClinic.guestGuard = true;

export default RegisterPatientsClinic;
