// ** MUI Imports
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import Typography from '@mui/material/Typography';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import { capitalize } from '@mui/material';
import { hexToRGBA } from 'src/@core/utils/hex-to-rgba';

// ** Third Party Imports
import { Tooltip, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { useEffect, useState } from 'react';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { ApplicantsStateTypes, IApplicant } from 'src/types/@autogenerated';
import { useTranslation } from 'react-i18next';
import { useRouter } from 'next/router';

// ** Icon Imports
import Icon from 'src/@core/components/icon';

interface LabelProp {
  cx: number;
  cy: number;
  percent: number;
  midAngle: number;
  innerRadius: number;
  outerRadius: number;
}
interface IApplicantsListResponse {
  total: number;
  hasMore: boolean;
  items: IApplicant[];
}

const RADIAN = Math.PI / 180;
const renderCustomizedLabel = (props: LabelProp) => {
  // ** Props
  const { cx, cy, midAngle, innerRadius, outerRadius, percent } = props;

  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);

  return (
    <text x={x} y={y} fill='#fff' textAnchor='middle' dominantBaseline='central'>
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  );
};

interface IPieChartData {
  name: string;
  value: number;
  color: string;
}
interface IPieChartProps {
  title: string;
  data: any[];
  emptyError: string;
  actionRoute?: string;
  actionTitle?: string;
}

const RechartsPieChart = (props: IPieChartProps) => {
  const { title, data, emptyError, actionRoute, actionTitle } = props;
  // const [data, setData] = useState<any[]>([]);
  const router = useRouter();
  const { t } = useTranslation();

  return (
    <Card
      sx={{
        height: '100%',
        backgroundColor: (theme) => hexToRGBA(theme.palette.primary.main, 0.05),
        transform: 'translateY(0)',
        transition: 'background-color 0.3s ease, transform 0.3s ease',
        '&:hover': {
          backgroundColor: (theme) => hexToRGBA(theme.palette.primary.main, 0.2),
          transform: 'translateY(-4px)',
        },
      }}
    >
      <CardHeader
        title={title}
        subheaderTypographyProps={{ sx: { color: (theme) => `${theme.palette.text.disabled} !important` } }}
        action={
          actionRoute &&
          actionTitle && (
            <Button onClick={() => router.push(actionRoute)} color='primary'>
              {capitalize(t(actionTitle))}
            </Button>
          )
        }
      />
      <CardContent
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          height: '100%',
        }}
      >
        <Box sx={{ height: 300, width: '50%' }}>
          {' '}
          {/* No lo toques mati */}
          <ResponsiveContainer>
            <PieChart height={350} style={{ direction: 'ltr' }}>
              {data && (
                <Pie data={data} innerRadius={60} dataKey='value' label={renderCustomizedLabel} labelLine={false}>
                  {data.length === 0 && (
                    <Typography noWrap variant='h5'>
                      {emptyError}
                    </Typography>
                  )}
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
              )}
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </Box>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', mb: 4, justifyContent: 'center' }}>
          {data &&
            data.map((row, idx) => (
              <Box
                sx={{
                  mr: 6,
                  display: 'flex',
                  alignItems: 'center',
                  '& svg': { mr: 1.5, color: `${row.color}` },
                }}
                key={idx}
              >
                <Icon icon='mdi:circle' fontSize='0.75rem' />
                <Typography variant='body2'>{capitalize(row.name)}</Typography>
              </Box>
            ))}
          {/* <Box
            sx={{
              mr: 6,
              display: 'flex',
              alignItems: 'center',
              '& svg': { mr: 1.5, color: '#FF9F43' },
            }}
          >
            <Icon icon='mdi:circle' fontSize='0.75rem' />
            <Typography variant='body2'>Agendar entrevista</Typography>
          </Box>
          <Box
            sx={{
              mr: 8,
              display: 'flex',
              alignItems: 'center',
              '& svg': { mr: 1.5, color: '#ffe700' },
            }}
          >
            <Icon icon='mdi:circle' fontSize='0.75rem' />
            <Typography variant='body2'>Esperando entrevista</Typography>
          </Box>
          <Box
            sx={{
              mr: 6,
              display: 'flex',
              alignItems: 'center',
              '& svg': { mr: 1.5, color: '#00CFE8' },
            }}
          >
            <Icon icon='mdi:circle' fontSize='0.75rem' />
            <Typography variant='body2'>Presupuesto pendiente</Typography>
          </Box>
          <Box sx={{ display: 'flex', alignItems: 'center', '& svg': { mr: 1.5, color: '#28C76F' } }}>
            <Icon icon='mdi:circle' fontSize='0.75rem' />
            <Typography variant='body2'>Listo para convertir</Typography>
          </Box> */}
        </Box>
      </CardContent>
    </Card>
  );
};

export default RechartsPieChart;
