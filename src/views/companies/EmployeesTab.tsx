// formik components

import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import { useEffect, useState } from 'react';
import Icon from 'src/@core/components/icon';
import Loader from 'src/@core/components/loader';
import {
  USERS_SCHEMA,
  getSourceEntityData,
  handleError,
  nameof,
  parseDateToDateTimeString,
  splitByUppercase,
  hasRole,
} from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields, ISelectOptionEntity } from 'src/types/entities';

import { DataGrid, GridColDef } from '@mui/x-data-grid';

import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import CustomChip from 'src/@core/components/mui/chip';

import { useRouter } from 'next/router';

import { CardContent, Divider, Grid, IconButton, MenuItem, Tooltip, capitalize } from '@mui/material';
import { ThemeColor } from 'src/@core/layouts/types';

import Fuse from 'fuse.js';
import { useTranslation } from 'react-i18next';
import CustomAvatar from 'src/@core/components/mui/avatar';
import CustomTextField from 'src/@core/components/mui/text-field';
import { getInitials } from 'src/@core/utils/get-initials';
import { useDynamics } from 'src/hooks/useDynamics';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { IUserBasicData, CompanyEmployeeRoleTypes, ICompanyEmployee } from 'src/types/@autogenerated';
import { IForm } from 'src/types/dynamics';
import { CMSCollections } from 'src/types/@autogenerated';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import { formatDate } from 'src/@core/utils/format';
import { createEntityDataBySchema, schemaToForm } from 'src/views/components/dynamics/helpers';
import DynamicFormSidebar from 'src/views/components/dynamics/DynamicFormSidebar';

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;

const MenuProps = {
  PaperProps: {
    style: {
      width: 250,
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
    },
  },
};

// Se cambia
const SCHEMA_NAME = CMSCollections.COMPANY_EMPLOYEES;

// Se cambia

interface IEmployeeRow extends ICompanyEmployee {
  showRow?: boolean;
}

interface CellType {
  row: IEmployeeRow;
}

interface PropsType {
  docId: string;
}

const EmployeesTab = ({ docId }: PropsType) => {
  // ** Hooks
  const router = useRouter();
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const queryAction = router.query['action'] as string;

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema | null>(null);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>([]);

  const [entitiesData, setEntitiesData] = useState<IEmployeeRow[]>([]);

  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);

  const [isFirstLoad, setIsFirstLoad] = useState<boolean>(true);

  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });

  const [columns, setColumns] = useState<GridColDef[]>([]);

  const [searchText, setSearchText] = useState<string>('');

  const [userEntitySchema, setUserEntitySchema] = useState<IEntitySchema | null>(null);

  const [userEntitySchemaFields, setUserEntitySchemaFields] = useState<IEntitySchemaField[]>([]);

  const [applicantStateTypeOptions, setApplicantStateTypeOptions] = useState<ISelectOptionEntity[]>([]);

  const [addSidebarOpen, setAddSidebarOpen] = useState<boolean>(queryAction === 'create' ? true : false);

  const [addNewEntityForm, setAddNewEntityForm] = useState<IForm | undefined>();

  const [toggleData, setToggleData] = useState<boolean>(false);

  const APPLICANT_STATE_TYPE_PROP_NAME = 'applicantStateType';

  const toggleAddDrawer = () => setAddSidebarOpen(!addSidebarOpen);

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_COMMERCIAL))
    );
  };

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === SCHEMA_NAME;
        });
        if (!schema) throw new Error('Missing schemaName: ' + SCHEMA_NAME);

        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);
        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        if (!dynamics.entitySchemas || !dynamics.entitySchemasFields)
          throw new Error('dynamic entitySchemas not found');

        const usersSchemaResponse = dynamics.entitySchemas.find((schema) => {
          return schema.name === USERS_SCHEMA.name;
        });
        if (!usersSchemaResponse) throw new Error('Missing schemaName: ' + SCHEMA_NAME);

        const usersSchemaResponseFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === usersSchemaResponse.id;
        });

        setUserEntitySchema(usersSchemaResponse);
        setUserEntitySchemaFields(usersSchemaResponseFields);

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dynamics.isLoadingSchemas]);

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields]);
  // Fetch schema.collectionName
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        setLoadingData(true);

        // load entity data
        const employeesResponse: any = await dynamicGet({
          params: '/cms/' + entitySchema.name + '/by-company/' + docId,
        });

        const employees = employeesResponse.items as ICompanyEmployee[];
        console.log(employees);

        setEntitiesData(
          employees.map((item: ICompanyEmployee) => {
            // if (itemAgreements.length) firstAgreementDueDate = itemAgreements.first((item)=>{return item.})
            // console.log(orderedList);
            // if (orderedList.length) firstAgreementDueDate = orderedList[0].validUntil;

            return {
              ...item,
              showRow: true,
            } as IEmployeeRow;
          }) as IEmployeeRow[]
        );

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, toggleData]);

  // build and set add form
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (loadingSchema || !entitySchema || !entitySchemaFields || !userEntitySchema || !userEntitySchemaFields)
          return;

        updateColumnsData();

        let theForm = null;

        const theEntityForm = schemaToForm(
          entitySchema,
          entitySchemaFields?.filter((field) => {
            // saco el field userId
            return field.name !== 'userId';
          }),
          null,
          dynamics,
          true
        );

        const theUserForm = schemaToForm(
          userEntitySchema,
          userEntitySchemaFields.filter((field) => {
            return field.name !== 'avatarUrl';
          }),
          null,
          dynamics,
          true
        );

        if (!theUserForm.steps[0].title) {
          theUserForm.steps[0].title = 'User';
          theUserForm.steps[0].iconName = 'tabler:user';
        }
        if (theEntityForm.steps.length && !theEntityForm.steps[0].title) {
          theEntityForm.steps[0].title = capitalize(entitySchema.name);
          theEntityForm.steps[0].iconName = 'tabler:code';
        }

        theEntityForm.steps = [...theUserForm.steps, ...theEntityForm.steps];
        theForm = theEntityForm;

        setAddNewEntityForm(theForm);
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadingSchema, entitySchema, entitySchemaFields, userEntitySchema, userEntitySchemaFields]);
  const updateColumnsData = () => {
    // TODO - aca podria jugar con una coleccion de 'layouts' donde defina las cols a mostrar
    // TODO - Los layouts podrian definir si se usan tablas o cards, y las cards que prop usar para cada campo en caso de
    // TODO - incluso las cards podrian ser de estructuras template o creadas por el usuario (designer)
    // TODO - Tmb podria jugar con campos virtuales que puedan ser funciones a lo excel o est√°ticos
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='View Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                router.push(`/employees/${row.companyId}/${row.id}`);
              }}
            >
              <Icon icon='tabler:eye' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'name',
      headerName: t('name') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <CustomAvatar
              skin='light'
              color={'primary'}
              sx={{
                mr: 2.5,
                width: 38,
                height: 38,
                fontWeight: 500,
                fontSize: (theme) => theme.typography.body1.fontSize,
              }}
            >
              {getInitials((row.firstName + ' ' + row.lastName).toUpperCase())}
            </CustomAvatar>

            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                // component={Link}
                // href='/apps/user/view/account'
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  textTransform: 'capitalize',
                }}
              >
                {row.firstName + ' ' + row.lastName}
              </Typography>
              {row.email && (
                <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                  {row.email}
                </Typography>
              )}
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'phone',
      headerName: t('phone') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
            <Typography
              noWrap
              // component={Link}
              // href='/apps/user/view/account'
              sx={{
                fontWeight: 500,
                textDecoration: 'none',
                color: 'text.secondary',
                textTransform: 'capitalize',
              }}
            >
              {row.phoneNumber}
            </Typography>
          </Box>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'role',
      headerName: t('role') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
                {row.companyEmployeeRole ? capitalize(t(row.companyEmployeeRole)) : '-'}
              </Typography>
            </Box>
          </Box>
        );
      },
    });

    setColumns(columnsData);
  };

  const handleOnSubmit = async (formData: any) => {
    try {
      setLoadingData(true);

      if (!entitySchema || !currentUser.currentUser) throw new Error('Missing entitySchema/currentUser.currentUser');
      formData.companyId = docId;
      await createEntityDataBySchema(currentUser.currentUser, entitySchema, entitySchemaFields, formData, null, null);

      // refresco la tabla
      setToggleData(!toggleData);

      // cierro sidebar
      setAddSidebarOpen(false);

      // apago loading
      setLoadingData(false);
    } catch (e) {
      setLoadingData(false);
      handleError(e);
    }
  };

  if (!entitySchema || !entitySchemaFields || loadingSchema) return <Loader />;

  return (
    <>
      <Card>
        <CardHeader sx={{ textTransform: 'capitalize' }} title={t(splitByUppercase(entitySchema.name))} />
        <CardContent>
          <Grid container spacing={6}>
            <Grid item sm={4} xs={12}></Grid>
          </Grid>
        </CardContent>
        <Divider sx={{ m: '0 !important' }} />
        <Box
          sx={{
            py: 4,
            px: 6,
            rowGap: 2,
            columnGap: 4,
            display: 'flex',
            flexWrap: 'wrap',
            alignItems: 'center',

            // justifyContent: 'space-between',
            justifyContent: 'right',
          }}
        >
          {/* <Button color='secondary' variant='tonal' startIcon={<Icon icon='tabler:upload' />}>
        Export
        </Button> */}
          <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
            {isPermittedByRol() && (
              <Button onClick={toggleAddDrawer} variant='contained' sx={{ '& svg': { mr: 2 } }}>
                <Icon fontSize='1.125rem' icon='tabler:plus' />
                {capitalize(t('new'))}
              </Button>
            )}
          </Box>
        </Box>

        <DataGrid
          autoHeight
          rows={entitiesData.filter((item) => {
            return item.showRow;
          })}
          rowHeight={60}
          loading={loadingData}
          columns={columns}
          initialState={{
            columns: {
              columnVisibilityModel: {
                id: false,
              },
            },
          }}
          disableRowSelectionOnClick
          pageSizeOptions={[7, 10, 25, 50]}
          paginationModel={paginationModel}
          onPaginationModelChange={setPaginationModel}
        />
        {!!addSidebarOpen && !!addNewEntityForm && !!entitySchema && (
          <DynamicFormSidebar
            isCreating={true}
            onSubmit={handleOnSubmit}
            title={'Crear ' + capitalize(t(splitByUppercase(entitySchema.name)))}
            formId={'create_' + entitySchema.name}
            preloadForm={addNewEntityForm}
            open={addSidebarOpen}
            toggle={toggleAddDrawer}
            onSubmitDone={() => {
              toggleAddDrawer();

              return Promise.resolve();
            }}
          />
        )}
      </Card>
    </>
  );
};

export default EmployeesTab;
