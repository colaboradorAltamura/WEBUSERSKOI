import { IAddress, PatientsClinicStateTypes, WorkerStateTypes, EnliteServices } from 'src/types/@autogenerated';
import { IFirebaseUser } from 'src/types/users';

export type ErrCallbackType = (err: { [key: string]: string }) => void;

export type LoginSuccessCallbackType = {
  user: IFirebaseUser | null;
};

export type LoginParams = {
  email: string;
  password: string;
  rememberMe?: boolean;
};

export type RegisterParams = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  profession?: string;
  identificationType: string;
  identificationNumber: string;
  phoneNumber: string;
  sex: string;
  address: IAddress;
  workerState?: WorkerStateTypes;
  registerUrlLink: string;
  clinicStateType?: PatientsClinicStateTypes;
  enliteService?: EnliteServices;
};

export type InputSocialAuthParams = {
  providerType: string;
};

export type AuthValuesType = {
  user: IFirebaseUser | null;
  authStatusReported: boolean;
  isAuthenticated: boolean;

  isLoading: boolean;
  authError: any;

  setUser: (value: IFirebaseUser | null) => void;
  login: (params: LoginParams, successCallback: (user: any) => void, errorCallback?: ErrCallbackType) => void;
  register: (params: RegisterParams, successCallback: (user: any) => void, errorCallback?: ErrCallbackType) => void;

  loginSocialAuth: (
    params: InputSocialAuthParams,
    successCallback: () => void,
    errorCallback?: ErrCallbackType
  ) => void;
  registerSocialAuth: (
    params: InputSocialAuthParams,
    successCallback: () => void,
    errorCallback?: ErrCallbackType
  ) => void;
  logout: () => void;
};
