// ** React Imports
import { ReactNode, createContext, useEffect, useState } from 'react';

// ** Next Import
// import { useRouter } from 'next/router';

import { useAuth } from 'src/hooks/useAuth';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { getCurrentUser } from 'src/services/usersServices';
import { CMSCollections, ICompany, ICompanyEmployee, IPatient, IRelative, IWorker } from 'src/types/@autogenerated';
import { Collections } from 'src/types/collectionsTypes';
import { UserDefinedRols } from 'src/types/userDefinedRols';

import { IUser } from 'src/types/users';

interface IUserWithRols extends IUser {
  rolsData?: { worker?: IWorker; patient?: IPatient; relative?: IRelative; companyEmployeeList?: ICompanyEmployee[] };
}

export type CurrentUserContextType = {
  currentUser: IUserWithRols | null;

  grantesCompanies: ICompany[];
  currentCompany: ICompany | null;

  isLoading: boolean;
};

// ** Defaults
const defaultProvider: CurrentUserContextType = {
  currentUser: null,

  grantesCompanies: [],
  currentCompany: null,
  isLoading: true,
};

const CurrentUserContext = createContext(defaultProvider);

type Props = {
  children: ReactNode;
};

const CurrentUserProvider = ({ children }: Props) => {
  // ** Hooks
  const auth = useAuth();

  // ** States
  const [currentUser, setCurrentUser] = useState<IUserWithRols | null>(defaultProvider.currentUser);

  const [grantesCompanies, setGrantedCompanies] = useState<ICompany[]>([]);
  const [currentCompany, setCurrentCompany] = useState<ICompany | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(defaultProvider.isLoading);

  // solo se ejecuta la primera vez
  // TODO MICHEL - Se esta ejecutando 2 veces post login
  useEffect(() => {
    const doAsync = async () => {
      try {
        // if (!auth || !auth.isAuthenticated || !auth.user || !auth.user.appUserStatus || currentUser || isLoading)
        if (!auth || !auth.isAuthenticated || !auth.user || !auth.user.appUserStatus || currentUser) return;

        setIsLoading(true);

        // TODO MICHEL que el current user lo mantenga el authcontext, y este sea un wrapper de eso
        // que el sign in setee la rta en el auth context
        const currentUserResult = (await getCurrentUser()) as IUserWithRols;

        const grantedCompanies = await dynamicGet({ params: `/${Collections.USERS}/granted-companies` });

        setGrantedCompanies(grantedCompanies.items);

        const currentEntRol = auth.user?.enterpriseRols ? auth.user?.enterpriseRols[0] : null;

        const currentCompany = grantedCompanies.items.find((item: ICompany) => {
          return item.id === currentEntRol?.companyId;
        });

        if (currentCompany) setCurrentCompany(currentCompany);

        if (currentUserResult.userDefinedRols.includes(UserDefinedRols.UDR_WORKERS)) {
          const data = await dynamicGet({
            params: `/cms/${CMSCollections.WORKERS}/mine/${auth.user.uid}`,
          });

          if (!currentUserResult.rolsData) currentUserResult.rolsData = {};

          currentUserResult.rolsData.worker = data;
        }

        if (currentUserResult.userDefinedRols.includes(UserDefinedRols.UDR_PATIENT)) {
          const data = await dynamicGet({
            params: `/cms/${CMSCollections.PATIENTS}/mine/${auth.user.uid}`,
          });

          if (!currentUserResult.rolsData) currentUserResult.rolsData = {};

          currentUserResult.rolsData.patient = data;
        }

        if (currentUserResult.userDefinedRols.includes(UserDefinedRols.UDR_PATIENT_RELATIVE)) {
          const data = await dynamicGet({
            params: `/cms/${CMSCollections.RELATIVES}/mine/${auth.user.uid}`,
          });

          if (!currentUserResult.rolsData) currentUserResult.rolsData = {};

          currentUserResult.rolsData.relative = data;
        }

        if (currentUserResult.userDefinedRols.includes(UserDefinedRols.SYS_COMP_EMPLOYEE)) {
          const data = (await dynamicGet({
            params: `/cms/${CMSCollections.COMPANY_EMPLOYEES}/mine`,
          })) as { items: ICompanyEmployee[] };

          if (!currentUserResult.rolsData) currentUserResult.rolsData = {};

          currentUserResult.rolsData.companyEmployeeList = data.items;
        }

        setCurrentUser(currentUserResult);

        setIsLoading(false);
      } catch (e) {
        console.error('Error fetching CurrentUserContext:', e);
      }
    };

    doAsync();
  }, [auth]);

  const values = {
    currentUser,

    grantesCompanies,
    currentCompany,

    isLoading,
  };

  return <CurrentUserContext.Provider value={values}>{children}</CurrentUserContext.Provider>;
};

export { CurrentUserContext, CurrentUserProvider };
