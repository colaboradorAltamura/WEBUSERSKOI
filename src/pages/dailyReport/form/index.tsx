import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Box,
  Button,
  Divider,
  Grid,
  MenuItem,
  styled,
  TextField,
  Theme,
  Typography,
  useMediaQuery,
  useTheme,
} from '@mui/material';
import { Form, Formik, FormikErrors } from 'formik';
import { useTranslation } from 'react-i18next';
import { DynamicComponentTypes, IForm } from 'src/types/dynamics';
import { forwardRef, SyntheticEvent, ForwardedRef, useEffect, useState, SetStateAction } from 'react';
import * as Yup from 'yup';
import moment from 'moment';
import { dynamicCreate, dynamicGet } from 'src/services/entitiesDynamicServices';
import {
  CMSCollections,
  IDailyReport,
  IGoalType,
  IPatientGoalsScore,
  IPatientTPGoal,
  UserDefinedRols,
} from 'src/types/@autogenerated';
import { capitalize, getSourceEntityData, handleError, hasRole, nameof } from 'src/@core/coreHelper';
import DialogAction from 'src/@core/components/custom-dialog-action';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { Icon } from '@iconify/react';
import { useSettings } from 'src/@core/hooks/useSettings';
import CustomTextField from 'src/@core/components/mui/text-field';
import { AppRols } from 'src/types/appRols';
import Loader from 'src/@core/components/loader';
import DatePicker, { ReactDatePickerProps } from 'react-datepicker';

const STEP_VALIDATIONS = Yup.object().shape({
  generalNotes: Yup.string().required('Field is required'),
  globalScore: Yup.number().required('Field is required'),

  checkIn: Yup.string().required('start time cannot be empty'),
  checkOut: Yup.string()
    .required('end time cannot be empty')
    .test('is-greater', 'end time should be greater', function (value) {
      const { checkIn } = this.parent;

      return moment(value).isAfter(moment(checkIn));
    }),
});

type PickerProps = {
  label?: string;
};

interface PropsType {
  docId: string;
  formId?: string;
  preloadForm?: IForm | null;
  open: boolean;
  onClose: () => void;
  onSubmit: (dailyReportForm: any, goalScoreForm: IPatientGoalsScore[], isCreating: boolean) => Promise<any>;
  onSubmitDone?: (dailyReportForm: any, goalScoreForm: IPatientGoalsScore[], isCreating: boolean) => Promise<any>;
  initialValues: IDailyReport;
  isCreating: boolean;
  title?: string;
}

const DailyReportForm = ({ docId, initialValues, open, onClose, title, onSubmit, isCreating }: PropsType) => {
  // **  HOOKS
  const { t } = useTranslation();
  const { settings } = useSettings();
  const currentUser = useCurrentUser();
  const theme = useTheme();
  const { direction } = theme;

  const popperPlacement: ReactDatePickerProps['popperPlacement'] = direction === 'ltr' ? 'bottom-start' : 'bottom-end';

  // ** STATES
  const [dailyReportData, setDailyReportData] = useState<IDailyReport>(initialValues);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);
  const [expanded, setExpanded] = useState<string | false>('dailyReportDataPanel');

  // - goals
  const [patientNewGoals, setPatientNewGoals] = useState<IPatientTPGoal[]>([]); //para el nuevo report
  const [patientGoals, setPatientGoals] = useState<IPatientGoalsScore[]>([]); //para el edit (ya que solo pueden editar las goal previamente guardadas)

  //steps
  const [activeStep, setActiveStep] = useState<number>(0);

  // obtenemos los goals del patiente
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);

        //si es un nuevo daily report
        if (isCreating) {
          const newGoals = await dynamicGet({
            params:
              '/cms/' +
              CMSCollections.PATIENT_T_P_GOALS +
              '/by-prop/' +
              nameof<IPatientTPGoal>('patientId') +
              '/' +
              docId,
          });

          if (newGoals && newGoals.items) setPatientNewGoals(newGoals.items);
        } else {
          //obtenermos las goals guardardas en el report (para el edit)
          const goalScoreResponse = await dynamicGet({
            params:
              '/cms/' +
              CMSCollections.PATIENT_GOALS_SCORES +
              '/by-prop/' +
              nameof<IPatientGoalsScore>('dailyReportId') +
              '/' +
              initialValues.id,
          });
          if (goalScoreResponse && goalScoreResponse.items) setPatientGoals(goalScoreResponse.items);
        }

        setLoadingOptions(false);
      } catch (error) {
        handleError(error);

        setLoadingOptions(false);
      }
    };

    doAsync();
  }, []);

  const PickersComponent = forwardRef(({ ...props }: PickerProps, ref) => {
    // ** Props
    const { label } = props;
    const { t } = useTranslation();

    return <CustomTextField fullWidth {...props} inputRef={ref} label={t(label as string) || ''} />;
  });

  //obtiene el nombre del tipo de objetivo segun el proyecto terapeutico del Paciente
  const getGoalTypeFriendlyName = (patientGoalType: IPatientTPGoal) => {
    if (!patientGoalType) return '';
    const sourceData = getSourceEntityData({
      obj: patientGoalType,
      key: nameof<IPatientTPGoal>('goalTypeId'),
    });

    if (!sourceData) return '';

    return (sourceData as IGoalType).name;
  };

  //(solo para el edit) obtiene el nombre del tipo de objetivo segun El goal del reporte diario
  const getGoalScoreDialyriendlyName = (goalScore: IPatientGoalsScore) => {
    if (!goalScore) return '';

    const sourceData = getSourceEntityData({
      obj: goalScore,
      key: nameof<IPatientGoalsScore>('goalTypeId'),
    });

    if (!sourceData) return '';

    return (sourceData as IGoalType).name;
  };
  const closeDialogEdit = () => {
    onClose();
  };

  const submitValues = async (values: any, action: any) => {
    try {
      const itemValues = { ...values };
      if (!currentUser.currentUser) return;

      //validamos que sea el worker el user
      if (
        !hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS) &&
        !hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN)
      )
        throw new Error('Missing worker');

      itemValues['userId'] = docId; //el id del paciente
      itemValues['workerId'] = currentUser.currentUser.id;

      //retorna los goals
      const goalValues = getGoalScoreValuesForm() as IPatientGoalsScore[];

      //enviamos la data a la vista principal
      onSubmit(itemValues, goalValues, isCreating);
      onClose();
    } catch (error) {
      onClose();
      handleError(error);
    }
  };

  //abre o cierra el accordion
  const handleChange = (panel: string) => (event: SyntheticEvent, newExpanded: boolean) => {
    setExpanded(newExpanded ? panel : false);
  };

  //***** obtiene los datos ingresados en cada input por los obj del paciente
  // se valida si es un nuevo report o un edit ya que se usan dos tablas diferentes
  // cuando es un nuevo report, se usan las goals que estan en el IPatientTPGoal(proyecto terapeutico)
  // cuando es un edit, se cargan de IPatientGoalsScore, las cuales ya estan asigandas al reporte diario
  // es decir, si se llegase a cargar una nueva goal al proyectoT, esta No se mostraria en el edit
  // de los reportes ya guardados previamente.
  const getGoalScoreValuesForm = () => {
    const patientGoalsScoreValues = [] as IPatientGoalsScore[];

    //si es nuevo, usamos las gol del proyecto terapeutico, sino, usamos las que ya estan para editar
    if (isCreating) {
      const values = patientNewGoals;

      //por cada goal, recorrremos el form
      values.map((goal) => {
        if (!goal.id) return;
        //la obtneemos por el id IPatientTPGoal (relacion de goal y paciente (proyecto terapeutico))
        const inputs = document.getElementsByClassName(goal.id);

        if (inputs && inputs.length >= 0) {
          const scoreInput = inputs[0].getElementsByTagName('input');
          const notesInput = inputs[1].getElementsByTagName('input');

          if (!scoreInput || !notesInput || !scoreInput[0] || !notesInput[0]) return;

          const score = Number(scoreInput[0].value);
          const notes = notesInput[0].value;

          //asignamos los valores
          const goalScore = {
            id: '',
            patientId: docId,
            patientTPGoalId: goal.id, //id de la relacion de goal y paciente (proyecto terapeutico)
            goalNotes: notes,
            goalScore: score,
            dailyReportId: '',
            goalTypeId: goal.goalTypeId, //id del goal en general
            eventDate: new Date(),
          } as IPatientGoalsScore;

          patientGoalsScoreValues.push(goalScore);
        }
      });
    } else {
      // si es edit, usamos patientGoals (IPatientGoalsScore) que ya tienen score y note guardadas.
      const values = patientGoals;

      //por cada goal, recorrremos el form
      values.map((goal) => {
        if (!goal.id) return;

        //la obtneemos por el id IPatientGoalsScore
        const inputs = document.getElementsByClassName(goal.id);

        if (inputs && inputs.length >= 0) {
          const scoreInput = inputs[0].getElementsByTagName('input');
          const notesInput = inputs[1].getElementsByTagName('input');

          if (!scoreInput || !notesInput || !scoreInput[0] || !notesInput[0]) return;

          const score = Number(scoreInput[0].value);
          const notes = notesInput[0].value;

          //asignamos los valores
          const goalScore = {
            id: goal.id,
            patientId: docId,
            patientTPGoalId: goal.patientTPGoalId, //id de la relacion de goal y paciente (proyecto terapeutico)
            goalNotes: notes,
            goalScore: score,
            dailyReportId: initialValues.id,
            goalTypeId: goal.goalTypeId, //id del goal en general
            eventDate: new Date(),
          } as IPatientGoalsScore;

          patientGoalsScoreValues.push(goalScore);
        }
      });
    }

    // siempre devuelve un array de IPatientGoalsScore
    if (patientGoalsScoreValues.length) return patientGoalsScoreValues as IPatientGoalsScore[];

    return [];
  };

  //component que muestra el form de los obj
  const DailyReportGoalsStep = () => {
    return (
      <>
        {loadingOptions ? (
          <Loader />
        ) : (
          <Grid container spacing={0} sx={{ mb: 6 }}>
            <Grid container spacing={5} sx={{ mb: 4 }}>
              <Grid item xs={12} md={3} sm={3}>
                {t('description')}
              </Grid>
              <Grid item xs={12} md={3} sm={3}>
                {t('score')}
              </Grid>

              <Grid item xs={12} md={6} sm={6}>
                {t('notes')}
              </Grid>
            </Grid>

            <Divider sx={{ my: '0 !important' }} />

            {patientGoals.map((goal, index) => {
              return (
                <>
                  <Grid container spacing={5} sx={{ mb: 4 }} key={`container${goal.id}`}>
                    <Grid item xs={12} md={3} sm={3} key={`description${goal.id}`}>
                      {getGoalScoreDialyriendlyName(goal)}
                    </Grid>
                    <Grid item xs={12} md={3} sm={3} key={`goalScore${goal.id}`} className={goal.id}>
                      <CustomTextField
                        select
                        fullWidth
                        className='score'
                        defaultValue={goal.goalScore ? goal.goalScore : 1}
                      >
                        <MenuItem value='1'>1</MenuItem>
                        <MenuItem value='2'>2</MenuItem>
                        <MenuItem value='3'>3</MenuItem>
                        <MenuItem value='4'>4</MenuItem>
                      </CustomTextField>
                    </Grid>

                    <Grid item xs={12} md={6} sm={6} key={`goalNotes${goal.id}`} className={goal.id}>
                      <CustomTextField className='notes' fullWidth defaultValue={goal.goalNotes} />
                    </Grid>
                  </Grid>
                </>
              );
            })}

            {patientNewGoals.map((goal, index) => {
              return (
                <>
                  <Grid container spacing={5} sx={{ mb: 4 }} key={`container${goal.id}`}>
                    <Grid item xs={12} md={3} sm={3} key={`description${goal.id}`}>
                      {getGoalTypeFriendlyName(goal)}
                    </Grid>
                    <Grid item xs={12} md={3} sm={3} key={`goalScore${goal.id}`} className={goal.id}>
                      <CustomTextField select fullWidth className='score' defaultValue={1}>
                        <MenuItem value='1'>1</MenuItem>
                        <MenuItem value='2'>2</MenuItem>
                        <MenuItem value='3'>3</MenuItem>
                        <MenuItem value='4'>4</MenuItem>
                      </CustomTextField>
                    </Grid>

                    <Grid item xs={12} md={6} sm={6} key={`goalNotes${goal.id}`} className={goal.id}>
                      <CustomTextField className='notes' fullWidth />
                    </Grid>
                  </Grid>
                </>
              );
            })}
          </Grid>
        )}
      </>
    );
  };

  return (
    <>
      <DialogAction
        show={open}
        title={capitalize(title ?? t('daily report'))}
        keepMounted
        maxWidth='md'
        colorButtonSubmit='primary'
        showOnClickClose={false}
        onClickClose={() => closeDialogEdit()}
      >
        {open && (
          <Formik
            enableReinitialize={true}
            initialValues={dailyReportData}
            validationSchema={STEP_VALIDATIONS}
            onSubmit={submitValues}
          >
            {({ values, errors, touched, isSubmitting, setValues }) => (
              <Form id={'dailyReportBasicDataForm'} autoComplete='off'>
                <Grid item xs={12} md={12} lg={12} sx={{ marginTop: '15px' }}>
                  <Accordion
                    expanded={expanded === 'dailyReportDataPanel'}
                    onChange={handleChange('dailyReportDataPanel')}
                  >
                    <AccordionSummary aria-controls='dailyReportDataPanel-content' id='dailyReportDataPanel-header'>
                      <Typography>{capitalize(t('daily report'))}</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Grid item sm={12} md={12} xs={12}>
                        <Grid container spacing={5} sx={{ mb: 4 }}>
                          <Grid item xs={12} md={12} sm={12}>
                            <DynamicFormComponent
                              component={{
                                readOnly: { create: true, edit: true },
                                id: 'eventDate',
                                name: 'eventDate',
                                label: t('event date') as string,
                                type: DynamicComponentTypes.FORM_DATE,
                                dimensions: { xs: 12, sm: 12 },
                                errorMsg: t('field required msj') as string,
                              }}
                              isCreating={isCreating}
                            />
                          </Grid>

                          <Grid item xs={12} md={6} sm={6}>
                            <DatePicker
                              showTimeSelect
                              selected={values.checkIn ? new Date(values.checkIn) : new Date()}
                              timeIntervals={60}
                              showTimeSelectOnly
                              dateFormat='h:mm aa'
                              id='checkIn'
                              popperPlacement={popperPlacement}
                              onChange={(date: Date) =>
                                setValues({
                                  ...values,
                                  checkIn: date,
                                })
                              }
                              customInput={<PickersComponent label={'checkIn'} />}
                            />
                          </Grid>

                          <Grid item xs={12} md={6} sm={6}>
                            <DatePicker
                              showTimeSelect
                              selected={values.checkOut ? new Date(values.checkOut) : new Date()}
                              timeIntervals={60}
                              showTimeSelectOnly
                              dateFormat='h:mm aa'
                              id='checkOut'
                              popperPlacement={popperPlacement}
                              onChange={(date: Date) =>
                                setValues({
                                  ...values,
                                  checkOut: date,
                                })
                              }
                              customInput={<PickersComponent label={'checkOut'} />}
                            />
                          </Grid>

                          <Grid item xs={12} md={12} sm={12}>
                            <DynamicFormComponent
                              component={{
                                id: 'generalNotes',
                                name: 'generalNotes',
                                label: t('generalNotes') as string,
                                type: DynamicComponentTypes.FORM_TEXT,
                                dimensions: { xs: 12, sm: 12 },
                                errorMsg: t('field required msj') as string,
                              }}
                              isCreating={isCreating}
                            />
                          </Grid>
                          <Grid item xs={12} md={6} sm={6}>
                            <DynamicFormComponent
                              component={{
                                id: 'globalScore',
                                name: 'globalScore',
                                label: t('global score') as string,
                                type: DynamicComponentTypes.FORM_NUMBER,
                                dimensions: { xs: 12, sm: 12 },
                                errorMsg: t('field required msj') as string,
                              }}
                              isCreating={isCreating}
                            />
                          </Grid>
                        </Grid>
                      </Grid>
                    </AccordionDetails>
                  </Accordion>
                  <Accordion expanded={expanded === 'goalScoresPanel'} onChange={handleChange('goalScoresPanel')}>
                    <AccordionSummary aria-controls='goalScoresPanel-content' id='goalScoresPanel-header'>
                      <Typography>{capitalize(t('goals'))}</Typography>
                    </AccordionSummary>
                    <AccordionDetails>{DailyReportGoalsStep()}</AccordionDetails>
                  </Accordion>
                  <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                    <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                      <Button variant='contained' type={'submit'} sx={{ '& svg': { ml: 2 } }}>
                        {capitalize(t('save'))}
                        <Icon fontSize='1.125rem' icon='tabler:check' />
                      </Button>
                    </Box>
                  </Grid>
                </Grid>
              </Form>
            )}
          </Formik>
        )}
      </DialogAction>
    </>
  );
};

export default DailyReportForm;
