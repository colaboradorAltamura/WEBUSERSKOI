import { Accordion, AccordionDetails, AccordionSummary, Divider, Grid, Typography } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { SyntheticEvent, useEffect, useState } from 'react';
import moment from 'moment';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { CMSCollections, IDailyReport, IGoalType, IPatientGoalsScore } from 'src/types/@autogenerated';
import { capitalize, getSourceEntityData, handleError, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import DialogAction from 'src/@core/components/custom-dialog-action';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useSettings } from 'src/@core/hooks/useSettings';
import TextInfo from 'src/@core/components/custom-text-info';
import Loader from 'src/@core/components/loader';

interface PropsType {
  docId: string;
  open: boolean;
  onClose: () => void;
  initialValues: IDailyReport;
  title?: string;
}

interface IDailyReportRow extends IDailyReport {
  goalTypeFriendlyName: string;
}

const DailyReportDetails = ({ docId, initialValues, open, onClose, title }: PropsType) => {
  // **  HOOKS
  const { t } = useTranslation();
  const { settings } = useSettings();
  const currentUser = useCurrentUser();
  const win: any = window;

  // ** STATES
  const [dailyReportData, setDailyReportData] = useState<IDailyReport>(initialValues);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);
  const [expanded, setExpanded] = useState<string | false>('dailyReportDataPanel');

  // - goals
  const [goalScoreReportData, setGoalScoreReportData] = useState<IPatientGoalsScore[]>([]);
  const [patientGoals, setPatientGoals] = useState<IPatientGoalsScore[]>([]);

  // obtenemos los goals del patientr
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        const goalsResponse = await dynamicGet({
          params:
            '/cms/' +
            CMSCollections.PATIENT_GOALS_SCORES +
            '/by-prop/' +
            nameof<IPatientGoalsScore>('dailyReportId') +
            '/' +
            initialValues.id,
        });

        if (goalsResponse && goalsResponse.items) setPatientGoals(goalsResponse.items);
        setLoadingOptions(false);
      } catch (error) {
        handleError(error);

        setLoadingOptions(false);
      }
    };

    doAsync();
  }, []);

  //obtiene el nombre del tipo de objetivo
  const getGoalTypeFriendlyName = (goalScore: IPatientGoalsScore) => {
    if (!goalScore) return '';

    const sourceData = getSourceEntityData({
      obj: goalScore,
      key: nameof<IPatientGoalsScore>('goalTypeId'),
    });

    if (!sourceData) return '';

    return (sourceData as IGoalType).name;
  };
  const closeDialogEdit = () => {
    onClose();
  };

  //abre o cierra el accordion
  const handleChange = (panel: string) => (event: SyntheticEvent, newExpanded: boolean) => {
    setExpanded(newExpanded ? panel : false);
  };

  //component que muestra el form del report
  const DailyReportBasicDataStep = () => {
    return (
      <Grid item sm={12} md={12} xs={12}>
        <Grid container spacing={0} sx={{ mb: 0 }}>
          <Grid item xs={12} md={6}>
            <TextInfo title={'event date'} value={parseDateToShortString(initialValues.eventDate)}></TextInfo>
            <TextInfo title={'checkIn'} value={moment(initialValues.checkIn).format('hh:mm:ss a')}></TextInfo>
            <TextInfo title={'checkOut'} value={moment(initialValues.checkOut).format('hh:mm:ss a')}></TextInfo>
          </Grid>
          <Grid item xs={12} md={12}>
            <TextInfo title={'general notes'} value={initialValues.generalNotes}></TextInfo>
          </Grid>
          <Grid item xs={12} md={12}>
            <TextInfo title={'global score'} value={initialValues.globalScore}></TextInfo>
          </Grid>
        </Grid>
      </Grid>
    );
  };

  //component que muestra el form de los obj
  const DailyReportGoalsStep = () => {
    return (
      <>
        {loadingOptions ? (
          <Loader />
        ) : (
          <Grid container spacing={0} sx={{ mb: 6 }}>
            <Grid container spacing={5} sx={{ mb: 4 }}>
              <Grid item xs={12} md={3} sm={3}>
                {t('description')}
              </Grid>
              <Grid item xs={12} md={3} sm={3}>
                {t('score')}
              </Grid>

              <Grid item xs={12} md={6} sm={6}>
                {t('notes')}
              </Grid>
            </Grid>

            <Divider sx={{ mb: 4 }} />

            {patientGoals.map((goal) => {
              return (
                <>
                  <Grid container spacing={5} sx={{ mb: 4 }} key={`container${goal.id}`}>
                    <Grid item xs={12} md={3} sm={3} key={`description${goal.id}`}>
                      {getGoalTypeFriendlyName(goal)}
                    </Grid>
                    <Grid item xs={12} md={3} sm={3} key={`goalScore${goal.id}`} className={goal.id}>
                      {goal.goalScore}
                    </Grid>

                    <Grid item xs={12} md={6} sm={6} key={`goalNotes${goal.id}`} className={goal.id}>
                      {goal.goalNotes}
                    </Grid>
                  </Grid>
                </>
              );
            })}
          </Grid>
        )}
      </>
    );
  };

  return (
    <>
      <DialogAction
        show={open}
        title={capitalize(title ?? t('daily report'))}
        keepMounted
        maxWidth='md'
        colorButtonSubmit='primary'
        showOnClickClose={false}
        onClickClose={() => closeDialogEdit()}
      >
        {open && (
          <Grid item xs={12} md={12} lg={12} sx={{ marginTop: '15px' }}>
            <Accordion expanded={expanded === 'dailyReportDataPanel'} onChange={handleChange('dailyReportDataPanel')}>
              <AccordionSummary aria-controls='dailyReportDataPanel-content' id='dailyReportDataPanel-header'>
                <Typography>{capitalize(t('details'))}</Typography>
              </AccordionSummary>
              <AccordionDetails>{DailyReportBasicDataStep()}</AccordionDetails>
            </Accordion>
            <Accordion expanded={expanded === 'goalScoresPanel'} onChange={handleChange('goalScoresPanel')}>
              <AccordionSummary aria-controls='goalScoresPanel-content' id='goalScoresPanel-header'>
                <Typography>{capitalize(t('goals'))}</Typography>
              </AccordionSummary>
              <AccordionDetails>{DailyReportGoalsStep()}</AccordionDetails>
            </Accordion>
          </Grid>
        )}
      </DialogAction>
    </>
  );
};

export default DailyReportDetails;
