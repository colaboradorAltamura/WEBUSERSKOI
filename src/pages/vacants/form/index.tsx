import {
  Avatar,
  Box,
  Button,
  Card,
  Checkbox,
  Divider,
  FormControlLabel,
  Grid,
  MenuItem,
  StepLabel,
  Stepper,
  styled,
  TextField,
  Theme,
  Typography,
  useMediaQuery,
} from '@mui/material';
import { Form, Formik } from 'formik';
import { useTranslation } from 'react-i18next';
import Loader from 'src/@core/components/loader';
import CustomTextField from 'src/@core/components/mui/text-field';
import { useDynamics } from 'src/hooks/useDynamics';
import { DynamicComponentTypes, IForm } from 'src/types/dynamics';
import { ChangeEvent, useEffect, useState } from 'react';
import * as Yup from 'yup';
import { dynamicCreate, dynamicGet } from 'src/services/entitiesDynamicServices';
import {
  CMSCollections,
  ICampaign,
  IOpenPosition,
  IPatientRelative,
  OpenPositionStatusTypes,
  PathologiesTypes,
  SexTypes,
  TherapistTypes,
  WorkerAgePreferences,
  WorkerAttributes,
} from 'src/types/@autogenerated';
import { capitalize, handleError, nameof } from 'src/@core/coreHelper';
import { IUser } from 'src/types/users';
import DialogAction from 'src/@core/components/custom-dialog-action';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import StepperWrapper from 'src/@core/styles/mui/stepper';
import { Icon } from '@iconify/react';
import { hexToRGBA } from 'src/@core/utils/hex-to-rgba';
import { useSettings } from 'src/@core/hooks/useSettings';
import CustomAvatar from 'src/@core/components/mui/avatar';
import MuiStep, { StepProps } from '@mui/material/Step';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import { isInputElement } from 'react-router-dom/dist/dom';
import { TURBO_TRACE_DEFAULT_MEMORY_LIMIT } from 'next/dist/shared/lib/constants';

const STEP_VALIDATIONS = Yup.object().shape({
  name: Yup.string().required('Field is required'),
  jobDescription: Yup.string().required('Field is required'),
  budget: Yup.number().required('Field is required'),
  daySchedule: Yup.string().required('Field is required'),
  statusType: Yup.string().required(),
  workerAttributes: Yup.array().of(Yup.string()).required(),
  paymentDate: Yup.number().min(1, 'Minimum atleast 1').max(31, 'Allowed maximum is 31').required('Field is required'),
  workerAmount: Yup.number().required('Field is required'),
  workerSex: Yup.string().required('Field is required'),
  workerProfile: Yup.string().required('Field is required'),
  workerTypes: Yup.string().required('Field is required'),
});

const MenuProps = {
  PaperProps: {
    style: {
      width: 250,
      maxHeight: 48 * 4.5 + 8,
    },
  },
};

const Step = styled(MuiStep)<StepProps>(({ theme }) => ({
  padding: 0,
  '& .MuiStepLabel-iconContainer': {
    display: 'none',
  },
  '& .step-subtitle': {
    color: `${theme.palette.text.disabled} !important`,
  },
  '& + svg': {
    color: theme.palette.text.disabled,
  },
  '&.Mui-completed .step-title': {
    color: theme.palette.text.disabled,
  },
  '&.Mui-completed + svg': {
    color: theme.palette.primary.main,
  },
  '& .MuiStepLabel-label': {
    cursor: 'pointer',
  },
  [theme.breakpoints.down('md')]: {
    '&:not(:last-child)': {
      marginBottom: theme.spacing(6),
    },
    '& + svg': {
      display: 'none',
    },
  },
  [theme.breakpoints.up('md')]: {
    marginLeft: theme.spacing(4),
    marginRight: theme.spacing(4),
    '&:first-of-type': {
      marginLeft: 0,
    },
    '&:last-of-type': {
      marginRight: 0,
    },
  },
}));
interface PropsType {
  formId?: string;
  preloadForm?: IForm | null;
  open: boolean;
  onClose: () => void;
  onSubmit: (formData: any, isCreating: boolean) => Promise<any>;
  onSubmitDone?: (formData: any, isCreating: boolean) => Promise<any>;
  initialValues: IOpenPosition;
  campaignCode?: string;
  isCreating?: boolean;
  title?: string;
}

const OpenPositionForm = ({ initialValues, open, onClose, title, onSubmit, isCreating, campaignCode }: PropsType) => {
  // **  HOOKS
  const { t } = useTranslation();
  const { settings, saveSettings } = useSettings();
  const smallScreen = useMediaQuery((theme: Theme) => theme.breakpoints.down('md'));
  const { direction } = settings;
  const win: any = window;

  // ** STATES
  const [openPositonData, setOpenPositionData] = useState<IOpenPosition>(initialValues);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);
  //steps
  const [activeStep, setActiveStep] = useState<number>(0);

  //form inputs
  const [jobZone, setJobZone] = useState<string>(initialValues.jobZone ?? '');
  const [hasPatientRelated, setHasPatientRelated] = useState<boolean>(initialValues.patient ? true : false);
  const [displayPatientList, setDisplayPatientList] = useState<string>(initialValues.patient ? 'flex' : 'none');
  const [isCampaingCodeEditable, setIsCampaingCodeEditable] = useState<boolean>(campaignCode ? false : true);
  const [codeCampaignValue, setCodeCampaignValue] = useState<string>(campaignCode ?? '');

  //options
  const [pathologiesExperienceOptions, setPathologiesExperienceOptions] = useState<any[]>([]);
  const [workerAttributesOptions, setWorkerAttributesOptions] = useState<any[]>([]);
  const [agePreferenceOptions, setAgePreferenceOptions] = useState<any[]>([]);
  const [patientOptions, setPatientOptions] = useState<any[]>([]);
  const [statusTypesOptions, setStatusTypesOptions] = useState<any[]>([]);
  const [workerTypesOptions, setWorkerTypesOptions] = useState<any[]>([]);
  const [workerSexOptions, setWorkerSexOptions] = useState<any[]>([]);

  //maps
  const [map, setMap] = useState<any>(null);
  const [addressPlace, setAddressPlace] = useState<any>(initialValues.jobAddress ?? '');
  const [showMap, setShowMap] = useState<boolean>(false);

  // ** Effects
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setPathologiesExperienceOptions(await getOptions(CMSCollections.PATHOLOGIES_TYPES));
        setWorkerAttributesOptions(await getOptions(CMSCollections.WORKER_ATTRIBUTES));
        setAgePreferenceOptions(await getOptions(CMSCollections.WORKER_AGE_PREFERENCES));
        setPatientOptions(await getOptions(CMSCollections.PATIENTS));
        setStatusTypesOptions(await getOptions(CMSCollections.OPEN_POSITION_STATUS_TYPES));
        setWorkerTypesOptions(await getOptions(CMSCollections.THERAPIST_TYPES));
        setWorkerSexOptions(await getOptions(CMSCollections.SEX_TYPES));
        setLoadingOptions(false);
      } catch (error) {
        handleError(error);
      }
    };

    doAsync();
    setShowMap(true);
  }, []);

  useEffect(() => {
    if (!map || !addressPlace) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    const marker = new win.google.maps.Marker({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      id: 1, //to do check on this
      map: map,
      icon: image,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);

    map.setZoom(Math.min(map.getZoom(), 12));
  }, [addressPlace, map]);

  useEffect(() => {
    if (!win.google || !document.getElementById('map_canvas')) return;

    const mapAux = new win.google.maps.Map(document.getElementById('map_canvas'), {
      center: {
        lat: -34.603008, //lat and long Buenos Aires
        lng: -58.3794688,
      },
      zoom: 12,
    });

    setMap(mapAux);
  }, [win.google, showMap, open]);

  const handlePatienRelated = (value: boolean) => {
    setHasPatientRelated(value);
    setDisplayPatientList(value ? 'flex' : 'none');
  };

  const getZoneAddress = (place: any) => {
    if (!place.city && !place.county) return place.state;
    else if (!place.county && place.city) return place.city;
    else if (!place.city && place.county) return `${place.state}, ${place.county}`;
    else return `${place.city}, ${place.county}`;
  };

  const onPlaceSelected = (place: any) => {
    const zone = getZoneAddress(place);
    setJobZone(zone);
    setAddressPlace(place);
  };

  const closeDialogEdit = () => {
    setActiveStep(0);
    onClose();
  };

  //**campaigns */
  const saveCampaign = async (openPositionData: IOpenPosition) => {
    try {
      if (openPositionData.relatedCampaign) return;
      if (!codeCampaignValue) return;

      const existCampaign = await getCampaign(codeCampaignValue);
      if (existCampaign.items && existCampaign.items.length == 0) {
        //create new campaign
        const newCampaign = {
          code: codeCampaignValue,
          name: `${openPositionData.name} ${openPositionData.jobZone}`,
        } as ICampaign;
        const campaignCreated = await dynamicCreate({
          params: `/cms/${CMSCollections.CAMPAIGNS}/`,
          data: newCampaign,
        });

        return campaignCreated;
      }
      if (existCampaign.items[0]) return existCampaign.items[0];
    } catch (error) {
      handleError(error);
    }
  };

  const getCampaign = async (code: string) => {
    const campaign = await dynamicGet({
      params: '/cms/' + CMSCollections.CAMPAIGNS + '/by-prop/' + nameof<ICampaign>('code') + '/' + code,
    });

    return campaign;
  };

  const onHandleSubmit = async () => {
    try {
      setIsLoading(true);

      if (!addressPlace) throw new Error('Missing address');

      const itemValues = { ...openPositonData };
      if (isCampaingCodeEditable) {
        const newCampaign = (await saveCampaign(itemValues)) as ICampaign;
        if (newCampaign) itemValues.relatedCampaign = newCampaign.id;
      }

      itemValues.jobAddress = addressPlace;
      itemValues.jobZone = jobZone;

      //inicializo el paciente id, en caso de no estar asociada a ninguno
      if (!hasPatientRelated) itemValues.patient = '';

      onSubmit(itemValues, false);
      setIsLoading(false);
      isLoading;
    } catch (e) {
      closeDialogEdit();
      handleError(e);
      setIsLoading(false);
    }
  };

  const basiDataStepSubmit = async (values: any, action: any) => {
    try {
      const itemValues = { ...values };
      setOpenPositionData(itemValues);
      handleNext();
    } catch (e) {}
  };

  // Handle Stepper
  const handleNext = () => {
    setActiveStep(activeStep + 1);
  };
  const handlePrev = () => {
    if (activeStep !== 0) {
      setActiveStep(activeStep - 1);
    }
  };

  const getOptions = async (schema: string) => {
    try {
      //check this
      const optionsData: any = await dynamicGet({ params: '/cms/' + schema });

      return optionsData.items;
    } catch (error) {
      handleError(error);

      return [];
    }
  };

  const steps = [
    {
      title: capitalize(t('details')) as string,
      icon: 'tabler:list-details',
    },
    {
      title: capitalize(t('location')) as string,
      icon: 'tabler:map',
    },
  ];
  const OpenPositionBasicDataStep = (show: string) => {
    return (
      <Grid sx={{ display: show }}>
        <Formik
          enableReinitialize={true}
          initialValues={openPositonData}
          validationSchema={STEP_VALIDATIONS}
          onSubmit={basiDataStepSubmit}
        >
          {({ values, errors, touched, isSubmitting, setValues }) => (
            <Form id={'openPositonBasicDataForm'} autoComplete='off'>
              <Grid item sm={12} md={12} xs={12}>
                <Grid container spacing={5} sx={{ mb: 4 }}>
                  <Grid item xs={12} md={6} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'name',
                        name: 'name',
                        label: t('name') as string,
                        type: DynamicComponentTypes.FORM_TEXT,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>
                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('status') as string}
                        id='statusType'
                        name='statusType'
                        value={values.statusType}
                        onChange={(e) =>
                          setValues({ ...values, statusType: e.target.value as OpenPositionStatusTypes })
                        }
                        error={errors && errors['statusType'] ? true : false}
                        helperText={errors['statusType'] ? (t('Field required') as string) : ''}
                      >
                        {statusTypesOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} md={12} sm={12}>
                    <DynamicFormComponent
                      component={{
                        id: 'jobDescription',
                        name: 'jobDescription',
                        label: t('description') as string,
                        type: DynamicComponentTypes.FORM_TEXT,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>
                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('pathologies') as string}
                        id='pathologyType'
                        name='pathologyType'
                        error={errors && errors['pathologyType'] ? true : false}
                        helperText={errors['pathologyType'] ? (t('field required msj') as string) : ''}
                        value={values.pathologyType ?? []}
                        SelectProps={{
                          MenuProps,
                          multiple: true,
                          value: values.pathologyType ?? [],
                          onChange: (e) =>
                            setValues({ ...values, pathologyType: e.target.value as PathologiesTypes[] }, true),
                          renderValue: (selected: any) => {
                            const newVal = [...selected] as string[];

                            return newVal
                              .map((item) => {
                                return capitalize(t(item));
                              })
                              .join(', ');
                          },
                        }}
                      >
                        {pathologiesExperienceOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'budget',
                        name: 'budget',
                        label: t('budget') as string,
                        type: DynamicComponentTypes.FORM_NUMBER,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('age range') as string}
                        id='agePreference'
                        name='agePreference'
                        error={errors && errors['agePreference'] ? true : false}
                        helperText={errors['agePreference'] ? (t('field required msj') as string) : ''}
                        value={values.agePreference ?? []}
                        SelectProps={{
                          MenuProps,
                          multiple: true,
                          value: values.agePreference ?? [],
                          onChange: (e) =>
                            setValues({ ...values, agePreference: e.target.value as WorkerAgePreferences[] }, true),
                          renderValue: (selected: any) => {
                            const newVal = [...selected] as string[];

                            return newVal
                              .map((item) => {
                                return capitalize(t(item));
                              })
                              .join(', ');
                          },
                        }}
                      >
                        {agePreferenceOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'paymentDate',
                        name: 'paymentDate',
                        label: t('paymentDate') as string,
                        //initialValue: 1,
                        type: DynamicComponentTypes.FORM_NUMBER,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'daySchedule',
                        name: 'daySchedule',
                        label: t('schedule') as string,
                        type: DynamicComponentTypes.FORM_TEXT,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('worker attributes') as string}
                        id='workerAttributes'
                        name='workerAttributes'
                        error={errors && errors['workerAttributes'] ? true : false}
                        helperText={errors['workerAttributes'] ? (t('field required msj') as string) : ''}
                        value={values.workerAttributes ?? []}
                        SelectProps={{
                          MenuProps,
                          multiple: true,
                          value: values.workerAttributes ?? [],
                          onChange: (e) =>
                            setValues({ ...values, workerAttributes: e.target.value as WorkerAttributes[] }, true),
                          renderValue: (selected: any) => {
                            const newVal = [...selected] as string[];

                            return newVal
                              .map((item) => {
                                return capitalize(t(item));
                              })
                              .join(', ');
                          },
                        }}
                      >
                        {workerAttributesOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>
                  <Grid item xs={12} md={6} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'workerAmount',
                        name: 'workerAmount',
                        label: t('worker amount') as string,
                        type: DynamicComponentTypes.FORM_NUMBER,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>
                  <Grid item xs={12} md={6} sm={6}>
                    <DynamicFormComponent
                      component={{
                        id: 'workerProfile',
                        name: 'workerProfile',
                        label: t('worker profile') as string,
                        type: DynamicComponentTypes.FORM_TEXT,
                        dimensions: { xs: 12, sm: 12 },
                        errorMsg: t('field required msj') as string,
                      }}
                      isCreating={isCreating}
                    />
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('types') as string}
                        id='workerTypes'
                        name='workerTypes'
                        value={values.workerTypes}
                        onChange={(e) => setValues({ ...values, workerTypes: e.target.value as TherapistTypes })}
                        error={errors && errors['workerTypes'] ? true : false}
                        helperText={errors['workerTypes'] ? (t('Field required') as string) : ''}
                      >
                        {workerTypesOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} md={6} sm={6}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('sex') as string}
                        id='workerSex'
                        name='workerSex'
                        value={values.workerSex}
                        onChange={(e) => setValues({ ...values, workerSex: e.target.value as SexTypes })}
                        error={errors && errors['workerSex'] ? true : false}
                        helperText={errors['workerSex'] ? (t('Field required') as string) : ''}
                      >
                        {workerSexOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.code}>
                              {capitalize(t(item.name))}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} md={6} sm={6} sx={{ textAlign: 'left' }}>
                    <FormControlLabel
                      label={t('has patient related')}
                      control={
                        <Checkbox
                          name='hasPatient'
                          checked={hasPatientRelated}
                          onChange={(event) => {
                            handlePatienRelated(event.target.checked);
                          }}
                        />
                      }
                    />
                  </Grid>
                  <Grid item xs={12} md={6} sm={6} sx={{ display: displayPatientList }}>
                    {loadingOptions ? (
                      <Loader />
                    ) : (
                      <CustomTextField
                        select
                        fullWidth
                        label={t('patient') as string}
                        id='patient'
                        value={values.patient}
                        onChange={(e) => setValues({ ...values, patient: e.target.value as string })}
                        error={errors && errors['patient'] ? true : false}
                        helperText={errors['patient'] ? (t('field required msj') as string) : ''}
                      >
                        {patientOptions.map((item: any, index: any) => {
                          return (
                            <MenuItem key={index} value={item.id}>
                              {`${item.firstName} ${item.lastName}`}
                            </MenuItem>
                          );
                        })}
                      </CustomTextField>
                    )}
                  </Grid>

                  <Grid item xs={12} sm={6}>
                    <CustomTextField
                      fullWidth
                      id='codeCampaignValue'
                      label={t('campaign code')}
                      value={codeCampaignValue}
                      onChange={(e) => setCodeCampaignValue(e.target.value)}
                      disabled={!isCampaingCodeEditable}
                    />
                  </Grid>

                  <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
                    <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                      <Button variant='contained' type={'submit'} sx={{ '& svg': { ml: 2 } }}>
                        {capitalize(t('next'))}
                        <Icon fontSize='1.125rem' icon='tabler:arrow-right' />
                      </Button>
                    </Box>
                  </Grid>
                </Grid>
              </Grid>
            </Form>
          )}
        </Formik>
      </Grid>
    );
  };
  const OpenPositionAddressStep = (show: string) => {
    return (
      <>
        <Grid item sm={12} md={12} xs={12} sx={{ display: show }}>
          <Grid container spacing={5} sx={{ mb: 4 }}>
            <Grid item xs={12} md={12}>
              <form onSubmit={(e) => e.preventDefault()}>
                <Grid container spacing={4}>
                  <Grid item xs={12} sm={12}>
                    {showMap && (
                      <FormLocationField
                        label={t('address')}
                        value={addressPlace ? addressPlace.addressString : ''}
                        placeholder={'Av libertador 123'}
                        onPlaceSelected={(place: any) => {
                          onPlaceSelected(place);
                        }}
                      />
                    )}
                  </Grid>
                  <Grid item xs={12} sm={12}>
                    <CustomTextField fullWidth type='jobZone' label={t('zone')} value={jobZone} disabled={true} />
                  </Grid>
                </Grid>
              </form>
            </Grid>
            <Grid item xs={12} sx={{ marginTop: 10 }}>
              <Card>
                <Divider sx={{ m: '0 !important' }} />
                {<div id='map_canvas' style={{ height: '250px' }}></div>}
              </Card>
            </Grid>
            <Grid item xs={12} sx={{ pt: (theme) => `${theme.spacing(6)} !important` }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Button color='secondary' variant='tonal' onClick={handlePrev} sx={{ '& svg': { mr: 2 } }}>
                  <Icon fontSize='1.125rem' icon='tabler:arrow-left' />
                  {capitalize(t('previous') as string)}
                </Button>

                <Button variant='contained' onClick={onHandleSubmit} disabled={isLoading}>
                  {capitalize(t('save') as string)}
                  <Icon fontSize='1.125rem' icon='tabler:check' />
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Grid>
      </>
    );
  };

  return (
    <>
      <DialogAction
        show={open}
        title={capitalize(title ?? t('open position'))}
        keepMounted
        maxWidth='md'
        colorButtonSubmit='primary'
        showOnClickClose={false}
        onClickClose={() => closeDialogEdit()}
      >
        {open && (
          <Grid item xs={12} md={12} lg={12} sx={{ marginTop: '15px' }}>
            <StepperWrapper sx={{ mb: 11.5 }}>
              <Stepper
                activeStep={activeStep}
                sx={{ justifyContent: 'left' }}
                connector={
                  !smallScreen ? (
                    <Icon icon={direction === 'ltr' ? 'tabler:chevron-right' : 'tabler:chevron-left'} />
                  ) : null
                }
              >
                {steps.map((step, index) => {
                  const RenderAvatar = activeStep >= index ? CustomAvatar : Avatar;

                  return (
                    <Step key={index} expanded={true}>
                      <StepLabel>
                        <div className='step-label'>
                          <RenderAvatar
                            variant='rounded'
                            {...(activeStep >= index && { skin: 'light' })}
                            {...(activeStep === index && { skin: 'filled' })}
                            {...(activeStep >= index && { color: 'primary' })}
                            sx={{
                              mr: 4,
                              ...(activeStep === index && { boxShadow: (theme) => theme.shadows[3] }),
                              ...(activeStep > index && {
                                color: (theme) => hexToRGBA(theme.palette.primary.main, 0.4),
                              }),
                            }}
                          >
                            <Icon fontSize='1.5rem' icon={step.icon} />
                          </RenderAvatar>
                          <div>
                            <Typography variant='h6' className='step-title'>
                              {step.title}
                            </Typography>
                          </div>
                        </div>
                      </StepLabel>
                    </Step>
                  );
                })}
              </Stepper>
            </StepperWrapper>
            <>
              <Box sx={{ justifyContent: 'right', width: '100%', maxHeight: 450, minHeight: 450 }}>
                {OpenPositionBasicDataStep(activeStep == 0 ? 'flex' : 'none')}
                {OpenPositionAddressStep(activeStep == 1 ? 'flex' : 'none')}
              </Box>
            </>
          </Grid>
        )}
      </DialogAction>
    </>
  );
};

export default OpenPositionForm;
