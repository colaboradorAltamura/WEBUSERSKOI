// ** MUI Import
import {
  Badge,
  Box,
  Button,
  capitalize,
  Card,
  CardContent,
  CardHeader,
  CardMedia,
  Divider,
  Typography,
  useTheme,
} from '@mui/material';
import Grid from '@mui/material/Grid';

// ** Custom Component Imports
import CustomAvatar from 'src/@core/components/mui/avatar';
import { useRouter } from 'next/router';
import { useEffect, useState, SyntheticEvent } from 'react';
import OptionsMenu from 'src/@core/components/option-menu';
import CustomChip from 'src/@core/components/mui/chip';
import { GetStaticPaths, GetStaticProps, GetStaticPropsContext, InferGetStaticPropsType } from 'next/types';
import { Icon } from '@iconify/react';
import { useTranslation } from 'react-i18next';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { getSourceEntityData, handleError, hasRole, nameof } from 'src/@core/coreHelper';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields } from 'src/types/entities';
import {
  CMSCollections,
  ICampaign,
  IOpenPosition,
  IOpenPositionWorker,
  IWorker,
  OpenPositionAsignmentStatusTypes,
  OpenPositionStatusTypes,
} from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { getEntityDataBySchema } from 'src/views/components/dynamics/helpers';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import Tab from '@mui/material/Tab';
import DetailsTab from '../tabs/detailsTab';
import DynamicFormSidebar from 'src/views/components/dynamics/DynamicFormSidebar';
import { ThemeColor } from 'src/@core/layouts/types';
import Loader from 'src/@core/components/loader';
import { dynamicCreate, dynamicGet } from 'src/services/entitiesDynamicServices';
import DialogAction from 'src/@core/components/custom-dialog-action';

interface IOpenPositionResponse extends IOpenPosition {
  applied: boolean;
}

const Vacant = ({}: InferGetStaticPropsType<typeof getStaticProps>) => {
  // ** Hooks
  const router = useRouter();
  const dynamics = useDynamics();
  const currentUser = useCurrentUser();
  const { t } = useTranslation();

  const theme = useTheme();

  // ** Global vars
  const INITIAL_TAB = 'summary';
  const AVAILABILITY_TAB = 'availability';
  const PREFERENCES_TAB = 'preferences';
  const PATIENTS_TAB = 'patients';
  const ADDRESS_TAB = 'address';
  const DOCS_TAB = 'docs';

  const id = router.query.id as string | null;
  const tab = router.query['tab'] as string;
  // ** STATES

  const [entitySchema, setEntitySchema] = useState<IEntitySchema | null>(null);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>([]);

  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [entityData, setEntityData] = useState<IOpenPositionResponse | null>(null);
  const [toggleData, setToggleData] = useState<boolean>(false);

  const [activeTab, setActiveTab] = useState<string>(tab ? tab : INITIAL_TAB);
  const [campaignCode, setCampaignCode] = useState<string>('');

  //apply actions
  const [applyDialogShow, setApplyDialogShow] = useState<boolean>(false);
  const [openPositionAppliedId, setOpenPositionAppliedId] = useState<string | undefined>();
  const [textConfirmOpenpositionApplied, setTextConfirmOpenpositionApplied] = useState<string>('');

  useEffect(() => {
    // Fix para los refresh de pagina para componentes dynamicos eg: [id] รณ [schemaName]
    if (window.location.pathname != router.pathname) {
      console.log('Redirecting next router because a refresh');
      router.push(`${window.location.pathname}`);
    }
  }, []);

  // fetch schema
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);

        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === CMSCollections.OPEN_POSITIONS;
        });
        if (!schema) throw new Error('Missing schemaName: ' + CMSCollections.OPEN_POSITIONS);
        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);

        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();
  }, [dynamics.isLoadingSchemas]);

  // fetch entity data
  useEffect(() => {
    if (!id) return;

    const doAsync = async () => {
      try {
        if (!entitySchema || currentUser.isLoading || loadingData) return;

        setLoadingData(true);

        if (!currentUser.currentUser) throw new Error('Missing currentUser.currentUser');

        const data: any = await getEntityDataBySchema(
          currentUser.currentUser,
          entitySchema,
          entitySchemaFields,
          id,
          null,
          null
        );
        setCampaignCode(getCampaignFriendlyCode(data));

        if (data) {
          const applied = await wasAppliedByWorker(data);
          setEntityData({ applied, ...data } as IOpenPositionResponse);
        }

        setLoadingData(false);
      } catch (e: any) {
        handleError(e);
        setLoadingData(false);
      }
    };

    doAsync();
  }, [entitySchema, id, toggleData, currentUser.isLoading]);

  const wasAppliedByWorker = async (data: IOpenPosition) => {
    //verificamos si es un worker
    if (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS)
    ) {
      /// obtenemos las Openposition del Worker ya postuladas
      const openPositionWorker: any = await dynamicGet({
        params:
          '/cms/' +
          CMSCollections.OPEN_POSITION_WORKERS +
          '/by-prop/' +
          nameof<IOpenPositionWorker>('userId') +
          '/' +
          currentUser.currentUser.id,
      });

      //evaluamos si ya se postulo
      if (openPositionWorker.items) {
        console.log(openPositionWorker.items);

        return openPositionWorker.items.some((e: IOpenPositionWorker) => e.openPositionId === data.id);
      }
    }

    return false;
  };

  const getCampaignFriendlyCode = (openPositionData: IOpenPosition) => {
    if (!openPositionData) return '';

    const sourceData = getSourceEntityData({
      obj: openPositionData,
      key: nameof<IOpenPosition>('relatedCampaign'),
    });
    if (!sourceData) return '';

    return (sourceData as ICampaign).code;
  };

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_WORKERS))
    );
  };

  const handleTabChange = (event: SyntheticEvent, value: string) => {
    setLoadingSchema(true);
    setActiveTab(value);

    router
      .push({
        pathname: `/${CMSCollections.OPEN_POSITIONS}/${id}`,
        query: `tab=${value}`,
      })
      .then(() => setLoadingSchema(false));
  };
  const handleOnTabUpdateData = async () => {
    try {
      // refresco la tabla
      setToggleData(!toggleData);
    } catch (e) {
      handleError(e);
    }
  };
  const handleOpenPositionApply = async () => {
    try {
      if (!openPositionAppliedId || !id) return;
      setLoadingData(true);

      const formData = {
        order: 1,
        assignmentStatus: OpenPositionAsignmentStatusTypes.INTERESTED,
        userId: id,
        openPositionId: openPositionAppliedId,
      } as IOpenPositionWorker;

      const response = await dynamicCreate({
        params: `/cms/${CMSCollections.OPEN_POSITION_WORKERS}/`,
        data: formData,
      });

      handleOnTabUpdateData(); //toggle
      setLoadingData(false);
    } catch (error) {
      setLoadingData(false);
      handleError(error);
    }
  };

  const applyDialogClose = () => {
    return setApplyDialogShow(false);
  };

  const applyDialogOpen = (openPositionName: string, id: string | undefined) => {
    setOpenPositionAppliedId(id);
    setTextConfirmOpenpositionApplied(openPositionName);
    setApplyDialogShow(true);
  };

  const renderLeftPanel = () => {
    if (!entitySchema || !entityData) return;

    const statusName = getSourceEntityData({ obj: entityData, key: nameof<IOpenPosition>('statusType') })?.name;

    let statusColor: ThemeColor = 'info';

    if (entityData.statusType === OpenPositionStatusTypes.ACTIVE) statusColor = 'success';
    else if (entityData.statusType === OpenPositionStatusTypes.INACTIVE) statusColor = 'error';
    else if (entityData.statusType === OpenPositionStatusTypes.ON_HOLD) statusColor = 'warning';

    return (
      <Grid container spacing={6}>
        <Grid item xs={12}>
          <Card>
            <CardMedia sx={{ height: '14.5625rem' }} image='/images/cards/glass-house.png' />

            <CardContent>
              <Typography variant='h5' sx={{ mb: 2 }}>
                {entityData.name}
              </Typography>

              <Box
                sx={{
                  mb: 1.75,
                  display: 'flex',
                  alignItems: 'center',
                  '& svg': { color: 'info.main', mr: 1.75 },
                }}
              >
                <Icon icon='tabler:map-pin-filled' fontSize={12} />
                <Typography fontSize={12} sx={{ color: 'text.secondary' }}>
                  {capitalize(entityData.jobZone)}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                  <CustomChip rounded size='small' skin='light' label={capitalize(t(statusName))} color={statusColor} />
                </Box>
              </Box>
              <Typography sx={{ color: 'text.secondary' }}>{entityData.jobDescription}</Typography>

              <Grid item xs={12} sx={{ mt: (theme) => `${theme.spacing(6)} !important`, mb: '0px !important' }}>
                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                  {isPermittedByRol() ? (
                    <>
                      {entityData.applied ? (
                        <Button color='secondary' fullWidth variant='tonal' size='small'>
                          {capitalize(t('applied'))}
                        </Button>
                      ) : (
                        <Button
                          color='error'
                          variant='contained'
                          sx={{ mb: 4 }}
                          fullWidth
                          onClick={() => {
                            applyDialogOpen(entityData.name, entityData.id);
                          }}
                        >
                          {capitalize(t('apply'))}
                        </Button>
                      )}
                    </>
                  ) : (
                    ''
                  )}
                </Box>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    );
  };
  const renderRightPanel = () => {
    // si el value de actuve Tab se imprime antes de los tabs estalla el comp
    if (!activeTab || !entitySchema || !id || !entityData) return null;

    return (
      <TabContext value={activeTab}>
        <TabList
          variant='scrollable'
          scrollButtons='auto'
          onChange={handleTabChange}
          aria-label='forced scroll tabs'
          sx={{ borderBottom: (theme) => `1px solid ${theme.palette.divider}` }}
        >
          <Tab value={INITIAL_TAB} label={t('description')} sx={{ textTransform: 'capitalize' }} />
        </TabList>

        <TabPanel sx={{ p: 0 }} value={INITIAL_TAB}>
          <DetailsTab
            docId={id}
            schemaArg={entitySchema}
            schemaFieldsArg={entitySchemaFields}
            dataOpenPositon={entityData}
            onUpdate={handleOnTabUpdateData}
            campaignCode={campaignCode}
          />
        </TabPanel>
      </TabContext>
    );
  };

  if (loadingData) return <Loader />;

  return (
    <>
      <DialogAction
        show={applyDialogShow}
        title='open position applying'
        text={textConfirmOpenpositionApplied}
        textButtonSubmit='apply'
        colorButtonSubmit='primary'
        onClickSubmit={() => handleOpenPositionApply()}
        onClickClose={() => applyDialogClose()}
      />
      <Grid container spacing={6}>
        <Grid item xs={12} md={5} lg={4}>
          {renderLeftPanel()}
        </Grid>
        <Grid item xs={12} md={7} lg={8}>
          {renderRightPanel()}
        </Grid>
      </Grid>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: true,
  };
};
export const getStaticProps: GetStaticProps = async ({ params }: GetStaticPropsContext) => {
  return {
    props: {
      id: params?.id,
      // tab: params?.tab,
    },
  };
};
export default Vacant;
