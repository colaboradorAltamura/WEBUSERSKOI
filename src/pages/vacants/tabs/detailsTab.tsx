// ** MUI Imports
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';
import { Button, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { IEntitySchema, IEntitySchemaField } from 'src/types/entities';
import { CMSCollections, ICampaign, IOpenPosition } from 'src/types/@autogenerated';
import { useDynamics } from 'src/hooks/useDynamics';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { IForm } from 'src/types/dynamics';
import { getSourceEntityData, handleError, hasRole, nameof } from 'src/@core/coreHelper';
import TextInfo from 'src/@core/components/custom-text-info';
import { AppRols } from 'src/types/appRols';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import OpenPositionForm from '../form';
import { dynamicCreate, dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { useRouter } from 'next/router';

interface PropsType {
  docId: string;
  schemaArg: IEntitySchema;
  dataOpenPositon: IOpenPosition;
  schemaFieldsArg: IEntitySchemaField[];
  campaignCode: string;
  onUpdate: () => Promise<any>;
}

const DetailsTab = ({ docId, schemaArg, dataOpenPositon, schemaFieldsArg, campaignCode, onUpdate }: PropsType) => {
  // ** Hooks
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const router = useRouter();

  // ** State
  const [openPositionData, setOpenPositionData] = useState<IOpenPosition>(dataOpenPositon);

  //dialog
  const [showDialogEdit, setShowDialogEdit] = useState<boolean>(false);

  const closeDialogEdit = () => {
    setShowDialogEdit(!showDialogEdit);
  };
  const onHandleSubmit = async (formData: any, isCreating: boolean) => {
    try {
      if (!isCreating) {
        updateOpenPosition(formData);
      }
      onUpdate();
    } catch (e) {
      handleError(e);
    }
  };

  const updateOpenPosition = async (formData: any) => {
    const response = await dynamicUpdate({
      params: `/cms/${CMSCollections.OPEN_POSITIONS}/` + formData.id,
      data: formData,
    });
  };

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_RECRUITER))
    );
  };

  const getCampaignFriendlyName = (openPositionData: IOpenPosition) => {
    if (!openPositionData) return '';
    const sourceData = getSourceEntityData({
      obj: openPositionData,
      key: nameof<IOpenPosition>('relatedCampaign'),
    });
    if (!sourceData) return '';

    return (sourceData as ICampaign).name;
  };

  return (
    <>
      <Grid container spacing={6}>
        <Grid item xs={12}>
          <Card>
            <CardHeader
              title={capitalize(t('open position'))}
              action={
                isPermittedByRol() ? (
                  <Button
                    variant='contained'
                    onClick={() => {
                      setShowDialogEdit(true);
                    }}
                    sx={{ mr: 4, mb: [2, 0] }}
                  >
                    {capitalize(t('edit'))}
                  </Button>
                ) : (
                  ''
                )
              }
            />
            <CardContent>
              {isPermittedByRol() ? (
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <TextInfo title={'address'} value={openPositionData.jobAddress?.addressString}></TextInfo>
                    <TextInfo title={'pathologies'} value={openPositionData.pathologyType}></TextInfo>
                    <TextInfo title={'budget'} value={openPositionData.budget}></TextInfo>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <TextInfo title={'zone'} value={openPositionData.jobZone}></TextInfo>
                    <TextInfo title={'age range'} value={openPositionData.agePreference}></TextInfo>
                    <TextInfo title={'paymentDate'} value={openPositionData.paymentDate}></TextInfo>
                  </Grid>

                  <Grid item xs={12} md={12}>
                    <TextInfo title={'schedule'} value={openPositionData.daySchedule}></TextInfo>
                    <TextInfo title={'worker attributes'} value={openPositionData.workerAttributes}></TextInfo>
                    <TextInfo title={'pathologies types'} value={openPositionData.pathologyType}></TextInfo>
                    <TextInfo title={'worker amount'} value={openPositionData.workerAmount}></TextInfo>
                    <TextInfo title={'profile'} value={openPositionData.workerProfile}></TextInfo>
                    <TextInfo title={'sex'} value={openPositionData.workerSex}></TextInfo>
                    <TextInfo
                      title={'patient'}
                      value={openPositionData.patient ? 'true' : 'false'}
                      color={openPositionData.patient ? 'primary' : 'warning'}
                    ></TextInfo>
                  </Grid>
                  {openPositionData.relatedCampaign ? (
                    <>
                      <Grid
                        item
                        xs={6}
                        md={6}
                        onClick={() => {
                          router.push(`/register/terapeuts/care?campaign=${campaignCode}`);
                        }}
                      >
                        <TextInfo title={'campaign code'} value={campaignCode} renderAsCode={true}></TextInfo>
                      </Grid>
                      <Grid item xs={6} md={6}>
                        <TextInfo title={'campaign name'} value={getCampaignFriendlyName(openPositionData)}></TextInfo>
                      </Grid>
                    </>
                  ) : (
                    ''
                  )}
                </Grid>
              ) : (
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <TextInfo title={'pathologies'} value={openPositionData.pathologyType}></TextInfo>
                    <TextInfo title={'budget'} value={openPositionData.budget}></TextInfo>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <TextInfo title={'zone'} value={openPositionData.jobZone}></TextInfo>
                    <TextInfo title={'age range'} value={openPositionData.agePreference}></TextInfo>
                  </Grid>

                  <Grid item xs={12} md={12}>
                    <TextInfo title={'paymentDate'} value={openPositionData.paymentDate}></TextInfo>
                    <TextInfo title={'schedule'} value={openPositionData.daySchedule}></TextInfo>
                    <TextInfo title={'worker attributes'} value={openPositionData.workerAttributes}></TextInfo>
                  </Grid>
                </Grid>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/**modal form */}
      <OpenPositionForm
        formId={'edit_openPosition'}
        preloadForm={null}
        open={showDialogEdit}
        onSubmit={onHandleSubmit}
        onSubmitDone={onHandleSubmit}
        onClose={closeDialogEdit}
        title={t('edit open position') as string}
        initialValues={dataOpenPositon}
        isCreating={false}
        campaignCode={campaignCode}
      ></OpenPositionForm>
    </>
  );
};

export default DetailsTab;
