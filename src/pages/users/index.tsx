// ** React Imports
import { useCallback, useEffect, useState } from 'react';

// ** Next Imports
import Link from 'next/link';
import { GetStaticProps, InferGetStaticPropsType } from 'next/types';

// ** MUI Imports
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Divider from '@mui/material/Divider';
import Grid from '@mui/material/Grid';
import MenuItem from '@mui/material/MenuItem';
import { SelectChangeEvent } from '@mui/material/Select';
import Typography from '@mui/material/Typography';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { useTranslation } from 'react-i18next';

// ** Icon Imports

// ** Store Imports

// ** Custom Components Imports
import CustomAvatar from 'src/@core/components/mui/avatar';
import CustomTextField from 'src/@core/components/mui/text-field';

// ** Utils Import
import { getInitials } from 'src/@core/utils/get-initials';

// ** Actions Imports

// ** Third Party Components

// ** Types Imports

// ** Custom Table Components Imports
import { listUsers } from 'src/services/usersServices';
import AddUserDrawer from 'src/views/apps/user/list/AddUserDrawer';
import TableHeader from 'src/views/apps/user/list/TableHeader';

import Loader from 'src/@core/components/loader';
import { handleError, parseDateToDateTimeString } from 'src/@core/coreHelper';
import { IUser } from 'src/types/users';
import { UserStatusTypes } from 'src/types/@autogenerated';

interface CellType {
  row: any;
}

// ** renders client column
const renderClient = (row: IUser) => {
  if (row.avatarUrl && row.avatarUrl.length) {
    return <CustomAvatar src={row.avatarUrl} sx={{ mr: 2.5, width: 38, height: 38 }} />;
  } else {
    return (
      <CustomAvatar
        skin='light'
        color={'primary'}
        sx={{ mr: 2.5, width: 38, height: 38, fontWeight: 500, fontSize: (theme) => theme.typography.body1.fontSize }}
      >
        {getInitials(row.firstName + ' ' + row.lastName)}
      </CustomAvatar>
    );
  }
};

const columns: GridColDef[] = [
  {
    flex: 0.25,
    minWidth: 280,
    field: 'fullName',
    headerName: 'User',
    renderCell: ({ row }: CellType) => {
      const { fullName, email } = row;

      return (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          {renderClient(row)}
          <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
            <Typography
              noWrap
              component={Link}
              href={'/users/' + row.id}
              sx={{
                fontWeight: 500,
                textDecoration: 'none',
                color: 'text.secondary',
                '&:hover': { color: 'primary.main' },
              }}
            >
              {fullName}
            </Typography>
            <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
              {email}
            </Typography>
          </Box>
        </Box>
      );
    },
  },

  {
    flex: 0.2,
    minWidth: 110,
    field: 'createdAt',
    headerName: 'Created at',

    renderCell: ({ row }: CellType) => {
      return (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Box sx={{ display: 'flex', flexDirection: 'column' }}>
            <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
              {parseDateToDateTimeString(row.createdAt as any)}
            </Typography>
          </Box>
        </Box>
      );
    },
  },

  {
    flex: 0.2,
    minWidth: 110,
    field: 'updatedAt',
    headerName: 'Updated at',

    renderCell: ({ row }: CellType) => {
      return (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Box sx={{ display: 'flex', flexDirection: 'column' }}>
            <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
              {parseDateToDateTimeString(row.updatedAt as any)}
            </Typography>
          </Box>
        </Box>
      );
    },
  },

  // {
  //   flex: 0.1,
  //   minWidth: 100,
  //   sortable: false,
  //   field: 'actions',
  //   headerName: 'Actions',
  //   renderCell: ({ row }: CellType) => <RowOptions id={row.id} />,
  // },
];

const UserList = ({}: InferGetStaticPropsType<typeof getStaticProps>) => {
  // ** Hooks
  const { t } = useTranslation();

  // ** State
  const [role, setRole] = useState<string>('');

  const [value, setValue] = useState<string>('');
  const [status, setStatus] = useState<string>('');
  const [addUserOpen, setAddUserOpen] = useState<boolean>(false);
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 10 });

  const [users, setUsers] = useState<IUser[]>([]);

  const [loading, setLoading] = useState<boolean>(false);
  const [reloadToggle, setReloadToggle] = useState<boolean>(false);

  const getAppRoleLabel = (role: string) => {
    return role.replace('app-staff-', '').replace('app-', '').toUpperCase();
  };

  // ** Hooks

  const usersToTableData: any = (usersArray: IUser[]) => {
    if (!usersArray) return [] as any;

    const ret: any = usersArray.map((user) => {
      let userRoleString = '';

      if (user.appRols) {
        user.appRols.forEach((role, index) => {
          userRoleString += getAppRoleLabel(role);

          if (index !== user.appRols.length - 1) userRoleString += '-';
        });
      }

      return {
        id: user.id,

        fullName: user.firstName + ' ' + user.lastName,

        roleString: userRoleString,
        appRols: user.appRols ? user.appRols : [],
        contact: user.phoneNumber,
        email: user.email,

        createdAt: user.createdAt,
        updatedAt: user.updatedAt,

        appUserStatus: user.state === 0 ? UserStatusTypes.USER_STATUS_TYPE_INACTIVE : user.appUserStatus,
        avatar: user.avatarUrl,
        avatarColor: 'primary',
      };
    });

    return ret;
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoading(true);
        setUsers([]);

        // const filters = [
        //   { key: 'name', value: text, operator: '$or' },
        //   { key: 'email', value: text, operator: '$or' },
        // ];

        const users = await listUsers({ disableCache: true });

        setUsers(users.items as IUser[]);
        setLoading(false);
      } catch (e) {
        handleError(e);
        setLoading(false);
      }
    };

    doAsync();
  }, [role, status, value, reloadToggle]);

  const handleFilter = useCallback((val: string) => {
    setValue(val);
  }, []);

  const handleRoleChange = useCallback((e: SelectChangeEvent<unknown>) => {
    setRole(e.target.value as string);
  }, []);

  const handleStatusChange = useCallback((e: SelectChangeEvent<unknown>) => {
    setStatus(e.target.value as string);
  }, []);

  const toggleAddUserDrawer = () => setAddUserOpen(!addUserOpen);

  const onUserCreated = (createdUser: IUser) => {
    console.log('createdUser:', createdUser);
    setReloadToggle(!reloadToggle);
  };

  if (loading) return <Loader />;

  return (
    <Grid container spacing={6.5}>
      <Grid item xs={12}>
        {/* {apiData && (
          <Grid container spacing={6}>
            {apiData.statsHorizontalWithDetails.map((item: CardStatsHorizontalWithDetailsProps, index: number) => {
              return (
                <Grid item xs={12} md={3} sm={6} key={index}>
                  <CardStatsHorizontalWithDetails {...item} />
                </Grid>
              );
            })}
          </Grid>
        )} */}
      </Grid>
      <Grid item xs={12}>
        <Card>
          <Divider sx={{ m: '0 !important' }} />
          <TableHeader value={value} handleFilter={handleFilter} toggle={toggleAddUserDrawer} />
          <DataGrid
            autoHeight
            rowHeight={62}
            rows={usersToTableData(users)}
            columns={columns}
            disableRowSelectionOnClick
            pageSizeOptions={[10, 25, 50]}
            paginationModel={paginationModel}
            onPaginationModelChange={setPaginationModel}
          />
        </Card>
      </Grid>

      <AddUserDrawer open={addUserOpen} toggle={toggleAddUserDrawer} onUserCreated={onUserCreated} />
    </Grid>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  return {
    props: {},
  };
};

export default UserList;
