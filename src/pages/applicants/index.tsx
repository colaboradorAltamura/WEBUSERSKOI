// formik components

import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import { useEffect, useState } from 'react';
import Icon from 'src/@core/components/icon';
import Loader from 'src/@core/components/loader';
import {
  handleError,
  nameof,
  parseDateToDateTimeString,
  splitByUppercase,
  hasRole,
  getDistanceFromLatLonInKm,
  getSourceEntityData,
} from 'src/@core/coreHelper';
import { IEntitySchema, IEntitySchemaField, IEntitySchemaWithFields, ISelectOptionEntity } from 'src/types/entities';

import { DataGrid, GridColDef } from '@mui/x-data-grid';

import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import CustomChip from 'src/@core/components/mui/chip';

import { useRouter } from 'next/router';

import { CardContent, Divider, Grid, IconButton, MenuItem, Tooltip, capitalize } from '@mui/material';
import { ThemeColor } from 'src/@core/layouts/types';

import Fuse from 'fuse.js';
import { useTranslation } from 'react-i18next';
import CustomAvatar from 'src/@core/components/mui/avatar';
import CustomTextField from 'src/@core/components/mui/text-field';
import { getInitials } from 'src/@core/utils/get-initials';
import { useDynamics } from 'src/hooks/useDynamics';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { ApplicantsStateTypes, CMSCollections, IApplicant, IWorker, WorkerStateTypes } from 'src/types/@autogenerated';
import { Collections } from 'src/types/collectionsTypes';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { UserDefinedRols } from 'src/types/userDefinedRols';
import { AppRols } from 'src/types/appRols';

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;

const MenuProps = {
  PaperProps: {
    style: {
      width: 250,
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
    },
  },
};

const SCHEMA_NAME = Collections.APPLICANTS;

interface IApplicantRow extends IApplicant {
  showRow?: boolean;
  searchNumber: number;
}

interface CellType {
  row: IApplicantRow;
}

interface IListResponse {
  total: number;
  hasMore: boolean;
  items: IWorker[];
}

const ApplicantsList = ({}) => {
  // ** Hooks
  const router = useRouter();
  const dynamics = useDynamics();
  const { t } = useTranslation();
  const currentUser = useCurrentUser();

  // ** State
  const [entitySchema, setEntitySchema] = useState<IEntitySchema | null>(null);
  const [entitySchemaFields, setEntitySchemaFields] = useState<IEntitySchemaField[]>([]);

  const [entitiesData, setEntitiesData] = useState<IApplicantRow[]>([]);

  const [loadingSchema, setLoadingSchema] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);

  const [isFirstLoad, setIsFirstLoad] = useState<boolean>(true);

  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });

  const [columns, setColumns] = useState<GridColDef[]>([]);

  const [searchText, setSearchText] = useState<string>('');

  const [applicantStateTypeOptions, setApplicantStateTypeOptions] = useState<ISelectOptionEntity[]>([]);

  const [selectedApplicantStateTypeOptions, setSelectedApplicantStateTypeOptions] = useState<string[]>([
    ApplicantsStateTypes.PENDING_INTERVIEW,
    ApplicantsStateTypes.INTERVIEW_SCHEDULED,
    ApplicantsStateTypes.PENDING_QUOTATION,
    ApplicantsStateTypes.QUOTATION_APPROVED,
  ]);

  const APPLICANT_STATE_TYPE_PROP_NAME = 'applicantStateType';

  const isPermittedByRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_ADMISSION))
    );
  };

  const isCommercialRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      (hasRole(currentUser.currentUser?.appRols, AppRols.APP_ADMIN) ||
        hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_COMMERCIAL))
    );
  };
  const isRecruiterRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_RECRUITER)
    );
  };

  const isSeekerRol = () => {
    return (
      !currentUser.isLoading &&
      !!currentUser.currentUser &&
      hasRole(currentUser.currentUser?.userDefinedRols, UserDefinedRols.UDR_STAFF_SEEKER)
    );
  };
  // ** Effects
  useEffect(() => {
    if (isCommercialRol()) {
      setSelectedApplicantStateTypeOptions([ApplicantsStateTypes.PENDING_QUOTATION]);
    }
  }, []);
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingSchema(true);
        if (dynamics.isLoadingSchemas || !dynamics.entitySchemas || !dynamics.entitySchemasFields) return null;

        const schema = dynamics.entitySchemas.find((schema) => {
          return schema.name === SCHEMA_NAME;
        });
        if (!schema) throw new Error('Missing schemaName: ' + SCHEMA_NAME);

        const schemaFields = dynamics.entitySchemasFields.filter((field) => {
          return field.schemaId === schema.id;
        });

        // Fetch Schema
        // const entitySchemaResponse = (await getEntitySchemaByName(schemaName)) as IEntitySchemaWithFields;
        const entitySchemaResponse: IEntitySchemaWithFields = { ...schema, fields: schemaFields };

        setEntitySchema(entitySchemaResponse);
        setEntitySchemaFields(
          entitySchemaResponse.fields.sort((a, b) => {
            return a.order - b.order;
          })
        );

        setLoadingSchema(false);
      } catch (e: any) {
        handleError(e);
        setLoadingSchema(false);
      }
    };

    doAsync();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dynamics.isLoadingSchemas]);

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        // define filters options
        const field = entitySchemaFields.find((field) => {
          return field.name === APPLICANT_STATE_TYPE_PROP_NAME;
        });

        if (field && field.relationshipSchemaId && dynamics.entitySchemas) {
          const relatedSchema = dynamics.entitySchemas.find((schema) => {
            return schema.id === field.relationshipSchemaId;
          });

          if (relatedSchema) {
            const optionsData: any = await dynamicGet({ params: '/cms/' + relatedSchema.name });

            setApplicantStateTypeOptions(optionsData.items as ISelectOptionEntity[]);
          }
        }
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, currentUser.isLoading]);

  // Fetch schema.collectionName
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (!entitySchema || !entitySchemaFields) return;

        // Define table columns
        updateColumnsData();

        setLoadingData(true);

        // load entity data
        const data: any = await dynamicGet({
          params: '/cms/' + entitySchema.name,
          filters: [
            {
              key: APPLICANT_STATE_TYPE_PROP_NAME,
              value: selectedApplicantStateTypeOptions,
              operator: '$in',
            },
          ],
        });

        //gets all workers
        const workersData: any = (await dynamicGet({
          params: '/cms/' + CMSCollections.WORKERS,
          filters: [
            {
              key: 'workerState',
              value: [WorkerStateTypes.INACTIVE],
              operator: '$notin',
            },
          ],
        })) as IListResponse;

        setEntitiesData(
          data.items.map((applicant: IApplicant) => {
            const totalWorkers = getCloseWorkersFromApplicant(applicant, workersData.items);

            return { ...applicant, showRow: true, searchNumber: totalWorkers.length };
          }) as IApplicantRow[]
        );

        setLoadingData(false);
      } catch (e: any) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entitySchema, entitySchemaFields, selectedApplicantStateTypeOptions]);

  useEffect(() => {
    const doAsync = async () => {
      try {
        if (isFirstLoad) {
          setIsFirstLoad(false);

          return;
        }

        if (!entitySchema) return;

        setLoadingData(true);
        if (searchText) {
          const searchByProps = [
            nameof<IApplicant>('applicantFullname'),
            nameof<IApplicant>('applicantIdentificationNumber'),
          ];
          const fuse = new Fuse(entitiesData, {
            threshold: 0.3,
            // minMatchCharLength: 2,
            keys: searchByProps,
          });

          const auxFilteredItems = fuse.search(searchText);

          const filteredItems = auxFilteredItems.map((element: any) => {
            return { ...element.item, showRow: true };
          });

          setEntitiesData(
            entitiesData.map((item) => {
              if (
                filteredItems.find((fi) => {
                  return fi.id === item.id;
                })
              ) {
                return { ...item, showRow: true };
              }

              return { ...item, showRow: false };
            })
          );
        } else {
          setEntitiesData(
            entitiesData.map((item) => {
              return { ...item, showRow: true };
            })
          );
        }
        setLoadingData(false);
      } catch (e) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
  }, [searchText]);

  const getCloseWorkersFromApplicant = (applicant: IApplicant, workersData: IWorker[]) => {
    let closeWorkersFromApplicant = [];

    if (applicant.applicantAddress.lat || applicant.applicantAddress.lng) {
      closeWorkersFromApplicant = workersData.filter((worker: IWorker) => {
        const userWorker = getSourceEntityData({ obj: worker, key: nameof<IWorker>('userId') });

        if (userWorker) {
          if (!userWorker.dirtyAddress || !userWorker.dirtyAddress?.lat || !userWorker.dirtyAddress?.lng) {
            [];
          }

          const ditanceFromWorker = getDistanceFromLatLonInKm(
            applicant.applicantAddress.lng,
            applicant.applicantAddress.lat,
            userWorker.dirtyAddress?.lng,
            userWorker.dirtyAddress?.lat
          );

          const TOLERANCE_WORKER_DISTANCE_FROM_PATIENT_IN_KM = 5;

          return ditanceFromWorker <= TOLERANCE_WORKER_DISTANCE_FROM_PATIENT_IN_KM;
        }
      });

      return closeWorkersFromApplicant;
    }

    return [];
  };

  const updateColumnsData = () => {
    // TODO - aca podria jugar con una coleccion de 'layouts' donde defina las cols a mostrar
    // TODO - Los layouts podrian definir si se usan tablas o cards, y las cards que prop usar para cada campo en caso de
    // TODO - incluso las cards podrian ser de estructuras template o creadas por el usuario (designer)
    // TODO - Tmb podria jugar con campos virtuales que puedan ser funciones a lo excel o estáticos
    const columnsData: GridColDef[] = [];

    // icons col
    columnsData.push({
      flex: 0.1,
      minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='View Content'>
            <IconButton
              size='small'
              sx={{ color: 'text.secondary' }}
              onClick={() => {
                router.push(`/${SCHEMA_NAME}/${row.id}`);
              }}
            >
              <Icon icon='tabler:eye' />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.id}
        </Typography>
      ),
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'applicantFullname',
      headerName: t('name') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <CustomAvatar
              skin='light'
              color={'primary'}
              sx={{
                mr: 2.5,
                width: 38,
                height: 38,
                fontWeight: 500,
                fontSize: (theme) => theme.typography.body1.fontSize,
              }}
            >
              {getInitials(row.applicantFullname.toUpperCase())}
            </CustomAvatar>

            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                // component={Link}
                // href='/apps/user/view/account'
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.applicantFullname}
              </Typography>
              {row.applicantEmail && (
                <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                  {row.applicantEmail}
                </Typography>
              )}
              {!row.applicantEmail && row.relativeEmail && (
                <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                  {row.relativeEmail}
                </Typography>
              )}
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'applicantIdentificationNumber',
      headerName: t('identification number') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
                {row.applicantIdentificationNumber}
              </Typography>
            </Box>
          </Box>
        );
      },
    });

    if (!isRecruiterRol()) {
      columnsData.push({
        flex: 0.2,
        minWidth: 110,
        field: 'insurance',
        headerName: t('health insurance') as string,

        renderCell: ({ row }: CellType) => {
          const insuranceValue = row.insurance ? row.insurance : 'Privado';

          return (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>{insuranceValue}</Typography>
              </Box>
            </Box>
          );
        },
      });
    } else {
      columnsData.push({
        flex: 0.2,
        minWidth: 110,
        field: 'address',
        headerName: t('address') as string,

        renderCell: ({ row }: CellType) => {
          const addressValue = row.applicantAddress;

          return (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
                  {addressValue ? addressValue.addressString : '-'}
                </Typography>
              </Box>
            </Box>
          );
        },
      });
    }

    if (isRecruiterRol() || isSeekerRol()) {
      columnsData.push({
        flex: 0.2,
        minWidth: 110,
        field: 'totalWorkers',
        headerName: t('total workers nearby') as string,

        renderCell: ({ row }: CellType) => {
          return (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>{row.searchNumber}</Typography>
              </Box>
            </Box>
          );
        },
      });
    }

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'applicantStateType',
      headerName: t('status') as string,

      renderCell: ({ row }: CellType) => {
        const statusName = getSourceEntityData({ obj: row, key: 'applicantStateType' }).name;

        let statusColor: ThemeColor = 'info';

        if (row.applicantStateType === ApplicantsStateTypes.PENDING_INTERVIEW) statusColor = 'warning';
        else if (row.applicantStateType === ApplicantsStateTypes.INTERVIEW_SCHEDULED) statusColor = 'primary';
        else if (row.applicantStateType === ApplicantsStateTypes.PENDING_QUOTATION) statusColor = 'info';
        else if (row.applicantStateType === ApplicantsStateTypes.QUOTATION_APPROVED) statusColor = 'primary';
        else if (row.applicantStateType === ApplicantsStateTypes.QUOTATION_REJECTED) statusColor = 'warning';
        else if (row.applicantStateType === ApplicantsStateTypes.CONVERTED) statusColor = 'success';
        else if (row.applicantStateType === ApplicantsStateTypes.REJECTED) statusColor = 'error';

        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              {/* <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>{row.applicantNumberId}</Typography> */}

              <CustomChip rounded size='small' skin='light' label={capitalize(t(statusName))} color={statusColor} />
            </Box>
          </Box>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'updatedAt',
      headerName: t('updated at') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
                {parseDateToDateTimeString(row.updatedAt as any)}
              </Typography>
            </Box>
          </Box>
        );
      },
    });

    setColumns(columnsData);
  };

  // const handleSearchFilter = (newText: string) => {};

  const handleApplicantStateTypeOptionsChange = (newValues: string[]) => {
    setSelectedApplicantStateTypeOptions(newValues);
  };

  if (!entitySchema || !entitySchemaFields || loadingSchema) return <Loader />;

  return (
    <>
      <Card>
        <CardHeader sx={{ textTransform: 'capitalize' }} title={t(splitByUppercase(entitySchema.name))} />
        <CardContent>
          <Grid container spacing={6}>
            <Grid item sm={4} xs={12}>
              {applicantStateTypeOptions && (
                <CustomTextField
                  select
                  fullWidth
                  label={t('status')}
                  SelectProps={{
                    MenuProps,
                    multiple: true,
                    value: selectedApplicantStateTypeOptions,
                    onChange: (e) => handleApplicantStateTypeOptionsChange(e.target.value as string[]),
                    renderValue: (selected) => (
                      <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>
                        {(selected as unknown as string[]).map((value) => {
                          const typeOption = applicantStateTypeOptions.find((option) => {
                            return option.code === value;
                          });
                          if (!typeOption) return '-';

                          return (
                            <CustomChip
                              key={typeOption.code}
                              label={capitalize(t(typeOption.name))}
                              sx={{ m: 0.75 }}
                              skin='light'
                              color='primary'
                            />
                          );
                        })}
                      </Box>
                    ),
                  }}
                >
                  {applicantStateTypeOptions.map((selectOption, index) => (
                    <MenuItem key={index} value={selectOption.code}>
                      {capitalize(t(selectOption.name))}
                    </MenuItem>
                  ))}
                </CustomTextField>
              )}
            </Grid>
          </Grid>
        </CardContent>
        <Divider sx={{ m: '0 !important' }} />
        <Box
          sx={{
            py: 4,
            px: 6,
            rowGap: 2,
            columnGap: 4,
            display: 'flex',
            flexWrap: 'wrap',
            alignItems: 'center',

            // justifyContent: 'space-between',
            justifyContent: 'right',
          }}
        >
          {/* <Button color='secondary' variant='tonal' startIcon={<Icon icon='tabler:upload' />}>
        Export
      </Button> */}
          <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
            <CustomTextField sx={{ mr: 4 }} placeholder='Search ...' onChange={(e) => setSearchText(e.target.value)} />
            {isPermittedByRol() && (
              <Button
                onClick={() => {
                  router.push('/register/patients/care');
                }}
                variant='contained'
                sx={{ '& svg': { mr: 2 } }}
              >
                <Icon fontSize='1.125rem' icon='tabler:plus' />
                {capitalize(t('new'))}
              </Button>
            )}
          </Box>
        </Box>

        <DataGrid
          autoHeight
          rows={entitiesData.filter((item) => {
            return item.showRow;
          })}
          rowHeight={60}
          loading={loadingData}
          columns={columns}
          initialState={{
            columns: {
              columnVisibilityModel: {
                id: false,
              },
            },
          }}
          disableRowSelectionOnClick
          pageSizeOptions={[7, 10, 25, 50]}
          paginationModel={paginationModel}
          onPaginationModelChange={setPaginationModel}
        />
      </Card>
    </>
  );
};

export default ApplicantsList;
