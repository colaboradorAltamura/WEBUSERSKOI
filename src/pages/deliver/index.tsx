// ** MUI Import
// formik components

// ** MUI Imports

// ** React Imports
import { useEffect, useState } from 'react';

// ** MUI Imports
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import { DataGrid, GridColDef } from '@mui/x-data-grid';

import Tooltip from '@mui/material/Tooltip';

// ** Tab Content Imports
import Icon from 'src/@core/components/icon';
import Loader from 'src/@core/components/loader';
import { handleError } from 'src/@core/coreHelper';
import { v4 as uuidv4 } from 'uuid';

import { Button, Checkbox, FormControlLabel, capitalize } from '@mui/material';
import { dynamicCreate, dynamicGet } from 'src/services/entitiesDynamicServices';

import CardContent from '@mui/material/CardContent';
import Grid from '@mui/material/Grid';

import { useTranslation } from 'react-i18next';

// ** Custom Components Imports
import { Divider, MenuItem } from '@mui/material';
import Fuse from 'fuse.js';
import CustomAvatar from 'src/@core/components/mui/avatar';
import CustomTextField from 'src/@core/components/mui/text-field';
import { DISTANCE_OPTIONS } from 'src/@core/coreHelper';
import { getInitials } from 'src/@core/utils/get-initials';
import { useCurrentUser } from 'src/hooks/useCurrentUser';

// ** Icon Imports
import { parseDateToShortString } from 'src/@core/coreHelper';
import { useAuth } from 'src/hooks/useAuth';
import { IUsersAddress } from 'src/types/@autogenerated';
import { IAppointment } from 'src/types/appointments';

import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

interface IAppointmentRow extends IAppointment {
  showRow?: boolean;
  selected: boolean;
}

interface CellType {
  row: IAppointmentRow;
}

const Deliver = () => {
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const auth = useAuth();

  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [appointments, setAppointments] = useState<IAppointmentRow[]>([]);
  const [columns, setColumns] = useState<GridColDef[]>([]);
  const [searchText, setSearchText] = useState<string>('');
  const [isFirstLoad, setIsFirstLoad] = useState<boolean>(true);
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 100 });

  const [distanceOptions, setDistanceOptions] =
    useState<{ label: string; value: string; raw: any }[]>(DISTANCE_OPTIONS);

  const [addresses, setAddresses] = useState<IUsersAddress[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<IUsersAddress | null>(null);
  const [selectedDistanceOption, setSelectedDistanceOption] = useState<{ label: string; value: string; raw: any }>(
    DISTANCE_OPTIONS[1]
  );

  const [vehicles, setVehicles] = useState<string>('2');
  const [maxTravelTimePerVehicle, setMaxTravelTimePerVehicle] = useState<string>('240');
  const [capacityPerVehicle, setCapacityPerVehicle] = useState<string>('50');

  const [showRoutingModal, setShowRoutingModal] = useState<boolean>(false);
  const [isLoadingRoutes, setIsLoadingRoutes] = useState<boolean>(false);
  const [geoJSONData, setGeoJSONData] = useState<any>(null);

  const updateColumnsData = () => {
    // TODO - aca podria jugar con una coleccion de 'layouts' donde defina las cols a mostrar
    // TODO - Los layouts podrian definir si se usan tablas o cards, y las cards que prop usar para cada campo en caso de
    // TODO - incluso las cards podrian ser de estructuras template o creadas por el usuario (designer)
    // TODO - Tmb podria jugar con campos virtuales que puedan ser funciones a lo excel o estáticos
    const columnsData: GridColDef[] = [];

    // checkbox col
    columnsData.push({
      flex: 0.1,
      // minWidth: 110,
      field: 'icons',
      headerName: '',

      renderCell: ({ row }: CellType) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Tooltip title='Select or remove'>
            <Checkbox
              checked={row.selected}
              onChange={(event) => {
                row.selected = event.target.checked;
                // setAppointments(appointments);
              }}
            />
          </Tooltip>
        </Box>
      ),
    });

    // id col
    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'id',
      headerName: 'id',

      renderCell: ({ row }: CellType) => (
        <Typography
          noWrap
          sx={{
            fontWeight: 500,
            textDecoration: 'none',
            color: 'text.secondary',
            '&:hover': { color: 'primary.main' },
            cursor: 'pointer',
          }}
        >
          {row.itineraryId}
        </Typography>
      ),
    });

    // service duration
    columnsData.push({
      flex: 0.1,

      field: 'serviceDuration',
      headerName: t('service duration') as string,

      renderCell: ({ row }: CellType) => {
        const hours = Math.abs(row.start.getTime() - row.end.getTime()) / 36e5;

        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>{hours} hs</Typography>
            </Box>
          </Box>
        );
      },
    });

    // weigth
    columnsData.push({
      flex: 0.1,

      field: 'weigth',
      headerName: t('weigth') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>{2}</Typography>
            </Box>
          </Box>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'fullname',
      headerName: t('name') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <>
            <CustomAvatar
              skin='light'
              color={'primary'}
              sx={{
                mr: 2.5,
                width: 38,
                height: 38,
                fontWeight: 500,
                fontSize: (theme) => theme.typography.body1.fontSize,
              }}
            >
              {getInitials(row.patient.firstName + ' ' + row.patient.lastName).toUpperCase()}
            </CustomAvatar>

            <Box sx={{ display: 'flex', alignItems: 'flex-start', flexDirection: 'column' }}>
              <Typography
                noWrap
                // component={Link}
                // href='/apps/user/view/account'
                sx={{
                  fontWeight: 500,
                  textDecoration: 'none',
                  color: 'text.secondary',
                  '&:hover': { color: 'primary.main' },
                  textTransform: 'capitalize',
                }}
              >
                {row.patient.firstName + ' ' + row.patient.lastName}
              </Typography>
              {row.patient.email && (
                <Typography noWrap variant='body2' sx={{ color: 'text.disabled' }}>
                  {row.patient.email}
                </Typography>
              )}
            </Box>
          </>
        );
      },
    });

    columnsData.push({
      flex: 0.2,
      minWidth: 110,
      field: 'address',
      headerName: t('address') as string,

      renderCell: ({ row }: CellType) => {
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              <Typography sx={{ fontWeight: 500, color: 'text.secondary' }}>
                {row.userAddress ? row.userAddress.address.addressString : '-'}
              </Typography>
            </Box>
          </Box>
        );
      },
    });

    setColumns(columnsData);
  };

  // define columns and filters
  useEffect(() => {
    const doAsync = async () => {
      try {
        // Define table columns
        updateColumnsData();
      } catch (e: any) {
        handleError(e);
      }
    };

    doAsync();
  }, []);

  // fetch appointments
  useEffect(() => {
    const doAsync = async () => {
      try {
        setIsLoading(true);

        const depot1 = {
          id: '1',
          userId: 'admin',

          address: {
            country: 'Argentina',
            streetAndNumber: 'Av. Gral. Juan Domingo Perón 3780-3820, B1617 Gral. Pacheco, Provincia de Buenos Aires',
            lng: -58.679935250018445,
            city: 'Paso del Rey',
            addressString: 'Av. Gral. Juan Domingo Perón 3780-3820, B1617 Gral. Pacheco, Provincia de Buenos Aires',
            geohash: '69y4yvypre',
            // county: 'Moreno',
            state: 'Provincia de Buenos Aires',
            postal_code: 'B1742',
            lat: -34.44406169922105,
            addressObject: {
              formatted_address:
                'Bernardo de Irigoyen 1636, B1742DFH Paso del Rey, Provincia de Buenos Aires, Argentina',
              html_attributions: [],
              geometry: {
                viewport: {
                  east: -58.75586991970849,
                  south: -34.6412980802915,
                  north: -34.6386001197085,
                  west: -58.7585678802915,
                },
                location: { lng: -58.7573015, lat: -34.6400027 },
              },
              address_components: [
                {
                  types: ['street_number'],
                  short_name: '1636',
                  long_name: '1636',
                },
                {
                  types: ['route'],
                  short_name: 'Bernardo de Irigoyen',
                  long_name: 'Bernardo de Irigoyen',
                },
                {
                  types: ['locality', 'political'],
                  short_name: 'Paso del Rey',
                  long_name: 'Paso del Rey',
                },
                {
                  types: ['administrative_area_level_2', 'political'],
                  short_name: 'Moreno',
                  long_name: 'Moreno',
                },
                {
                  types: ['administrative_area_level_1', 'political'],
                  short_name: 'Provincia de Buenos Aires',
                  long_name: 'Provincia de Buenos Aires',
                },
                {
                  types: ['country', 'political'],
                  short_name: 'AR',
                  long_name: 'Argentina',
                },
                {
                  types: ['postal_code'],
                  short_name: 'B1742',
                  long_name: 'B1742',
                },
                {
                  types: ['postal_code_suffix'],
                  short_name: 'DFH',
                  long_name: 'DFH',
                },
              ],
            },
          },
        };

        const depot2 = {
          id: '2',
          userId: 'admin',

          address: {
            country: 'Argentina',
            streetAndNumber: 'Av. Rivadavia 5040, C1406 CABA',
            lng: -58.436924218854834,
            city: 'Paso del Rey',
            addressString: 'Av. Rivadavia 5040, C1406 CABA',
            geohash: '69y4yvypre',
            // county: 'Moreno',
            state: 'Provincia de Buenos Aires',
            postal_code: 'B1742',
            lat: -34.61869282228962,
            addressObject: {
              formatted_address:
                'Bernardo de Irigoyen 1636, B1742DFH Paso del Rey, Provincia de Buenos Aires, Argentina',
              html_attributions: [],
              geometry: {
                viewport: {
                  east: -58.75586991970849,
                  south: -34.6412980802915,
                  north: -34.6386001197085,
                  west: -58.7585678802915,
                },
                location: { lng: -58.7573015, lat: -34.6400027 },
              },
              address_components: [
                {
                  types: ['street_number'],
                  short_name: '1636',
                  long_name: '1636',
                },
                {
                  types: ['route'],
                  short_name: 'Bernardo de Irigoyen',
                  long_name: 'Bernardo de Irigoyen',
                },
                {
                  types: ['locality', 'political'],
                  short_name: 'Paso del Rey',
                  long_name: 'Paso del Rey',
                },
                {
                  types: ['administrative_area_level_2', 'political'],
                  short_name: 'Moreno',
                  long_name: 'Moreno',
                },
                {
                  types: ['administrative_area_level_1', 'political'],
                  short_name: 'Provincia de Buenos Aires',
                  long_name: 'Provincia de Buenos Aires',
                },
                {
                  types: ['country', 'political'],
                  short_name: 'AR',
                  long_name: 'Argentina',
                },
                {
                  types: ['postal_code'],
                  short_name: 'B1742',
                  long_name: 'B1742',
                },
                {
                  types: ['postal_code_suffix'],
                  short_name: 'DFH',
                  long_name: 'DFH',
                },
              ],
            },
          },
        };

        setSelectedAddress(depot1);
        setAddresses([depot1, depot2]);
        const fromDate = new Date(2022, 1, 1);
        const toDate = new Date(2024, 1, 1);

        const appointmentsResponse = (await dynamicGet({
          params: `/patients/appointments?from=${parseDateToShortString(fromDate)}&to=${parseDateToShortString(
            toDate
          )}`,
        })) as IAppointment[];

        setAppointments(
          appointmentsResponse.map((item) => {
            return {
              ...item,
              showRow: true,
              id: uuidv4(),
              start: new Date(item.start),
              end: new Date(item.end),
              selected: true,
            };
          })
        );

        setIsLoading(false);
      } catch (e: any) {
        setIsLoading(false);

        handleError(e);
      }
    };

    doAsync();
  }, []);

  // filter by text
  useEffect(() => {
    const doAsync = async () => {
      try {
        if (isFirstLoad) {
          setIsFirstLoad(false);

          return;
        }

        setLoadingData(true);
        if (searchText) {
          const searchByProps = ['patient.firstName', 'patient.lastName', 'userAddress.address.addressString'];
          const fuse = new Fuse(appointments, {
            threshold: 0.3,
            // minMatchCharLength: 2,
            keys: searchByProps,
          });

          const auxFilteredItems = fuse.search(searchText);

          const filteredItems = auxFilteredItems.map((element: any) => {
            return { ...element.item, showRow: true };
          });

          setAppointments(
            appointments.map((item) => {
              if (
                filteredItems.find((fi) => {
                  return fi.id === item.itineraryId;
                })
              ) {
                return { ...item, showRow: true };
              }

              return { ...item, showRow: false };
            })
          );
        } else {
          setAppointments(
            appointments.map((item) => {
              return { ...item, showRow: true };
            })
          );
        }
        setLoadingData(false);
      } catch (e) {
        setLoadingData(false);
        handleError(e);
      }
    };

    doAsync();
  }, [searchText]);

  interface IDeliveryOrder {
    serviceDuration?: number;
    trackingCode: string;
    deliveryAddress: {
      geolocation: { lng: number; lat: number };
      addressString: string;
    };
  }
  const getRoadmapResponse = async () => {
    if (!selectedAddress || !selectedAddress.id || !selectedAddress.address.lng || !selectedAddress.address.lat)
      throw new Error('Select a depot');

    const orders: IDeliveryOrder[] = appointments
      .filter((item) => {
        return item.selected;
      })
      .map((appointment) => {
        return {
          // duration = appointment
          trackingCode: appointment.itineraryId,
          deliveryAddress: {
            geolocation: { lng: appointment.userAddress.address.lng, lat: appointment.userAddress.address.lat },
            addressString: appointment.userAddress.address.addressString,
          },
        };
      }) as IDeliveryOrder[];

    // add depot
    orders.unshift({
      // duration = appointment
      trackingCode: selectedAddress.id,
      deliveryAddress: {
        geolocation: { lng: selectedAddress.address.lng, lat: selectedAddress.address.lat },
        addressString: selectedAddress.address.addressString ? selectedAddress.address.addressString : '',
      },
    });

    // const numVehicles = 1;
    // const maxTravelTimePerVehicle = 120;
    // const capacityPerVehicle = orders.length;

    const response = await dynamicCreate({
      params: `/cms/get-roadmap`,
      data: {
        orders,
        numVehicles: parseInt(vehicles),
        maxTravelTimePerVehicle: parseInt(maxTravelTimePerVehicle),
        capacityPerVehicle: parseInt(capacityPerVehicle),
      },
    });

    return response;
  };

  const handleShowRoutingModal = async () => {
    try {
      setIsLoadingRoutes(true);

      const response = await getRoadmapResponse();

      setGeoJSONData(response);

      const myWindow = window.open('/routemap', '_blank') as any;

      myWindow.window.roadmapInfo = response;

      setIsLoadingRoutes(false);
    } catch (e: any) {
      setIsLoadingRoutes(false);
      handleError(e);
    }
  };

  const handleExportRoutes = async () => {
    try {
      const wb = new ExcelJS.Workbook();

      const ws = wb.addWorksheet();

      ws.columns = [
        {
          header: 'Transportista',
          key: 'Transportista',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
        {
          header: 'Parada',
          key: 'Parada',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
        {
          header: 'Pedido',
          key: 'CanPedidotidad',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
        {
          header: 'Dirección',
          key: 'Dirección',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
        {
          header: 'Tiempo',
          key: 'Tiempo',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
        {
          header: 'Map',
          key: 'Map',
          width: 32,
          style: { font: { name: 'Arial Black' } },
        },
      ];

      geoJSONData.features
        .filter((feature: any) => {
          return feature && feature.properties && feature.properties.route && feature.properties.stop;
        })
        .forEach((feature: any) => {
          const row = ws.addRow([
            feature.properties.route,
            feature.properties.stop,
            feature.properties.name,
            feature.properties.address,
            feature.properties.time,
            feature.properties.mapLink,
          ]);
          row.font = { bold: false };
        });

      const buf = await wb.xlsx.writeBuffer();

      saveAs(new Blob([buf]), 'Roadmap.xlsx');
    } catch (e: any) {
      setIsLoadingRoutes(false);
      handleError(e);
    }
  };

  if (isLoading) return <Loader />;

  return (
    <>
      <Grid container spacing={6}>
        <Grid item xs={12}>
          <Card style={{ marginBottom: 10, marginTop: 10 }}>
            <CardHeader title={capitalize(t('search'))} />
            <CardContent>
              <Grid container spacing={0}>
                <Grid item xs={12} sx={{ mb: 2 }}>
                  <CustomTextField
                    select
                    fullWidth
                    label={t('Depot')}
                    onChange={(event) => {
                      const selected = addresses.find((address) => {
                        return address.id === event.target.value;
                      });
                      if (selected) setSelectedAddress(selected);
                    }}
                    value={selectedAddress?.id}
                  >
                    {!!addresses &&
                      addresses.map((op, index) => {
                        return (
                          <MenuItem key={index} value={op.id}>
                            {op.address.addressString}
                          </MenuItem>
                        );
                      })}
                  </CustomTextField>
                </Grid>

                <Grid item xs={12} sx={{ mb: 2 }}>
                  <CustomTextField
                    select
                    fullWidth
                    label={t('Max Depot Distance in km')}
                    onChange={(event) => {
                      const selected = distanceOptions.find((op) => {
                        return op.value === event.target.value;
                      });
                      if (selected) setSelectedDistanceOption(selected);
                    }}
                    value={selectedDistanceOption.value}
                  >
                    {!!distanceOptions &&
                      distanceOptions.map((op, index) => {
                        return (
                          <MenuItem key={index} value={op.value}>
                            {/* <em>None</em> */}
                            {op.label}
                          </MenuItem>
                        );
                      })}
                  </CustomTextField>
                </Grid>

                <Grid item xs={12} sx={{ mb: 2 }}>
                  <CustomTextField
                    fullWidth
                    label={t('Vehicles')}
                    onChange={(event) => {
                      setVehicles(event.target.value);
                    }}
                    value={vehicles}
                  />
                </Grid>

                <Grid item xs={12} sx={{ mb: 2 }}>
                  <CustomTextField
                    fullWidth
                    label={t('Max travel time per vehicle')}
                    onChange={(event) => {
                      setMaxTravelTimePerVehicle(event.target.value);
                    }}
                    value={maxTravelTimePerVehicle}
                  />
                </Grid>

                <Grid item xs={12} sx={{ mb: 2 }}>
                  <CustomTextField
                    fullWidth
                    label={t('Capacity Per Vehicle')}
                    onChange={(event) => {
                      setCapacityPerVehicle(event.target.value);
                    }}
                    value={capacityPerVehicle}
                  />
                </Grid>

                {!isLoadingRoutes && (
                  <Grid item xs={6} sx={{ mb: 2 }}>
                    <Button
                      variant='contained'
                      onClick={() => {
                        handleShowRoutingModal();
                      }}
                    >
                      <Icon fontSize='1.125rem' icon='tabler:map' />
                      {capitalize(t('Show routes') as string)}
                    </Button>
                  </Grid>
                )}

                {isLoadingRoutes && <Loader />}

                {geoJSONData && (
                  <Grid item xs={6} sx={{ mb: 2 }}>
                    <Button
                      variant='contained'
                      onClick={() => {
                        handleExportRoutes();
                      }}
                    >
                      <Icon fontSize='1.125rem' icon='tabler:map' />
                      {capitalize(t('export routes') as string)}
                    </Button>
                  </Grid>
                )}
              </Grid>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12}>
          <Card>
            <CardHeader sx={{ textTransform: 'capitalize' }} title={t('Deliver')} />

            <CardContent>
              <Divider sx={{ m: '0 !important' }} />
              <Box
                sx={{
                  py: 4,
                  px: 6,
                  rowGap: 2,
                  columnGap: 4,
                  display: 'flex',
                  flexWrap: 'wrap',
                  alignItems: 'center',

                  // justifyContent: 'space-between',
                  justifyContent: 'right',
                }}
              >
                {/* <Button color='secondary' variant='tonal' startIcon={<Icon icon='tabler:upload' />}>
        Export
      </Button> */}
                <Box sx={{ rowGap: 2, display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
                  <CustomTextField
                    sx={{ mr: 4 }}
                    placeholder='Search ...'
                    onChange={(e) => setSearchText(e.target.value)}
                  />
                </Box>
              </Box>

              <DataGrid
                autoHeight
                rows={appointments.filter((item) => {
                  return item.showRow;
                })}
                rowHeight={60}
                loading={loadingData}
                columns={columns}
                initialState={{
                  columns: {
                    columnVisibilityModel: {
                      id: false,
                    },
                  },
                }}
                disableRowSelectionOnClick
                pageSizeOptions={[7, 10, 25, 50]}
                paginationModel={paginationModel}
                onPaginationModelChange={setPaginationModel}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* <Dialog
        fullWidth
        open={showRoutingModal}
        scroll='body'
        maxWidth='md'
        onClose={handleClose}
        onBackdropClick={handleClose}
        TransitionComponent={Transition}
        sx={{ '& .MuiDialog-paper': { overflow: 'visible' } }}
      >
        <DialogContent
          sx={{
            pr: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pl: (theme) => [`${theme.spacing(5)} !important`, `${theme.spacing(11)} !important`],
            py: (theme) => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`],
          }}
        >
          <CustomCloseButton onClick={handleClose}>
            <Icon icon='tabler:x' fontSize='1.25rem' />
          </CustomCloseButton>
          <Box sx={{ mb: 8, textAlign: 'center' }}>
            <Typography variant='h3' sx={{ mb: 3 }}>
              Routes
            </Typography>
          </Box>

          {isLoadingRoutes && <Loader />}
          {showRoutingModal && !isLoadingRoutes && geoJSONData && (
            <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
              <div className='main-content'>

                <div
                  style={{ marginTop: 20 }}
                  id='js-map'
                  className='render-viewport'
                  data-type='view'
                  //data-file="https://raw.githubusercontent.com/mapbox/node-or-tools/32027ae43dd2fda2613e7cd239b201d4ef95aebf/example/solution.geojson"
                  // data-file={JSON.stringify(roadmapInfo)}
                  data-file={JSON.stringify(geoJSONData)}
                  data-basemap='mapbox://styles/mapbox/light-v10'
                  data-token='pk.eyJ1IjoiZ2l0aHViIiwiYSI6ImNqaHcxdnVhZDE1Z20za2w2bXo2MGlpMjYifQ.440aOf-0gSggvf319ukLzA'
                ></div>
              </div>
            </Box>
          )}
        </DialogContent>
      </Dialog> */}
    </>
  );
};

export default Deliver;
