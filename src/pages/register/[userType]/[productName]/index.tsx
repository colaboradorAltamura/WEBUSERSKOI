// ** React Imports
import { ReactNode, useEffect, useState, lazy } from 'react';

// ** Next Import

// ** MUI Components
import Alert from '@mui/material/Alert';
import Box, { BoxProps } from '@mui/material/Box';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import Typography from '@mui/material/Typography';
import { styled, useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';

import * as yup from 'yup';

// ** Custom Component Import
import CustomTextField from 'src/@core/components/mui/text-field';

// ** Icon Imports
import Icon from 'src/@core/components/icon';

// ** Layout Import
import BlankLayout from 'src/@core/layouts/BlankLayout';

// ** Hooks
import useBgColor from 'src/@core/hooks/useBgColor';
import { useSettings } from 'src/@core/hooks/useSettings';

// ** Demo Imports

import { Grid, Link, MenuItem, Toolbar } from '@mui/material';
import { Form, Formik, FormikHelpers } from 'formik';
import { useRouter } from 'next/router';
import { useTranslation } from 'react-i18next';
import FormLocationField from 'src/@core/components/form/FormLocationField';
import Loader from 'src/@core/components/loader';
import { capitalize, handleError } from 'src/@core/coreHelper';
import LanguageDropdown from 'src/@core/layouts/components/shared-components/LanguageDropdown';
import { DEFAULT_ORGANIZATION_ID } from 'src/configs/appConfig';
import { useAuth } from 'src/hooks/useAuth';
import { dynamicGet } from 'src/services/entitiesDynamicServices'; // ** Source code imports
import {
  CMSCollections,
  PersonIdentificationTypes,
  SexTypes,
  WorkerProfessionTypes,
  WorkerStateTypes,
} from 'src/types/@autogenerated';
import { DynamicComponentTypes } from 'src/types/dynamics';
import DynamicFormComponent from 'src/views/components/dynamics/DynamicFormComponent';
import RegisterTerapeutsCare from 'src/views/register/terapeuts/care';
import RegisterTerapeutsClinic from 'src/views/register/terapeuts/clinic';
import RegisterPatientsCare from 'src/views/register/patients/care';
import RegisterPatientsClinic from 'src/views/register/patients/clinic';
// ** Styled Components

const RightWrapper = styled(Box)<BoxProps>(({ theme }) => ({
  width: '100%',
  [theme.breakpoints.up('md')]: {
    maxWidth: 800,
  },
  [theme.breakpoints.up('lg')]: {
    maxWidth: 1100,
  },
  [theme.breakpoints.up('xl')]: {
    maxWidth: 1400,
  },
}));

interface FormData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  passwordConfirmation: string;
  profession: string;
  sex: string;
  identificationType: string;
  identificationNumber: string;
  phoneNumber: string;
  workerState: WorkerStateTypes;
}

const Register = () => {
  // ** States
  const [showPassword, setShowPassword] = useState<boolean>(false);

  // ** options
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  const [professionOptions, setProfessionOptions] = useState<any[]>([]);
  const [sexOptions, setSexOptions] = useState<any[]>([]);
  const [identificationTypeOptions, setIdentificationTypeOptions] = useState<any[]>([]);

  const [map, setMap] = useState<any>(null);
  const [addressPlace, setAddressPlace] = useState<any>();

  // ** Hooks
  const theme = useTheme();

  const win: any = window;
  const { settings, saveSettings } = useSettings();
  const hidden = useMediaQuery(theme.breakpoints.down('md'));
  const router = useRouter();
  const auth = useAuth();
  const bgColors = useBgColor();
  const { t } = useTranslation();

  // ** Vars
  const registerUrlLink = router.asPath;
  const userType = router.query.userType ? router.query.userType : 'terapeuts';
  const productName = router.query.productName ? router.query.productName : 'care';

  const lng = router.query.lng as string | null;

  const schema = yup.object().shape({
    firstName: yup.string().required(),
    lastName: yup.string().required(),
    email: yup.string().email().required(),
    password: yup.string().min(5).required(),
    profession: yup.string().required(),
    sex: yup.string().required(),
    identificationType: yup.string().required(),
    identificationNumber: yup.string().min(5).required(),
    phoneNumber: yup.string().min(10).required(),
    passwordConfirmation: yup.string().test('passwords-match', 'Passwords must match', function (value) {
      return this.parent.password === value;
    }),
  });

  const defaultValues = {
    firstName: '',
    lastName: '',
    password: '',
    passwordConfirmation: '',
    email: '',
    profession: '',
    sex: '',
    identificationType: '',
    identificationNumber: '',
    phoneNumber: '',
    workerState: WorkerStateTypes.PENDING_INTERVIEW,
  };

  const onSuccessRegistration = () => {
    router.replace('/'); //here
  };

  const LinkStyled = styled(Link)(({ theme }) => ({
    textDecoration: 'none',
    color: `${theme.palette.primary.main} !important`,
  }));
  const onSubmit = (values: FormData, actions: FormikHelpers<FormData>) => {
    try {
      if (!addressPlace) throw new Error(t('address missing') as string);
      const {
        firstName,
        lastName,
        email,
        password,
        profession,
        identificationType,
        identificationNumber,
        phoneNumber,
        sex,
        workerState,
      } = values;

      actions.setSubmitting(true);

      auth.register(
        {
          firstName,
          lastName,
          email,
          password,
          profession,
          identificationType,
          identificationNumber,
          phoneNumber,
          sex,
          address: addressPlace,
          workerState,
          registerUrlLink,
        },
        onSuccessRegistration,
        (errorData) => {
          actions.setSubmitting(false);
          handleError(new Error(errorData.errorMessage));

          // setError('email', {
          //   type: 'manual',
          //   message: errorData.errorMessage,
          // });
        }
      );
    } catch (error) {
      actions.setSubmitting(false);

      handleError(error);
    }
  };

  // ** Effects

  useEffect(() => {
    // TODO skin en base al theme recibido
    if (lng === 'pt') {
      saveSettings({ ...settings, codeCountry: 'br', skin: productName === 'clinic' ? 'bordered' : 'default' });
    } else if (lng === 'ar') {
      saveSettings({ ...settings, codeCountry: 'ar', skin: productName === 'clinic' ? 'bordered' : 'default' });
    }
  }, []);

  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        setProfessionOptions(await getOptions(CMSCollections.WORKER_PROFESSION_TYPES));
        setSexOptions(await getOptions(CMSCollections.SEX_TYPES));
        setIdentificationTypeOptions(await getOptions(CMSCollections.PERSON_IDENTIFICATION_TYPES));
        setLoadingOptions(false);
      } catch (error) {}
    };

    doAsync();
  }, []);

  useEffect(() => {
    if (!map || !addressPlace) return;

    const bounds = new win.google.maps.LatLngBounds();

    const image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

    const marker = new win.google.maps.Marker({
      position: addressPlace.addressObject.geometry.location,
      draggable: false,
      id: 1, //to do check on this
      map: map,
      icon: image,
    });

    bounds.extend(addressPlace.addressObject.geometry.location);

    map.fitBounds(bounds);
    map.setZoom(Math.min(map.getZoom(), 12));
  }, [addressPlace, map]);

  // useEffect(() => {
  //   if (!win.google) return;

  // const mapAux = new win.google.maps.Map(document.getElementById('map-canvas'), {
  //   center: {
  //     lat: -34.603008, //lat and long Buenos Aires
  //     lng: -58.3794688,
  //   },
  //   zoom: 12,
  // });

  //   setMap(mapAux);
  // }, [win.google]);

  const getOptions = async (schema: string) => {
    try {
      const optionsData: any = await dynamicGet({ params: '/cms/public/' + DEFAULT_ORGANIZATION_ID + '/' + schema });

      return optionsData.items;
    } catch (error) {
      return [];
    }
  };

  if (userType === 'terapeuts') {
    if (productName === 'clinic') {
      return <RegisterTerapeutsClinic />;
    } else {
      return <RegisterTerapeutsCare />;
    }
  }
  // (userType === 'patients')
  else {
    if (productName === 'clinic') {
      return <RegisterPatientsClinic />;
    } else {
      return <RegisterPatientsCare />;
    }
  }
};

Register.getLayout = (page: ReactNode) => <BlankLayout>{page}</BlankLayout>;

Register.guestGuard = true;

export default Register;
