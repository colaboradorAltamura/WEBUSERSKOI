import { Divider, Grid } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { useEffect, useState } from 'react';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { CMSCollections, IWorkerEvaluation, IWorkerEvaluationScore, IQuestionsType } from 'src/types/@autogenerated';
import { capitalize, getSourceEntityData, handleError, nameof } from 'src/@core/coreHelper';
import DialogAction from 'src/@core/components/custom-dialog-action';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useSettings } from 'src/@core/hooks/useSettings';
import Loader from 'src/@core/components/loader';

interface PropsType {
  docId: string;
  open: boolean;
  onClose: () => void;
  initialValues: IWorkerEvaluation;
  title?: string;
}

interface IWorkerEvaluationRow extends IWorkerEvaluation {
  questionsTypeFriendlyName: string;
}

const WorkerEvaluationDetails = ({ docId, initialValues, open, onClose, title }: PropsType) => {
  // **  HOOKS
  const { t } = useTranslation();
  const { settings } = useSettings();
  const currentUser = useCurrentUser();
  const win: any = window;

  // ** STATES
  const [dailyReportData, setWorkerEvaluationData] = useState<IWorkerEvaluation>(initialValues);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [loadingOptions, setLoadingOptions] = useState<boolean>(true);

  // - questionss
  const [questionsScoreReportData, setGoalScoreReportData] = useState<IWorkerEvaluationScore[]>([]);
  const [questionsEvaluation, setquestionsEvaluation] = useState<IWorkerEvaluationScore[]>([]);

  // obtenemos los questionss del patientr
  useEffect(() => {
    const doAsync = async () => {
      try {
        setLoadingOptions(true);
        const questionssResponse = await dynamicGet({
          params:
            '/cms/' +
            CMSCollections.WORKER_EVALUATION_SCORES +
            '/by-prop/' +
            nameof<IWorkerEvaluationScore>('workerEvaluationId') +
            '/' +
            initialValues.id,
        });

        if (questionssResponse && questionssResponse.items) setquestionsEvaluation(questionssResponse.items);
        setLoadingOptions(false);
      } catch (error) {
        handleError(error);

        setLoadingOptions(false);
      }
    };

    doAsync();
  }, []);

  //obtiene el nombre del tipo de objetivo
  const getQuestionTypeInfo = (questionsScore: IWorkerEvaluationScore) => {
    if (!questionsScore) return;

    const sourceData = getSourceEntityData({
      obj: questionsScore,
      key: nameof<IWorkerEvaluationScore>('questionTypeId'),
    });

    if (!sourceData) return;

    return sourceData as IQuestionsType;
  };
  const closeDialogEdit = () => {
    onClose();
  };

  //component que muestra el form de los obj
  const WorkerEvaluationGoalsStep = () => {
    return (
      <>
        {loadingOptions ? (
          <Loader />
        ) : (
          <Grid container spacing={0} sx={{ mb: 6 }}>
            <Grid container spacing={5} sx={{ mb: 4 }}>
              <Grid item xs={12} md={3} sm={3}>
                {capitalize(t('name'))}
              </Grid>
              <Grid item xs={12} md={7} sm={7}>
                {capitalize(t('description'))}
              </Grid>

              <Grid item xs={12} md={2} sm={2}>
                {capitalize(t('score'))}
              </Grid>
            </Grid>

            <Divider sx={{ mb: 4 }} />

            {questionsEvaluation.map((questions) => {
              return (
                <>
                  <Grid container spacing={5} sx={{ mb: 4 }} key={`container${questions.id}`}>
                    <Grid item xs={12} md={3} sm={3} key={`description${questions.id}`}>
                      {getQuestionTypeInfo(questions)?.name}
                    </Grid>
                    <Grid item xs={12} md={7} sm={7} key={`questionsScore${questions.id}`} className={questions.id}>
                      {getQuestionTypeInfo(questions)?.description}
                    </Grid>

                    <Grid item xs={12} md={2} sm={2} key={`questionsNotes${questions.id}`} className={questions.id}>
                      {questions.questionScore}
                    </Grid>
                  </Grid>
                </>
              );
            })}
          </Grid>
        )}
      </>
    );
  };

  return (
    <>
      <DialogAction
        show={open}
        title={capitalize(title ?? t('daily report'))}
        keepMounted
        maxWidth='md'
        colorButtonSubmit='primary'
        showOnClickClose={false}
        onClickClose={() => closeDialogEdit()}
      >
        {open && (
          <Grid item xs={12} md={12} lg={12} sx={{ marginTop: '15px' }}>
            {WorkerEvaluationGoalsStep()}
          </Grid>
        )}
      </DialogAction>
    </>
  );
};

export default WorkerEvaluationDetails;
