// ** MUI Import
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import { capitalize } from '@mui/material';

import { SyntheticEvent, useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';

// ** Icon Imports
import Loader from 'src/@core/components/loader';
import { useAuth } from 'src/hooks/useAuth';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useRouter } from 'next/router';
import { CMSCollections, IWorker, WorkerStateTypes } from 'src/types/@autogenerated';
import { getSourceEntityData, handleError } from 'src/@core/coreHelper';
import { dynamicGet, dynamicUpdate } from 'src/services/entitiesDynamicServices';
import { useDynamics } from 'src/hooks/useDynamics';

import { useSettings } from 'src/@core/hooks/useSettings';
import WidgetOldestOpenPositions from 'src/views/dashboards/crm/TableWidgets/WidgetOldestOpenPositions';
import RecruitmentMap from 'src/views/address/recruitmentMap';

// ** Custom Components Imports
import ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts';

// ** Util Import
import { hexToRGBA } from 'src/@core/utils/hex-to-rgba';
import { forEach, truncate } from 'lodash';

// ** Demo Component Imports
import PieChart from 'src/views/charts/recharts/RechartsPieChart';

const SCHEMA_NAME = CMSCollections.WORKERS;

interface IWorkersListResponse {
  total: number;
  hasMore: boolean;
  items: IWorker[];
}

const HomeTherapist = () => {
  // ** HOOKS
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const { settings } = useSettings();

  // ** Global vars

  // ** States
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [compError, setCompError] = useState<any[] | null>(null);
  const [pieChartData, setPieChartData] = useState<any[]>([]);

  useEffect(() => {
    const doAsync = async () => {
      try {
        const response = (await dynamicGet({
          params: '/cms/' + SCHEMA_NAME,
          filters: [
            {
              key: 'workerState',
              value: [WorkerStateTypes.ACTIVE, WorkerStateTypes.INACTIVE],
              operator: '$notin',
            },
          ],
        })) as IWorkersListResponse;

        const pendingInterview = response.items.filter(
          (worker) => worker.workerState === WorkerStateTypes.PENDING_INTERVIEW
        );

        const inProcess = response.items.filter(
          (worker) =>
            worker.workerState === WorkerStateTypes.PENDING_GENERAL_INFO ||
            worker.workerState === WorkerStateTypes.PENDING_EXPERIENCE ||
            worker.workerState === WorkerStateTypes.PENDING_PREFERENCES ||
            worker.workerState === WorkerStateTypes.PENDING_AVAILABILITY ||
            worker.workerState === WorkerStateTypes.PENDING_DOCS
        );

        const informationCompleted = response.items.filter(
          (worker) => worker.workerState === WorkerStateTypes.INFORMATION_COMPLETED
        );

        const dataToRender = [];

        if (pendingInterview.length !== 0)
          dataToRender.push({
            name: capitalize(t(WorkerStateTypes.PENDING_INTERVIEW)),
            value: pendingInterview.length,
            color: '#EA5455',
          });

        if (inProcess.length !== 0)
          dataToRender.push({
            name: capitalize(t('in process')),
            value: inProcess.length,
            color: '#FF9F43',
          });

        if (informationCompleted.length !== 0)
          dataToRender.push({
            name: capitalize(t('pending approval')),
            value: informationCompleted.length,
            color: '#28C76F',
          });

        setIsLoading(false);
        setPieChartData(dataToRender);
      } catch (e: any) {
        setCompError(e);
      }
    };

    doAsync();
  }, []);

  if (isLoading) return <Loader />;

  return (
    <ApexChartWrapper>
      <Grid container spacing={6}>
        <Grid item xs={6} md={6}>
          <RecruitmentMap />
        </Grid>
        <Grid item xs={8} md={6}>
          <PieChart
            title={t('Terapeutas')}
            data={pieChartData}
            emptyError={t('AÃºn no hay trabajadores')}
            actionRoute='/workers'
            actionTitle='view all'
          />
        </Grid>
        <Grid item xs={12} md={12}>
          <WidgetOldestOpenPositions />
        </Grid>
        {/* <Grid item xs={12} lg={8}>
          <CrmEarningReportsWithTabs />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <LastPatientsTable />
        </Grid> */}
        {/* <Grid item xs={6} sm={4} lg={2}>
          <CrmSalesWithAreaChart />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CrmSessions />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CardStatsVertical
            stats='1.28k'
            chipText='-12.2%'
            chipColor='default'
            avatarColor='error'
            title='Total Profit'
            subtitle='Last week'
            avatarIcon='tabler:currency-dollar'
          />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CardStatsVertical
            stats='24.67k'
            chipText='+25.2%'
            avatarColor='info'
            chipColor='default'
            title='Total Sales'
            subtitle='Last week'
            avatarIcon='tabler:chart-bar'
          />
        </Grid>
        <Grid item xs={12} sm={8} lg={4}>
          <CrmRevenueGrowth />
        </Grid>

        <Grid item xs={12} md={6} lg={4}>
          <CrmBrowserStates />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <CrmProjectStatus />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <CrmActiveProjects />
        </Grid>

        <Grid item xs={12} md={6}>
          <CrmActivityTimeline />
        </Grid> */}
      </Grid>
    </ApexChartWrapper>
  );
};

export default HomeTherapist;
