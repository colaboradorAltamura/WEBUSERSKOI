// ** MUI Import
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import { Button, CardContent, Typography, capitalize } from '@mui/material';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import Loader from 'src/@core/components/loader';
import { useCurrentUser } from 'src/hooks/useCurrentUser';
import { useSettings } from 'src/@core/hooks/useSettings';

// ** Custom Components Imports
import CustomAvatar from 'src/@core/components/mui/avatar';
import { Icon } from '@iconify/react';
import { getSourceEntityData, handleError, nameof, parseDateToShortString } from 'src/@core/coreHelper';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import {
  CMSCollections,
  EnliteServices,
  IOpenPosition,
  IOpenPositionWorker,
  IPatient,
  IUsersAddress,
  OpenPositionAsignmentStatusTypes,
} from 'src/types/@autogenerated';
import router from 'next/router';

const HomeSeeker = () => {
  // ** HOOKS
  const { t } = useTranslation();
  const currentUser = useCurrentUser();
  const { settings } = useSettings();

  // ** Global vars

  // ** States
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [kpiTotalOpenpositionActives, setKpiTotalOpenpositionActives] = useState<number>(0);
  const [patientsData, setPatientsData] = useState<IPatient[]>([]);
  const [patientsNoOpenPosition, setPatientsNoOpenPosition] = useState<IPatient[]>([]);
  const [kpiTotalPatients, setKpiTotalPatients] = useState<number>(0);

  //obtiene los pacientes activos
  useEffect(() => {
    const doAsync = async () => {
      try {
        setIsLoading(true);

        //gettings all patients
        const totalPatients: any = await dynamicGet({
          params: '/cms/' + CMSCollections.PATIENTS,
          filters: [
            {
              key: nameof<IPatient>('enliteService'),
              value: EnliteServices.CARE,
              operator: '$in',
            },
          ],
        });
        if (totalPatients && totalPatients.items) {
          setKpiTotalPatients(totalPatients.items.length);

          //obtenemos el nombre y el apellido de clinica
          const posts = await Promise.all(
            totalPatients.items.map(async (patient: IPatient) => {
              const address = await getAddressPatient(patient);

              return { dirtyAddress: address, ...patient } as IPatient;
            }) as IPatient[]
          );

          setPatientsData(posts);
          console.log(posts);
        }

        setIsLoading(false);
      } catch (e) {
        setIsLoading(false);
        handleError(e);
      }
    };
    doAsync();
  }, []);

  useEffect(() => {
    const doAsync = async () => {
      try {
        setIsLoading(true);

        //getting all openpostion workerrr
        const data: any = await dynamicGet({
          params: '/cms/' + CMSCollections.OPEN_POSITION_WORKERS,
        });

        if (data.items) {
          //pacientes con openpositon
          const patientOpenposition = getPatientsOpenposition(data.items);
          //pacientes sin openposition
          const patientNoOpenposition = getPatientsNoWorkerAssigned(patientOpenposition);
          //KPI
          const totalOpenpositionsActive = getOpenPositionActive(data.items).length;

          setPatientsNoOpenPosition(patientNoOpenposition);
          setKpiTotalOpenpositionActives(totalOpenpositionsActive);
        }

        setIsLoading(false);
      } catch (e) {
        setIsLoading(false);
        handleError(e);
      }
    };
    doAsync();
  }, [patientsData]);

  const getAddressPatient = async (patientData: IPatient) => {
    const addresses = await dynamicGet({
      params: `/cms/${CMSCollections.USERS_ADDRESSES}/by-user/${patientData.id}`,
    });

    if (addresses && addresses.items && addresses.items.length) {
      const primaryAddress: IUsersAddress = addresses.items.find((address: IUsersAddress) => {
        return address.isPrimary;
      });

      return primaryAddress.address;
    }

    return;
  };
  //devuelve los pacientes que tienen openposition
  const getPatientsOpenposition = (data: any) => {
    const patientsWithOpenPosition = [] as IPatient[];

    //asignamos la data OPEN_POSITION_WORKERS
    const openPositionWorkerData = data as IOpenPositionWorker[];

    //por cada openpositionworker
    openPositionWorkerData.forEach(function (openPositionWorker) {
      //obtenemos cada openposition para poder obtner el id del paciente
      const openPosition = getOpenPositions(openPositionWorker);

      //recorremos los pacientes y verificamos por id
      patientsData.forEach(function (patient) {
        //verificamos que no este duplicado
        const exist = patientsWithOpenPosition.includes(patient);
        //si ambos ids coinciden y si no existe en patientFiltered, se agrega ahi mismo
        if (openPosition?.patient == patient.id && !exist) patientsWithOpenPosition.push(patient);
      });
    });

    return patientsWithOpenPosition;
  };

  //devuelve la cantidad openposition activas
  const getOpenPositionActive = (data: any) => {
    return data.filter(
      (vacant: IOpenPositionWorker) => vacant.assignmentStatus != OpenPositionAsignmentStatusTypes.SELECTED
    );
  };

  //devuelve los pacientes sin workers/openpositions
  const getPatientsNoWorkerAssigned = (patientsFiltered: IPatient[]) => {
    return patientsData.filter((patient) => !patientsFiltered.includes(patient));
  };

  //obtiene las openposition vinculadas al IOpenPositionWorker
  const getOpenPositions = (openPositionWorker: IOpenPositionWorker) => {
    if (!openPositionWorker) return;

    const sourceData = getSourceEntityData({
      obj: openPositionWorker,
      key: nameof<IOpenPositionWorker>('openPositionId'),
    });

    if (!sourceData) return;

    return sourceData as IOpenPosition;
  };

  if (isLoading) return <Loader />;

  return (
    <>
      <Grid container spacing={6}>
        <Grid item xs={12} md={12} lg={3} sx={{ pb: 4 }}>
          <Grid container spacing={6}>
            <Grid item xs={12} md={12}>
              <Card color='primary' sx={{ borderBottom: '1px solid orange' }}>
                <CardContent
                  sx={{
                    display: 'flex',
                    textAlign: 'center',
                    alignItems: 'center',
                    flexDirection: 'column',
                    p: (theme) => `${theme.spacing(9.75, 5, 9.25)} !important`,
                  }}
                >
                  <CustomAvatar skin='light' color='warning' sx={{ width: 50, height: 50, mb: 2.25 }}>
                    <Typography variant='h4' sx={{}}>
                      {kpiTotalOpenpositionActives}
                    </Typography>
                  </CustomAvatar>
                  <Typography variant='h4' sx={{ mb: 2.75 }}>
                    {capitalize(t('open position actives'))}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} md={12}>
              <Card color='primary' sx={{ borderBottom: '1px solid green' }}>
                <CardContent
                  sx={{
                    display: 'flex',
                    textAlign: 'center',
                    alignItems: 'center',
                    flexDirection: 'column',
                    p: (theme) => `${theme.spacing(9.75, 5, 9.25)} !important`,
                  }}
                >
                  <CustomAvatar skin='light' color='success' sx={{ width: 50, height: 50, mb: 2.25 }}>
                    <Typography variant='h4' sx={{}}>
                      {kpiTotalPatients}
                    </Typography>
                  </CustomAvatar>
                  <Typography variant='h4' sx={{ mb: 2.75 }}>
                    {capitalize(t('active patients'))}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Grid>
        <Grid item xs={12} md={12} lg={9} sx={{ pb: 4 }}>
          <Grid container spacing={6}>
            <Grid item xs={12} md={12}>
              <Card>
                <CardHeader
                  title={capitalize(t('patients no workers assigned'))}
                  action={
                    <Button
                      variant='contained'
                      onClick={() => {
                        router.push(`/${CMSCollections.PATIENTS}`);
                      }}
                      sx={{ mr: 4, mb: [2, 0] }}
                    >
                      {capitalize(t('see all patients'))}
                    </Button>
                  }
                />
                <CardContent>
                  <Grid container spacing={6}>
                    {patientsNoOpenPosition.map((patient: IPatient) => {
                      return (
                        <Grid item xs={6} md={3} key={patient.id}>
                          <Card color='primary' key={patient.id}>
                            <CardContent
                              sx={{
                                display: 'flex',
                                textAlign: 'center',
                                alignItems: 'center',
                                flexDirection: 'column',
                                p: (theme) => `${theme.spacing(6, 5, 4)} !important`,
                              }}
                            >
                              <CustomAvatar skin='light' color='primary' sx={{ width: 30, height: 30, mb: 2.25 }}>
                                <Icon icon={'tabler:user'} fontSize={'20'} />
                              </CustomAvatar>
                              <Typography variant='h6' sx={{ mb: 2.75 }}></Typography>

                              <Button
                                variant='text'
                                fullWidth
                                onClick={() => {
                                  router.push(`/${CMSCollections.PATIENTS}/${patient.id}`);
                                }}
                                sx={{ mr: 4, mb: [2, 0] }}
                              >
                                {`${patient.firstName} ${patient.lastName}`}
                              </Button>
                              <Typography variant='body2' sx={{ color: 'text.secondary' }}>
                                {patient.dirtyAddress?.addressString}
                              </Typography>
                              <Typography sx={{ mb: 8, color: 'text.disabled', fontSize: 11, marginTop: 5 }}>
                                <Icon color='primary' fontSize='11' icon={'tabler:clock-edit'} />
                                {parseDateToShortString(patient.createdAt)}
                              </Typography>
                            </CardContent>
                          </Card>
                        </Grid>
                      );
                    })}
                  </Grid>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </>
  );
};

export default HomeSeeker;
