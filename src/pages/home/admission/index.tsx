// ** MUI Import
import { Grid, Paper } from '@mui/material';
// ** Demo Component Imports
import PieChart from 'src/views/charts/recharts/RechartsPieChart';
import WidgetOldestApplicants from 'src/views/dashboards/crm/TableWidgets/WidgetOldestApplicants';

// ** Custom Component Imports
import CardStatsVertical from 'src/@core/components/card-statistics/card-stats-vertical';
import ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts';

import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import { ApplicantsStateTypes, IApplicant } from 'src/types/@autogenerated';

import { hexToRGBA } from 'src/@core/utils/hex-to-rgba';

interface IApplicantsListResponse {
  total: number;
  hasMore: boolean;
  items: IApplicant[];
}

const CrmDashboard = () => {
  const [closedApplicants, setClosedApplicants] = useState<any[]>([]);
  const [openApplicants, setOpenApplicants] = useState<any[]>([]);
  const [compError, setCompError] = useState<any[] | null>(null);
  const [pieChartData, setPieChartData] = useState<any[]>([]);
  const { t } = useTranslation();

  // Faltan traducciones
  useEffect(() => {
    const doAsync = async () => {
      try {
        const response = (await dynamicGet({ params: '/cms/' + 'applicants' })) as IApplicantsListResponse;

        // Indicators data
        const closed = response.items.filter(
          (item) =>
            item.applicantStateType === ApplicantsStateTypes.CONVERTED ||
            item.applicantStateType === ApplicantsStateTypes.REJECTED
        );
        const open = response.items.filter(
          (item) =>
            item.applicantStateType !== ApplicantsStateTypes.CONVERTED &&
            item.applicantStateType !== ApplicantsStateTypes.REJECTED
        );

        setClosedApplicants(closed);
        setOpenApplicants(open);

        // Pie chart data
        const pendingInterview = response.items.filter(
          (item) => item.applicantStateType === ApplicantsStateTypes.PENDING_INTERVIEW
        );
        const interviewScheduled = response.items.filter(
          (item) => item.applicantStateType === ApplicantsStateTypes.INTERVIEW_SCHEDULED
        );
        const pendingQuotation = response.items.filter(
          (item) => item.applicantStateType === ApplicantsStateTypes.PENDING_QUOTATION
        );
        const quotationApproved = response.items.filter(
          (item) => item.applicantStateType === ApplicantsStateTypes.QUOTATION_APPROVED
        );

        const dataToRender = [];

        if (pendingInterview.length !== 0) {
          dataToRender.push({ name: t('Agendar entrevista'), value: pendingInterview.length, color: '#F562C5' });
        }
        if (interviewScheduled.length !== 0) {
          dataToRender.push({ name: t('Esperando entrevista'), value: interviewScheduled.length, color: '#F999DB' });
        }
        if (pendingQuotation.length !== 0) {
          dataToRender.push({ name: t('Presupuesto pendiente'), value: pendingQuotation.length, color: '#F227AF' });
        }
        if (quotationApproved.length !== 0) {
          dataToRender.push({ name: t('Listo para convertir'), value: quotationApproved.length, color: '#28C76F' });
        }

        setPieChartData(dataToRender);
      } catch (e: any) {
        setCompError(e);
      }
    };

    doAsync();
  }, []);

  return (
    <ApexChartWrapper>
      <Paper
        sx={{
          margin: 'auto',
          padding: '10px',
          borderRadius: '10px',
          marginBottom: 5,
        }}
      >
        <Grid container spacing={4}>
          <Grid item xs={12} sm={12} lg={4}>
            <CardStatsVertical
              stats={`${closedApplicants.length}`}
              chipText=''
              chipColor='success'
              avatarColor='success'
              title={t('closed applications')}
              subtitle=''
              avatarIcon='tabler:check'
              // use the color primary main in rgba format
              sx={{
                marginBottom: 5,
              }}
            />
            <CardStatsVertical
              stats={`${openApplicants.length}`}
              chipText=''
              chipColor='default'
              avatarColor='warning'
              title={t('open applications')}
              subtitle=''
              avatarIcon='tabler:file'
            />
          </Grid>
          <Grid item xs={12} md={8}>
            <PieChart
              title={t('Solicitudes abiertas por estado')}
              data={pieChartData}
              emptyError={t('AÃºn no hay solicitudes')}
            />
          </Grid>
        </Grid>
      </Paper>
      <Paper
        sx={{
          margin: 'auto',
          padding: '10px',
          borderRadius: '10px',
          marginBottom: 5,
        }}
      >
        <Grid item xs={12} md={12}>
          {/* Assuming WidgetOldestApplicants is placed below the Grid */}
          <WidgetOldestApplicants />
        </Grid>
      </Paper>
    </ApexChartWrapper>
  );
};

export default CrmDashboard;
