// ** MUI Import
import Grid from '@mui/material/Grid';

// ** Demo Component Imports
import WidgetOldestQuotations from 'src/views/dashboards/crm/TableWidgets/WidgetOldestQuotations';

// ** Custom Component Imports
import Typography from '@mui/material/Typography';
import CardStatsVertical from 'src/@core/components/card-statistics/card-stats-vertical';
import ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts';

import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { dynamicGet } from 'src/services/entitiesDynamicServices';
import {
  ApplicantsStateTypes,
  IApplicant,
  IApplicantQuotation,
  QuotationStatusTypes,
  IPatientPaymentCondition,
  CMSCollections,
} from 'src/types/@autogenerated';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import { CardContent } from '@mui/material';
import { nameof } from 'src/@core/coreHelper';
import { capitalize } from '@mui/material';

interface IApplicantsListResponse {
  total: number;
  hasMore: boolean;
  items: IApplicant[];
}

interface IApplicantQuotationListResponse {
  total: number;
  hasMore: boolean;
  items: IApplicantQuotation[];
}

interface IPatientPaymentConditionListResponse {
  total: number;
  hasMore: boolean;
  items: IPatientPaymentCondition[];
}

const CrmDashboard = () => {
  const [pendingQuotations, setPendingQuotations] = useState<any[]>([]);
  const [pendingApprovalQuotations, setPendingApprovalQuotations] = useState<any[]>([]);
  const [compError, setCompError] = useState<any[] | null>(null);
  const [patientPaymentConditionsStat, setPatientPaymentConditionsStat] = useState<number>(0);
  const { t } = useTranslation();

  const filterPaymentConditionsByDueDate = (paymentConditions: any[]) => {
    const today = new Date();
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 2, 0); // Last day of next month

    const expiringPaymentConditions = paymentConditions.filter((paymentCondition) => {
      const validUntilDate = new Date(paymentCondition.validUntil); // Convert UTC to local time

      return validUntilDate <= nextMonth;
    });

    return expiringPaymentConditions.length;
  };

  useEffect(() => {
    const doAsync = async () => {
      try {
        // const applicantsPendingQuotationResult = (await dynamicGet({
        //   params: `/cms/applicants/by-prop/${nameof<IApplicant>('applicantStateType')}/${
        //     ApplicantsStateTypes.PENDING_QUOTATION
        //   }`,
        // })) as IApplicantsListResponse;

        const pendingApprovalQuotationsResult = (await dynamicGet({
          params: `/cms/applicantQuotations/by-prop/${nameof<IApplicantQuotation>('applicantQuotationStatusType')}/${
            QuotationStatusTypes.PENDING_APPROVAL
          }`,
        })) as IApplicantQuotationListResponse;

        const pendingQuotationsResult = (await dynamicGet({
          params: `/cms/applicantQuotations/by-prop/${nameof<IApplicantQuotation>('applicantQuotationStatusType')}/${
            QuotationStatusTypes.PENDING
          }`,
        })) as IApplicantQuotationListResponse;

        const paymentConditionsResult = (await dynamicGet({
          params: `/cms/${CMSCollections.PATIENT_PAYMENT_CONDITIONS}`,
        })) as IPatientPaymentConditionListResponse;

        const pendingApprovalQuotations = pendingApprovalQuotationsResult.items;
        const pendingQuotations = pendingQuotationsResult.items;
        console.log(paymentConditionsResult.items);
        const patientPaymentConditions = filterPaymentConditionsByDueDate(paymentConditionsResult.items);

        setPatientPaymentConditionsStat(patientPaymentConditions);
        setPendingApprovalQuotations(pendingApprovalQuotations);
        setPendingQuotations(pendingQuotations);
      } catch (e: any) {
        setCompError(e);
      }
    };

    doAsync();
  }, []);

  return (
    <ApexChartWrapper>
      <Grid container spacing={2}>
        <Grid item xs={12} md={12}>
          <Card>
            <CardHeader sx={{ textTransform: 'capitalize' }} title={t('presupuestos')} />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={4} md={4}>
                  <CardStatsVertical
                    stats={`${pendingQuotations.length}`}
                    chipText=''
                    chipColor='success'
                    avatarColor='info'
                    title={t('pendientes')}
                    subtitle=<>&nbsp;</>
                    avatarIcon='tabler:clock-hour-12'
                    fontSize={15}
                    numberSize={30}
                  />
                </Grid>
                <Grid item xs={4} md={4}>
                  <CardStatsVertical
                    stats={`${pendingApprovalQuotations.length}`}
                    chipText=''
                    chipColor='success'
                    avatarColor='warning'
                    title={t('pendientes de aprobaci贸n')}
                    subtitle=<>&nbsp;</>
                    avatarIcon='tabler:clock-check'
                    fontSize={15}
                    numberSize={30}
                  />
                </Grid>
                <Grid item xs={4} md={4}>
                  {/* TODO */}
                  <CardStatsVertical
                    stats={`${patientPaymentConditionsStat}`}
                    chipText=''
                    chipColor='success'
                    avatarColor='error'
                    title={t('soon to expire')}
                    subtitle={capitalize(t('hasta fin de mes pr贸ximo'))}
                    avatarIcon='tabler:clock-exclamation'
                    fontSize={15}
                    numberSize={30}
                    actionRoute='/paymentConditions'
                    actionTitle='view all'
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* <Grid item xs={6} sm={2} lg={2}>
          <CardStatsVertical
            stats={`${closedApplicants.length}`}
            chipText=''
            chipColor='success'
            avatarColor='info'
            title={t('pendientes')}
            subtitle=''
            avatarIcon='tabler:clock-hour-12'
            fontSize={15}
            numberSize={30}
          />
        </Grid>
        <Grid item xs={6} sm={2} md={2}>
          <CardStatsVertical
            stats={`${closedApplicants.length}`}
            chipText=''
            chipColor='success'
            avatarColor='warning'
            title={t('pendientes de aprobaci贸n')}
            subtitle=''
            avatarIcon='tabler:clock-check'
            fontSize={15}
            numberSize={30}
          />
        </Grid>
        <Grid item xs={6} sm={2} lg={2}>
          <CardStatsVertical
            stats={`${closedApplicants.length}`}
            chipText=''
            chipColor='success'
            avatarColor='error'
            title={t('pr贸ximos a vencer')}
            subtitle={t('30 dias')}
            avatarIcon='tabler:clock-exclamation'
            fontSize={15}
            numberSize={30}
          />
        </Grid> */}

        <Grid item xs={12} md={12}>
          <WidgetOldestQuotations />
        </Grid>
        {/* <Grid item xs={12} lg={8}>
          <CrmEarningReportsWithTabs />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <LastPatientsTable />
        </Grid> */}
        {/* <Grid item xs={6} sm={4} lg={2}>
          <CrmSalesWithAreaChart />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CrmSessions />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CardStatsVertical
            stats='1.28k'
            chipText='-12.2%'
            chipColor='default'
            avatarColor='error'
            title='Total Profit'
            subtitle='Last week'
            avatarIcon='tabler:currency-dollar'
          />
        </Grid>
        <Grid item xs={6} sm={4} lg={2}>
          <CardStatsVertical
            stats='24.67k'
            chipText='+25.2%'
            avatarColor='info'
            chipColor='default'
            title='Total Sales'
            subtitle='Last week'
            avatarIcon='tabler:chart-bar'
          />
        </Grid>
        <Grid item xs={12} sm={8} lg={4}>
          <CrmRevenueGrowth />
        </Grid>

        <Grid item xs={12} md={6} lg={4}>
          <CrmBrowserStates />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <CrmProjectStatus />
        </Grid>
        <Grid item xs={12} md={6} lg={4}>
          <CrmActiveProjects />
        </Grid>
        <Grid item xs={12} md={6}>
          <CrmActivityTimeline />
        </Grid> */}
      </Grid>
    </ApexChartWrapper>
  );
};

export default CrmDashboard;
